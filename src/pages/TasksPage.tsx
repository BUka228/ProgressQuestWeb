import React, { useState } from 'react'
import { useCreateTask, useTasks } from '@/hooks/useTasks'
import { TaskModal } from '@/components/TaskModal'
import { TaskCard } from '@/components/TaskCard'
import { TaskDocument, CreateTaskPayload } from '@/types/task.types'
import { useWorkspaceStore } from '@/stores/workspaceStore'
import { useAuth } from '@/contexts/AuthContext' // <-- 1. –ò–ú–ü–û–†–¢–ò–†–£–ï–ú useAuth
import { toast } from 'sonner' // <-- 2. –ò–ú–ü–û–†–¢–ò–†–£–ï–ú toast –¥–ª—è –æ—à–∏–±–æ–∫

export const TasksPage = () => {
  const [isCreateTaskModalOpen, setIsCreateTaskModalOpen] = useState(false)
  const [statusFilter, setStatusFilter] = useState<string>('all')
  const { currentWorkspace } = useWorkspaceStore()
  const { data: tasksData, isLoading, error } = useTasks(currentWorkspace?.id)
  const createTaskMutation = useCreateTask()
  const { currentUser } = useAuth() // <-- 3. –ü–û–õ–£–ß–ê–ï–ú –¢–ï–ö–£–©–ï–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø

  const handleCreateTask = (taskData: CreateTaskPayload) => {
    // --- 4. –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê ---
    if (!currentUser) {
      toast.error("–í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞—á–∏.");
      return;
    }

    if (!taskData.workspaceId) {
       toast.error("–ù–µ –≤—ã–±—Ä–∞–Ω–æ —Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –≤ —à–∞–ø–∫–µ —Å–∞–π—Ç–∞.");
       return;
    }
    
    // –ü–µ—Ä–µ–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    createTaskMutation.mutate({ userId: currentUser.uid, taskData });
    // --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô ---
  }

  const filteredTasks = tasksData?.tasks.filter(task => {
    if (statusFilter === 'all') return true
    if (statusFilter === 'todo') return task.status === 'TODO'
    if (statusFilter === 'in_progress') return task.status === 'IN_PROGRESS'
    if (statusFilter === 'done') return task.status === 'DONE'
    return true
  }) || []

  return (
    <div className="p-6 bg-gradient-to-br from-slate-50 to-blue-50 min-h-screen">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-3xl font-bold text-slate-800 drop-shadow-sm">–ó–∞–¥–∞—á–∏</h1>
        <button
          onClick={() => setIsCreateTaskModalOpen(true)}
          className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 shadow-md transition-all duration-200 hover:shadow-lg"
        >
          + –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞
        </button>
      </div>

      <div className="bg-white rounded-lg shadow-md">
        <div className="p-6">
          <div className="flex space-x-4 mb-6">
            <button 
              onClick={() => setStatusFilter('all')}
              className={`px-4 py-2 rounded-lg transition-colors ${
                statusFilter === 'all' 
                  ? 'bg-blue-100 text-blue-800' 
                  : 'text-gray-600 hover:bg-gray-100'
              }`}
            >
              –í—Å–µ ({tasksData?.tasks.length || 0})
            </button>
            <button 
              onClick={() => setStatusFilter('todo')}
              className={`px-4 py-2 rounded-lg transition-colors ${
                statusFilter === 'todo' 
                  ? 'bg-blue-100 text-blue-800' 
                  : 'text-gray-600 hover:bg-gray-100'
              }`}
            >
              üìã –ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é ({tasksData?.tasks.filter(t => t.status === 'TODO').length || 0})
            </button>
            <button 
              onClick={() => setStatusFilter('in_progress')}
              className={`px-4 py-2 rounded-lg transition-colors ${
                statusFilter === 'in_progress' 
                  ? 'bg-blue-100 text-blue-800' 
                  : 'text-gray-600 hover:bg-gray-100'
              }`}
            >
              ‚ö° –í —Ä–∞–±–æ—Ç–µ ({tasksData?.tasks.filter(t => t.status === 'IN_PROGRESS').length || 0})
            </button>
            <button 
              onClick={() => setStatusFilter('done')}
              className={`px-4 py-2 rounded-lg transition-colors ${
                statusFilter === 'done' 
                  ? 'bg-blue-100 text-blue-800' 
                  : 'text-gray-600 hover:bg-gray-100'
              }`}
            >
              ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ ({tasksData?.tasks.filter(t => t.status === 'DONE').length || 0})
            </button>
          </div>

          {isLoading ? (
            <p className="text-center py-12">–ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏...</p>
          ) : error ? (
            <p className="text-center py-12 text-red-600">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á</p>
          ) : tasksData?.tasks.length === 0 ? (
            <div className="text-center py-12">
              <div className="text-6xl mb-4">üìù</div>
              <p className="text-slate-500 text-lg">–ó–∞–¥–∞—á –ø–æ–∫–∞ –Ω–µ—Ç</p>
              <p className="text-slate-400 mt-2">–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å</p>
              <button
                onClick={() => setIsCreateTaskModalOpen(true)}
                className="mt-4 px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
              >
                + –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É
              </button>
            </div>
          ) : filteredTasks.length === 0 ? (
            <div className="text-center py-12">
              <div className="text-6xl mb-4">üîç</div>
              <p className="text-slate-500 text-lg">–ù–µ—Ç –∑–∞–¥–∞—á —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º</p>
              <p className="text-slate-400 mt-2">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É</p>
            </div>
          ) : (
            <div>
              {filteredTasks.map((task: TaskDocument) => (
                <TaskCard 
                  key={task.id} 
                  task={task} 
                  variant="default"
                  userId={currentUser?.uid}
                  workspaceId={currentWorkspace?.id}
                />
              ))}
            </div>
          )}
        </div>
      </div>

      <TaskModal
        isOpen={isCreateTaskModalOpen}
        onClose={() => setIsCreateTaskModalOpen(false)}
        onSubmit={handleCreateTask}
        mode="create"
      />
    </div>
  )
}
