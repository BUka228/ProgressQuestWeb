--- .env.example ---

# Firebase Configuration
VITE_FIREBASE_API_KEY=your_api_key_here
VITE_FIREBASE_AUTH_DOMAIN=your_project.firebaseapp.com
VITE_FIREBASE_PROJECT_ID=your_project_id
VITE_FIREBASE_STORAGE_BUCKET=your_project.appspot.com
VITE_FIREBASE_MESSAGING_SENDER_ID=123456789
VITE_FIREBASE_APP_ID=1:123456789:web:abcdefghijklmnop

# Application Configuration
VITE_APP_NAME=ProgressQuest Universal
VITE_APP_VERSION=1.0.0
VITE_APP_ENVIRONMENT=production

# API Configuration
VITE_API_BASE_URL=https://api.progressquest.com
VITE_API_TIMEOUT=30000

# Analytics
VITE_GOOGLE_ANALYTICS_ID=G-XXXXXXXXXX

# Feature Flags
VITE_ENABLE_ANALYTICS=true
VITE_ENABLE_NOTIFICATIONS=true
VITE_ENABLE_GARDEN=true
VITE_ENABLE_COLLABORATION=true

# External Services
VITE_SUPPORT_EMAIL=support@progressquest.com
VITE_FEEDBACK_URL=https://feedback.progressquest.com


--- .env.local ---

VITE_FIREBASE_API_KEY=AIzaSyCYXSYFEKHWbfQiVypZoWQK05hamae_Q0g
VITE_FIREBASE_AUTH_DOMAIN=progress-quest-universal.firebaseapp.com
VITE_FIREBASE_PROJECT_ID=progress-quest-universal
VITE_FIREBASE_STORAGE_BUCKET=progress-quest-universal.appspot.com
VITE_FIREBASE_MESSAGING_SENDER_ID=1039559255344
VITE_FIREBASE_APP_ID=1:1039559255344:web:dd296d7ea524be2f8554f5
VITE_FIREBASE_MEASUREMENT_ID=G-JLFRTXVRXR

# ==================================
# Application Configuration
# ==================================
VITE_APP_NAME=ProgressQuest Universal
VITE_APP_VERSION=1.0.0
VITE_APP_ENVIRONMENT=production

# ==================================
# API Configuration (–¥–ª—è Cloud Functions)
# ==================================
# –†–µ–≥–∏–æ–Ω –¥–ª—è Cloud Functions
VITE_FIREBASE_FUNCTIONS_REGION=europe-west1

# ==================================
# Feature Flags (—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏—á–∞–º–∏)
# ==================================
VITE_ENABLE_ANALYTICS=true
VITE_ENABLE_NOTIFICATIONS=true
VITE_ENABLE_GARDEN=true
VITE_ENABLE_COLLABORATION=true

# ==================================
# Production Settings
# ==================================
# Disable Firebase Emulators for Production
VITE_USE_FIREBASE_EMULATORS=false

# ==================================
# External Services
# ==================================
VITE_SUPPORT_EMAIL=support@progressquest.com
VITE_FEEDBACK_URL=https://feedback.progressquest.com


--- .eslintrc.cjs ---

module.exports = {
  root: true,
  env: { browser: true, es2020: true },
  extends: [
    'eslint:recommended',
    '@typescript-eslint/recommended',
    'plugin:react-hooks/recommended',
    'plugin:@typescript-eslint/recommended',
    'plugin:react/recommended',
  ],
  ignorePatterns: ['dist', '.eslintrc.cjs'],
  parser: '@typescript-eslint/parser',
  plugins: ['react-refresh', '@typescript-eslint', 'react'],
  settings: {
    react: {
      version: 'detect',
    },
  },
  rules: {
    'react-refresh/only-export-components': [
      'warn',
      { allowConstantExport: true },
    ],
    'react/react-in-jsx-scope': 'off',
    '@typescript-eslint/no-unused-vars': ['error', { argsIgnorePattern: '^_' }],
    '@typescript-eslint/explicit-function-return-type': 'off',
    '@typescript-eslint/explicit-module-boundary-types': 'off',
    '@typescript-eslint/no-explicit-any': 'warn',
    'prefer-const': 'error',
    'no-var': 'error',
  },
}


--- .firebaserc ---

{
  "projects": {
    "default": "progress-quest-universal"
  }
}


--- .gitignore ---

# Created by https://www.toptal.com/developers/gitignore/api/react,typescript,vite,firebase,visualstudiocode,node
# Edit at https://www.toptal.com/developers/gitignore?templates=react,typescript,vite,firebase,visualstudiocode,node

### Firebase ###
# Firebase Emulator Data
.firebase/emulators/
*.emulators.log

# Firebase Crashlytics
*.dSYM/
*.firebase/

# Firebase Hosting
.firebase/hosting.*.cache

# Firebase Test Lab
test-lab-results.json

### Node ###
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-temporary-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/
web_modules/

# Snowpack dependency directory (https://www.snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build output
.nuxt
dist

# Docusaurus build output
.docusaurus

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores files
.changeset

# Lockfiles
package-lock.json
yarn.lock
pnpm-lock.yaml

### React ###
build/
.DS_Store
*.js.map
*.css.map
coverage/

### TypeScript ###
# TypeScript v1 declaration files
typings/

# TypeScript cache
*.tsbuildinfo

#ts-jest cache
.ts-jest

# Typescript v2.0 temporary folder
.tscache/

### Vite ###
# Vite build output
dist

# Vite cache
.vite

### VisualStudioCode ###
.vscode/*
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json
*.code-workspace

# Local History for Visual Studio Code
.history/

# END https://www.toptal.com/developers/gitignore/api/react,typescript,vite,firebase,visualstudiocode,node
merged_ts_files.txt
<<<<<<< HEAD
FIREBASE_SETUP_REAL.md
=======
>>>>>>> 1802feae3115fba0accaa8969680cbcbe6469ed0


--- bundle_client_files.py ---

import os

def bundle_files(start_path, output_file):
    ignore_dirs = ['node_modules', 'dist', 'build', 'coverage', '.git', '.vscode', '__pycache__']
    ignore_files = ['package-lock.json', os.path.basename(output_file)]

    with open(output_file, 'w', encoding='utf-8') as outfile:
        for root, dirs, files in os.walk(start_path):
            # Exclude specified directories
            dirs[:] = [d for d in dirs if d not in ignore_dirs]
            
            for file in files:
                if file in ignore_files:
                    continue
                
                file_path = os.path.join(root, file)
                relative_path = os.path.relpath(file_path, start_path)
                
                outfile.write(f"--- {relative_path.replace(os.sep, '/')} ---\n\n")
                try:
                    with open(file_path, 'r', encoding='utf-8', errors='ignore') as infile:
                        outfile.write(infile.read())
                        outfile.write('\n\n')
                except Exception as e:
                    outfile.write(f"Could not read file: {e}\n\n")

if __name__ == '__main__':
    client_path = os.path.join(os.path.dirname(os.path.abspath(__file__)))
    output_file_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'client_bundle.txt')
    
    if os.path.isdir(client_path):
        bundle_files(client_path, output_file_path)
        print(f"All files from '{client_path}' have been bundled into '{output_file_path}'")
    else:
        print(f"Error: Directory not found at '{client_path}'")



--- components.json ---

{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.js",
    "css": "src/index.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}

--- DEPLOYMENT.md ---

# –î–µ–ø–ª–æ–π ProgressQuest Universal

## üöÄ –ü—Ä–æ–¥–∞–∫—à–µ–Ω –≤–µ—Ä—Å–∏—è —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤

### –°—Ç–∞—Ç—É—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
‚úÖ –≠–º—É–ª—è—Ç–æ—Ä—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã  
‚úÖ Firebase –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω  
‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞  
‚úÖ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è workspace —Ä–∞–±–æ—Ç–∞—é—Ç  
‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞  

### –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –¥–µ–ø–ª–æ—è

1. **Firebase –ø—Ä–æ–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω** —Å ID: `progress-quest-universal`
2. **Cloud Functions —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã** –≤ —Ä–µ–≥–∏–æ–Ω–µ `us-central1`
3. **Firestore –ø—Ä–∞–≤–∏–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã**
4. **Authentication –≤–∫–ª—é—á–µ–Ω** (Google Provider)

### –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–µ–ø–ª–æ—è

#### 1. –°–±–æ—Ä–∫–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω –≤–µ—Ä—Å–∏–∏
```bash
npm run build
```

#### 2. –î–µ–ø–ª–æ–π –Ω–∞ Firebase Hosting
```bash
firebase deploy --only hosting
```

#### 3. –î–µ–ø–ª–æ–π Cloud Functions (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
```bash
firebase deploy --only functions
```

#### 4. –ü–æ–ª–Ω—ã–π –¥–µ–ø–ª–æ–π
```bash
firebase deploy
```

### –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è

–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ `.env.local` —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:

```env
VITE_USE_FIREBASE_EMULATORS=false
VITE_APP_ENVIRONMENT=production
VITE_FIREBASE_FUNCTIONS_REGION=us-central1
```

### –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è

1. **–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è**: Google Login –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å
2. **–†–∞–±–æ—á–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞**: 
   - –°–æ–∑–¥–∞–Ω–∏–µ ‚úÖ
   - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ‚úÖ
   - –£–¥–∞–ª–µ–Ω–∏–µ ‚úÖ
   - –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è ‚úÖ
   - –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ ‚úÖ

3. **Cloud Functions**: –í—Å–µ API endpoints –¥–æ–ª–∂–Ω—ã –æ—Ç–≤–µ—á–∞—Ç—å

### –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã —Å–∏—Å—Ç–µ–º—ã

```
src/
‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îú‚îÄ‚îÄ WorkspaceCard.tsx         # –ö–∞—Ä—Ç–æ—á–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
‚îÇ   ‚îú‚îÄ‚îÄ WorkspaceModal.tsx        # –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
‚îÇ   ‚îî‚îÄ‚îÄ WorkspaceSwitcher.tsx     # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤
‚îú‚îÄ‚îÄ hooks/
‚îÇ   ‚îî‚îÄ‚îÄ useWorkspaces.ts          # React Query —Ö—É–∫–∏ –¥–ª—è API
‚îú‚îÄ‚îÄ services/
‚îÇ   ‚îî‚îÄ‚îÄ workspaceService.ts       # –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
‚îú‚îÄ‚îÄ stores/
‚îÇ   ‚îî‚îÄ‚îÄ workspaceStore.ts         # Zustand —Å—Ç–æ—Ä –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
‚îî‚îÄ‚îÄ pages/
    ‚îî‚îÄ‚îÄ WorkspacePage.tsx         # –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
```

### –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥–∞–∫—à–µ–Ω –≤–µ—Ä—Å–∏–∏

- **–ë–µ–∑ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤**: –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –∏–¥—É—Ç –≤ —Ä–µ–∞–ª—å–Ω—ã–π Firebase
- **–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ**: React Query –∫—ç—à–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞ 5 –º–∏–Ω—É—Ç
- **–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è**: Zustand persist —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ localStorage
- **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å**: –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç —á–µ—Ä–µ–∑ Cloud Functions

### URL —Å—Ç—Ä—É–∫—Ç—É—Ä–∞

- `/app/workspaces` - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—á–∏–º–∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞–º–∏
- `/app/workspaces?create=true` - –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
- `/app/tasks` - –ó–∞–¥–∞—á–∏ (–±—É–¥—É—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ –∞–∫—Ç–∏–≤–Ω–æ–º—É workspace)

### –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã

1. **Popup blocked**: –ù–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è Google Auth, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Ä–∞–∑—Ä–µ—à–∏—Ç—å
2. **CORS –æ—à–∏–±–∫–∏**: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ–º–µ–Ω –≤ Firebase Console
3. **Functions timeout**: –£–≤–µ–ª–∏—á—å—Ç–µ timeout –≤ firebase.json

### –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏

1. –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å Cloud Functions –∏–∑ `merged_ts_files.txt`
2. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Firestore –ø—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
3. –î–æ–±–∞–≤–∏—Ç—å –¥–æ–º–µ–Ω –≤ Firebase Authentication settings
4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ


--- firebase.json ---

{
  "hosting": {
    "public": "dist",
    "ignore": [
      "firebase.json",
      "**/.*",
      "**/node_modules/**"
    ],
    "rewrites": [
      {
        "source": "**",
        "destination": "/index.html"
      }
    ],
    "headers": [
      {
        "source": "**/*.@(js|jsx|ts|tsx)",
        "headers": [
          {
            "key": "Cache-Control",
            "value": "max-age=31536000"
          }
        ]
      },
      {
        "source": "**/*.@(css|scss)",
        "headers": [
          {
            "key": "Cache-Control",
            "value": "max-age=31536000"
          }
        ]
      },
      {
        "source": "/service-worker.js",
        "headers": [
          {
            "key": "Cache-Control",
            "value": "no-cache"
          }
        ]
      }
    ]
  },
  "firestore": {
    "rules": "firestore.rules",
    "indexes": "firestore.indexes.json"
  },
  "functions": {
    "predeploy": [
      "npm --prefix \"$RESOURCE_DIR\" run lint",
      "npm --prefix \"$RESOURCE_DIR\" run build"
    ]
  },
  "storage": {
    "rules": "storage.rules"
  },
  "emulators": {
    "auth": {
      "port": 9099
    },
    "functions": {
      "port": 5001
    },
    "firestore": {
      "port": 8080
    },
    "storage": {
      "port": 9199
    },
    "ui": {
      "enabled": true,
      "port": 4000
    },
    "singleProjectMode": true,
    "hosting": {
      "port": 5000
    }
  }
}


--- FIREBASE_SETUP.md ---

# Firebase Setup –¥–ª—è ProgressQuest Universal

## –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç

### –í–∞—Ä–∏–∞–Ω—Ç 1: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
–ó–∞–ø—É—Å—Ç–∏—Ç–µ `start-dev.bat` - —ç—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–µ—Ä–≤–∏—Å—ã.

### –í–∞—Ä–∏–∞–Ω—Ç 2: –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫

1. **–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:**
   ```bash
   npm install
   cd functions
   npm install
   cd ..
   ```

2. **–ó–∞–ø—É—Å–∫ Firebase —ç–º—É–ª—è—Ç–æ—Ä–æ–≤:**
   ```bash
   npm run emulators
   # –∏–ª–∏
   npx firebase emulators:start --project=demo-test
   ```

3. **–ó–∞–ø—É—Å–∫ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–≤ –Ω–æ–≤–æ–º —Ç–µ—Ä–º–∏–Ω–∞–ª–µ):**
   ```bash
   npm run dev
   ```

## –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã ERR_CONNECTION_REFUSED

–û—à–∏–±–∫–∞ `POST http://localhost:5001/... net::ERR_CONNECTION_REFUSED` –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –ø—Ä–∏—á–∏–Ω–∞–º:

### 1. Firebase Emulators –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã
**–†–µ—à–µ–Ω–∏–µ:** –ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç–º—É–ª—è—Ç–æ—Ä—ã:
```bash
npm run emulators
```
–∏–ª–∏
```bash
npx firebase emulators:start
```

### 2. –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª .env
**–†–µ—à–µ–Ω–∏–µ:** –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª `.env` —Å–æ–∑–¥–∞–Ω –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç:
```env
VITE_USE_FIREBASE_EMULATORS=true
```

### 3. –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞–ø–∫–∞ functions
**–†–µ—à–µ–Ω–∏–µ:** –£–∂–µ —Å–æ–∑–¥–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ –≤—Å–µ–º–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏.

## –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã

1. **Firebase Emulators UI:** http://localhost:4000
2. **–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:** http://localhost:5173 (–∏–ª–∏ –¥—Ä—É–≥–æ–π –ø–æ—Ä—Ç, —É–∫–∞–∑–∞–Ω–Ω—ã–π Vite)

–í –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –¥–æ–ª–∂–Ω–æ –ø–æ—è–≤–∏—Ç—å—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ:
```
‚úÖ Functions emulator connected
```

## –°—Ç—Ä—É–∫—Ç—É—Ä–∞ Firebase Functions

```
functions/
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îî‚îÄ‚îÄ index.ts          # –û—Å–Ω–æ–≤–Ω—ã–µ Cloud Functions
‚îú‚îÄ‚îÄ package.json          # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Functions
‚îî‚îÄ‚îÄ tsconfig.json         # TypeScript –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
```

## –î–æ—Å—Ç—É–ø–Ω—ã–µ Cloud Functions

- `getUserWorkspaces` - –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- `createWorkspace` - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞  
- `getWorkspaceDetails` - –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
- `updateWorkspace` - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
- `deleteWorkspace` - —É–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞

## Troubleshooting

### –ü—Ä–æ–±–ª–µ–º–∞ —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π –≤ PowerShell
–ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç –∏–∑-–∑–∞ —Å–∏–º–≤–æ–ª–∞ "–∑" –≤ –Ω–∞—á–∞–ª–µ:
1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ `.bat` —Ñ–∞–π–ª—ã
2. –ò–ª–∏ –∑–∞–ø—É—Å–∫–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—É—é –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É (cmd)

### Functions –Ω–µ –∫–æ–º–ø–∏–ª–∏—Ä—É—é—Ç—Å—è
```bash
cd functions
npm run build
```

### –ü–æ—Ä—Ç 5001 –∑–∞–Ω—è—Ç
–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –¥—Ä—É–≥–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –ø–æ—Ä—Ç 5001:
```bash
netstat -ano | findstr :5001
```

### –û—á–∏—Å—Ç–∫–∞ –∏ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞
```bash
# –û—á–∏—Å—Ç–∫–∞ node_modules
rm -rf node_modules functions/node_modules
npm install
cd functions && npm install
```

## –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã

```bash
# –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ Functions —ç–º—É–ª—è—Ç–æ—Ä–∞
npm run emulators:ui

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤
firebase emulators:exec --only functions "echo 'Functions running'"

# –°–±–æ—Ä–∫–∞ Functions
cd functions && npm run build

# –ü—Ä–æ–≤–µ—Ä–∫–∞ TypeScript
cd functions && npx tsc --noEmit
```


--- FIREBASE_SETUP_REAL.md ---

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ Firebase –ø—Ä–æ–µ–∫—Ç–∞

## –®–∞–≥ 1: –°–æ–∑–¥–∞–π—Ç–µ Firebase –ø—Ä–æ–µ–∫—Ç

1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ [Firebase Console](https://console.firebase.google.com/)
2. –ù–∞–∂–º–∏—Ç–µ "Create a project" –∏–ª–∏ "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç"
3. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "ProgressQuest Universal")
4. –û—Ç–∫–ª—é—á–∏—Ç–µ Google Analytics (–º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –ø–æ–∑–∂–µ)
5. –ù–∞–∂–º–∏—Ç–µ "Create project"

## –®–∞–≥ 2: –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

1. –í Firebase Console –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø—Ä–æ–µ–∫—Ç
2. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–∫–æ–Ω–∫—É `</>` (Add web app)
3. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "ProgressQuest Web")
4. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ñ–ª–∞–∂–æ–∫ "Also set up Firebase Hosting" (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
5. –ù–∞–∂–º–∏—Ç–µ "Register app"

## –®–∞–≥ 3: –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é

Firebase –ø–æ–∫–∞–∂–µ—Ç –≤–∞–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤–∏–¥–∞:
```javascript
const firebaseConfig = {
  apiKey: "AIzaSyC...",
  authDomain: "your-project.firebaseapp.com",
  projectId: "your-project",
  storageBucket: "your-project.appspot.com",
  messagingSenderId: "123456789",
  appId: "1:123456789:web:abcdef..."
};
```

## –®–∞–≥ 4: –û–±–Ω–æ–≤–∏—Ç–µ .env —Ñ–∞–π–ª

–ó–∞–º–µ–Ω–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–µ `.env`:
```env
VITE_FIREBASE_API_KEY=AIzaSyC...
VITE_FIREBASE_AUTH_DOMAIN=your-project.firebaseapp.com
VITE_FIREBASE_PROJECT_ID=your-project
VITE_FIREBASE_STORAGE_BUCKET=your-project.appspot.com
VITE_FIREBASE_MESSAGING_SENDER_ID=123456789
VITE_FIREBASE_APP_ID=1:123456789:web:abcdef...
```

## –®–∞–≥ 5: –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Authentication

1. –í Firebase Console –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Authentication
2. –ù–∞–∂–º–∏—Ç–µ "Get started"
3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É "Sign-in method"
4. –í–∫–ª—é—á–∏—Ç–µ Google:
   - –ù–∞–∂–º–∏—Ç–µ –Ω–∞ Google
   - –í–∫–ª—é—á–∏—Ç–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å "Enable"
   - –í–≤–µ–¥–∏—Ç–µ support email
   - –ù–∞–∂–º–∏—Ç–µ "Save"

## –®–∞–≥ 6: –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Firestore Database

1. –í Firebase Console –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Firestore Database
2. –ù–∞–∂–º–∏—Ç–µ "Create database"
3. –í—ã–±–µ—Ä–∏—Ç–µ "Start in test mode" (–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—Å—è –ø–æ–∑–∂–µ)
4. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, europe-west3)

## –®–∞–≥ 7: –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Storage

1. –í Firebase Console –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Storage
2. –ù–∞–∂–º–∏—Ç–µ "Get started"
3. –í—ã–±–µ—Ä–∏—Ç–µ "Start in test mode"
4. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ç –∂–µ —Ä–µ–≥–∏–æ–Ω, —á—Ç–æ –∏ –¥–ª—è Firestore

## –®–∞–≥ 8: –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Functions (–µ—Å–ª–∏ –Ω—É–∂–Ω—ã)

1. –í Firebase Console –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Functions
2. –ù–∞–∂–º–∏—Ç–µ "Get started"
3. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω (—Ç–æ—Ç –∂–µ, —á—Ç–æ –∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤)

## –®–∞–≥ 9: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:
   ```bash
   npm run dev
   ```

2. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Google - –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –æ—à–∏–±–æ–∫!

## –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–º–µ–Ω–∞ –≤ Google Auth (–¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞)

–ï—Å–ª–∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –¥–µ–ø–ª–æ–∏—Ç—å, –¥–æ–±–∞–≤—å—Ç–µ –≤–∞—à –¥–æ–º–µ–Ω:
1. Authentication ‚Üí Settings ‚Üí Authorized domains
2. –î–æ–±–∞–≤—å—Ç–µ –≤–∞—à –¥–æ–º–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, `yourapp.com`)

## –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å

–ü–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ Firestore –∏ Storage:
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –∏–∑ —Ñ–∞–π–ª–æ–≤ `firestore.rules` –∏ `storage.rules`
- –û–Ω–∏ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –¥–ª—è –≤–∞—à–µ–π —Å—Ö–µ–º—ã –¥–∞–Ω–Ω—ã—Ö

## Troubleshooting

### –û—à–∏–±–∫–∞ "Firebase: Error (auth/unauthorized-domain)"
- –î–æ–±–∞–≤—å—Ç–µ localhost:5173 –≤ Authorized domains –≤ Authentication settings

### –û—à–∏–±–∫–∞ "Firebase: Error (auth/operation-not-allowed)"
- –í–∫–ª—é—á–∏—Ç–µ Google Sign-in –≤ Authentication ‚Üí Sign-in method

### –û—à–∏–±–∫–∞ "Quota exceeded"
- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏–º–∏—Ç—ã –≤ Firebase Console ‚Üí Usage
- –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –æ–±—ã—á–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–ª–∞–Ω–∞


--- firestore-debug.log ---



--- firestore.indexes.json ---

{
  "indexes": [
    {
      "collectionGroup": "tasks",
      "queryScope": "COLLECTION",
      "fields": [
        {
          "fieldPath": "workspaceId",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "status",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "createdAt",
          "order": "DESCENDING"
        }
      ]
    },
    {
      "collectionGroup": "tasks",
      "queryScope": "COLLECTION",
      "fields": [
        {
          "fieldPath": "assigneeId",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "dueDate",
          "order": "ASCENDING"
        }
      ]
    },
    {
      "collectionGroup": "tasks",
      "queryScope": "COLLECTION",
      "fields": [
        {
          "fieldPath": "projectId",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "priority",
          "order": "DESCENDING"
        }
      ]
    },
    {
      "collectionGroup": "pomodoroSessions",
      "queryScope": "COLLECTION",
      "fields": [
        {
          "fieldPath": "userId",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "startTime",
          "order": "DESCENDING"
        }
      ]
    },
    {
      "collectionGroup": "notifications",
      "queryScope": "COLLECTION",
      "fields": [
        {
          "fieldPath": "userId",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "isRead",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "createdAt",
          "order": "DESCENDING"
        }
      ]
    },
    {
      "collectionGroup": "userAchievements",
      "queryScope": "COLLECTION",
      "fields": [
        {
          "fieldPath": "userId",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "unlockedAt",
          "order": "DESCENDING"
        }
      ]
    }
  ],
  "fieldOverrides": [
    {
      "collectionGroup": "tasks",
      "fieldPath": "tags",
      "indexes": [
        {
          "order": "ASCENDING",
          "queryScope": "COLLECTION"
        },
        {
          "arrayConfig": "CONTAINS",
          "queryScope": "COLLECTION"
        }
      ]
    }
  ]
}


--- firestore.rules ---

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can read and write their own user document
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Workspaces - users can read/write workspaces they're members of
    match /workspaces/{workspaceId} {
      allow read, write: if request.auth != null && (
        // Owner can do everything
        resource.data.ownerUid == request.auth.uid ||
        // Or user is a member of the workspace
        exists(/databases/$(database)/documents/workspace_members/$(workspaceId + '_' + request.auth.uid))
      );
      allow create: if request.auth != null;
    }
    
    // Workspace members - users can read/write their own memberships
    match /workspace_members/{membershipId} {
      allow read, write: if request.auth != null && (
        // User can read/write their own membership
        resource.data.userId == request.auth.uid ||
        // Or workspace owner can manage memberships
        get(/databases/$(database)/documents/workspaces/$(resource.data.workspaceId)).data.ownerUid == request.auth.uid
      );
      allow create: if request.auth != null;
    }
    
    // Projects - users can read/write projects in workspaces they're members of
    match /projects/{projectId} {
      allow read, write: if request.auth != null && 
        request.auth.uid in get(/databases/$(database)/documents/workspaces/$(resource.data.workspaceId)).data.memberIds;
      allow create: if request.auth != null;
    }
    
    // Tasks - users can read/write tasks in workspaces they're members of
    match /tasks/{taskId} {
      allow read, write: if request.auth != null && 
        request.auth.uid in get(/databases/$(database)/documents/workspaces/$(resource.data.workspaceId)).data.memberIds;
      allow create: if request.auth != null;
    }
    
    // Pomodoro sessions - users can only access their own sessions
    match /pomodoroSessions/{sessionId} {
      allow read, write: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      allow create: if request.auth != null;
    }
    
    // User achievements - users can only read their own achievements
    match /userAchievements/{achievementId} {
      allow read: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      allow write: if false; // Only server can write achievements
    }
    
    // Garden plants - users can read all, write only their own
    match /gardenPlants/{plantId} {
      allow read: if request.auth != null;
      allow write: if false; // Only server can modify plant definitions
    }
    
    // User garden plants - users can only access their own
    match /userGardenPlants/{userPlantId} {
      allow read, write: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      allow create: if request.auth != null;
    }
    
    // Notifications - users can only access their own
    match /notifications/{notificationId} {
      allow read: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      allow write: if false; // Only server can write notifications
    }
    
    // Analytics - users can only read their own data
    match /analytics/{analyticsId} {
      allow read: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      allow write: if false; // Only server can write analytics
    }
    
    // Custom views - users can read/write their own views
    match /customViews/{viewId} {
      allow read, write: if request.auth != null && 
        request.auth.uid == resource.data.createdById;
      allow create: if request.auth != null;
    }
  }
}


--- index.html ---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>ProgressQuest Universal</title>
    <meta name="description" content="Boost your productivity with gamified task management and Pomodoro technique" />
    <meta name="theme-color" content="#3b82f6" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet" />
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>


--- merged_ts_files.txt ---

// ----- FILE: A:\Progects\Progress Quest Universal\progressquest-backend\functions\src\config.ts -----
// --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –§—É–Ω–∫—Ü–∏–π ---
export const functionRegion = "europe-west1"; // –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® –†–ï–ì–ò–û–ù!
export const defaultMemoryOption = "256MiB" as const;

export const commonRuntimeOpts = {
  region: functionRegion,
  memory: defaultMemoryOption,
  // timeoutSeconds: 60,
  // retry: true,
};

// --- –ù–∞–∑–≤–∞–Ω–∏—è Firestore –ö–æ–ª–ª–µ–∫—Ü–∏–π ---
export const USERS_COLLECTION = "users";
export const TEAMS_COLLECTION = "teams";
export const WORKSPACES_COLLECTION = "workspaces";
export const TASKS_COLLECTION = "tasks";
export const DELETED_ENTITIES_COLLECTION = "deletedEntities";
export const SUBTASKS_COLLECTION = "subtasks";
export const COMMENTS_COLLECTION = "comments";

export const POMODORO_SESSIONS_COLLECTION = "pomodoroSessions";

export const GAMIFICATION_PROFILES_COLLECTION = "gamificationProfiles";
export const EARNED_BADGES_SUBCOLLECTION = "earnedBadges";
export const CHALLENGE_PROGRESS_SUBCOLLECTION = "challengeProgress";
export const VIRTUAL_GARDEN_SUBCOLLECTION = "virtualGarden";
export const BADGE_DEFINITIONS_COLLECTION = "badgeDefinitions";
export const STORE_ITEMS_COLLECTION = "storeItems";

export const TASK_STATISTICS_COLLECTION = "taskStatistics";
export const GLOBAL_STATISTICS_COLLECTION = "globalStatistics";
export const GAMIFICATION_HISTORY_COLLECTION = "gamificationHistory";
export const USER_VIEWS_COLLECTION = "userViews";
export const CHALLENGE_DEFINITIONS_COLLECTION = "challengeDefinitions";
// export const REWARD_DEFINITIONS_COLLECTION = "rewardDefinitions";

// --- –ù–∞–∑–≤–∞–Ω–∏—è Pub/Sub –¢–æ–ø–∏–∫–æ–≤ ---
export const USER_EVENTS_TOPIC = "user-events";
export const TEAM_EVENTS_TOPIC = "team-events";
export const WORKSPACE_EVENTS_TOPIC = "workspace-events";
export const TASK_EVENTS_TOPIC = "task-events";
export const POMODORO_EVENTS_TOPIC = "pomodoro-events";
export const GAMIFICATION_EVENTS_TOPIC = "gamification-events";

// --- –ò–º–µ–Ω–∞ –ø–æ–ª–µ–π –¥–ª—è Firestore (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ–ø–µ—á–∞—Ç–æ–∫) ---
// export const FIELD_USER_UID = "uid";
// export const FIELD_TASK_STATUS = "status";

// --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–æ–≤—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π ---
export const DEFAULT_USER_DISPLAY_NAME = "–ù–æ–≤—ã–π –ò—Å–∫–∞—Ç–µ–ª—å";
export const DEFAULT_PERSONAL_WORKSPACE_NAME = "–ú–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ";
export const DEFAULT_POMODORO_FOCUS_MIN = 25;
export const DEFAULT_POMODORO_SHORT_BREAK_MIN = 5;
export const DEFAULT_POMODORO_LONG_BREAK_MIN = 15;
export const DEFAULT_POMODORO_INTERVAL = 4;

// --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏ ---
export const XP_FOR_TASK_COMPLETION = 50;
export const COINS_FOR_TASK_COMPLETION = 10;
export const XP_PER_POMODORO_FOCUS_MINUTE = 1;
// 1 –º–æ–Ω–µ—Ç–∞ –∑–∞ –∫–∞–∂–¥—ã–µ N XP –æ—Ç Pomodoro
export const COINS_PER_XP_BATCH_POMODORO = 5;
export const XP_BATCH_FOR_COIN_POMODORO = 10; // N=10
// –ú–∏–Ω. —Ñ–æ–∫—É—Å –¥–ª—è –Ω–∞–≥—Ä–∞–¥—ã
export const MIN_FOCUS_DURATION_FOR_REWARD_SECONDS = 60;

// --- –î—Ä—É–≥–∏–µ –æ–±—â–∏–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
// export const MAX_TEAM_MEMBERS = 50;
// export const MAX_WORKSPACES_PER_USER = 10;

// --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π ---
// export const EVENT_TYPE_USER_CREATED = "USER_CREATED";
// export const EVENT_TYPE_TASK_COMPLETED = "TASK_COMPLETED";


// ----- FILE: A:\Progects\Progress Quest Universal\progressquest-backend\functions\src\index.ts -----
import {initializeApp} from "firebase-admin/app";
import {setGlobalOptions} from "firebase-functions/v2";
import {commonRuntimeOpts} from "./config";

initializeApp();
setGlobalOptions(commonRuntimeOpts);
export * from "./auth";
export * from "./http";
export * from "./pubsub";

console.log(
  `[Index] Functions initialized with region: ${commonRuntimeOpts.region}`
);


// ----- FILE: A:\Progects\Progress Quest Universal\progressquest-backend\functions\src\auth\index.ts -----
import * as functionsV1 from "firebase-functions/v1";
import {
  getFirestore,
  FieldValue,
  Timestamp,
  Query,
} from "firebase-admin/firestore";
import {PubSub} from "@google-cloud/pubsub";

import {
  USERS_COLLECTION,
  WORKSPACES_COLLECTION,
  GAMIFICATION_PROFILES_COLLECTION,
  GLOBAL_STATISTICS_COLLECTION,
  USER_EVENTS_TOPIC,
  functionRegion,
  TASKS_COLLECTION,
} from "../config";
import {
  UserDocument,
  WorkspaceDocument,
  GamificationProfileDocument,
  GlobalStatisticsDocument,
} from "../types/firestore.types";
import {UserCreatedEventData} from "../types/events.types";

const db = getFirestore();
const pubsub = new PubSub();
const BATCH_SIZE = 500;

/**
 * –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —É–¥–∞–ª—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏–ª–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–∞—á–∫–∞–º–∏.
 * @param {Query} query –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.
 * @param {number} batchSize –†–∞–∑–º–µ—Ä –ø–∞—á–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.
 * @return {Promise<void>}
 */
async function deleteCollection(
  query: Query,
  batchSize: number
): Promise<void> {
  const snapshot = await query.limit(batchSize).get();

  if (snapshot.size === 0) {
    return;
  }

  const batch = db.batch();
  snapshot.docs.forEach((doc) => {
    batch.delete(doc.ref);
  });
  await batch.commit();

  process.nextTick(() => {
    deleteCollection(query, batchSize);
  });
}

export const processNewUser = functionsV1
  .region(functionRegion)
  .auth.user()
  .onCreate(async (user) => {
    const {uid, email, displayName, photoURL, metadata} = user;
    const now = FieldValue.serverTimestamp();

    const creationTime = metadata.creationTime ?
      new Date(metadata.creationTime) :
      new Date();
    const lastSignInTime = metadata.lastSignInTime ?
      new Date(metadata.lastSignInTime) :
      new Date();

    console.log(`[AuthTrigger] Processing new user: ${uid}, Email: ${email}`);

    const userDocRef = db.collection(USERS_COLLECTION).doc(uid);
    const gamificationProfileRef = db
      .collection(GAMIFICATION_PROFILES_COLLECTION)
      .doc(uid);
    const globalStatsRef = db
      .collection(GLOBAL_STATISTICS_COLLECTION)
      .doc(uid);
    const personalWorkspaceRef = db
      .collection(WORKSPACES_COLLECTION)
      .doc();

    const batch = db.batch();

    const newUserDocData: UserDocument = {
      uid,
      email: email || "",
      displayName: displayName || `User-${uid.substring(0, 5)}`,
      avatarUrl: photoURL || null,
      createdAt: Timestamp.fromDate(creationTime),
      lastLoginAt: Timestamp.fromDate(lastSignInTime),
      personalWorkspaceId: personalWorkspaceRef.id,
      activeItems: {
        workspaceId: personalWorkspaceRef.id,
        viewId: null,
      },
      defaultViewId: null,
      appSettings: {
        theme: "SYSTEM",
        dynamicColorEnabled: true,
        notificationsEnabled: true,
        taskNotifications: true,
        pomodoroNotifications: true,
        gamificationNotifications: true,
      },
      pomodoroSettings: {
        focusDurationMinutes: 25,
        shortBreakMinutes: 5,
        longBreakMinutes: 15,
        intervalBeforeLongBreak: 4,
        autoStartFocus: false,
        autoStartBreak: true,
        focusSoundUri: null,
        breakSoundUri: null,
        vibrationEnabled: true,
      },
      teamMemberships: [],
    };
    batch.set(userDocRef, newUserDocData);

    const personalWorkspaceData: Omit<WorkspaceDocument, "id"> = {
      name: "–õ–∏—á–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ",
      description: "–ú–æ–∏ –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–æ–µ–∫—Ç—ã",
      ownerUid: uid,
      isPersonal: true,
      teamId: null,
      createdAt: now,
      updatedAt: now,
      activeApproach: "CALENDAR",
      defaultTags: ["–≤–∞–∂–Ω–æ", "–∏–¥–µ—è"],
      settings: {
        allowMembersToCreateTasks: true,
        taskVisibility: "all_visible",
        pomodoroOverrides: null,
      },
      lastClientSyncTimestamp: null,
      syncStatus: "pending_upload",
    };
    batch.set(personalWorkspaceRef, personalWorkspaceData);

    const gamificationProfileData: GamificationProfileDocument = {
      level: 1,
      experience: 0,
      coins: 50,
      maxExperienceForLevel: 100,
      currentStreak: 0,
      lastClaimedDate: Timestamp.fromDate(new Date(0)),
      maxStreak: 0,
      selectedPlantInstanceId: null,
      lastPomodoroCompletionTime: null,
      lastTaskCompletionTime: null,
    };
    batch.set(gamificationProfileRef, gamificationProfileData);

    const globalStatsData: GlobalStatisticsDocument = {
      userId: uid,
      totalPersonalWorkspacesCreated: 1,
      totalTeamWorkspacesMemberOf: 0,
      totalTasksCreated: 0,
      totalTasksCompleted: 0,
      totalPomodoroFocusMinutes: 0,
      totalTimeSpentMinutesOverall: 0,
      lastActive: now,
      registrationDate: Timestamp.fromDate(creationTime),
    };
    batch.set(globalStatsRef, globalStatsData);

    try {
      await batch.commit();
      console.log(`[AuthTrigger] User documents created for UID: ${uid}`);

      const eventPayload: UserCreatedEventData = {
        userId: uid,
        email: email || undefined,
        displayName: displayName || undefined,
      };
      await pubsub.topic(USER_EVENTS_TOPIC).publishMessage({
        json: {
          eventType: "USER_CREATED",
          eventTimestamp: new Date().toISOString(),
          data: eventPayload,
        },
      });
      console.log(
        `[AuthTrigger] Event USER_CREATED published for UID: ${uid}`
      );
    } catch (error) {
      console.error(
        `[AuthTrigger] Error in onUserCreate for UID: ${uid}`,
        error
      );
    }
  });

export const processUserDeletion = functionsV1
  .region(functionRegion)
  .auth.user()
  .onDelete(async (user) => {
    const {uid} = user;
    console.log(`[AuthTrigger] Deleting data for user UID: ${uid}`);

    const batch = db.batch();

    batch.delete(db.collection(USERS_COLLECTION).doc(uid));
    batch.delete(db
      .collection(GAMIFICATION_PROFILES_COLLECTION)
      .doc(uid));
    batch.delete(db.collection(GLOBAL_STATISTICS_COLLECTION).doc(uid));

    try {
      await batch.commit();
      console.log(`[AuthTrigger] Core user documents for ${uid} deleted.`);
    } catch (error) {
      console.error(
        `[AuthTrigger] Error deleting core documents for UID: ${uid}`,
        error
      );
    }

    const personalWorkspacesQuery = db
      .collection(WORKSPACES_COLLECTION)
      .where("ownerUid", "==", uid)
      .where("isPersonal", "==", true);
    const tasksQuery = db
      .collection(TASKS_COLLECTION)
      .where("creatorUid", "==", uid);

    const fcmTokensQuery = db
      .collection(USERS_COLLECTION)
      .doc(uid)
      .collection("fcmTokens");
    const earnedBadgesQuery = db
      .collection(GAMIFICATION_PROFILES_COLLECTION)
      .doc(uid)
      .collection("earnedBadges");

    try {
      await Promise.all([
        deleteCollection(personalWorkspacesQuery, BATCH_SIZE),
        deleteCollection(tasksQuery, BATCH_SIZE),
        deleteCollection(fcmTokensQuery, BATCH_SIZE),
        deleteCollection(earnedBadgesQuery, BATCH_SIZE),
      ]);
      console.log(
        `[AuthTrigger] All associated data for user ${uid} ` +
        "has been queued for deletion."
      );
    } catch (error) {
      console.error(
        "[AuthTrigger] Critical error during collection deletion " +
        `for UID: ${uid}`,
        error
      );
    }
  });


// ----- FILE: A:\Progects\Progress Quest Universal\progressquest-backend\functions\src\gamification\challengeProcessor.ts -----
import {
  getFirestore,
  FieldValue,
  Transaction,
  Timestamp,
  PartialWithFieldValue,
} from "firebase-admin/firestore";
import * as functions from "firebase-functions";
import {
  CHALLENGE_DEFINITIONS_COLLECTION,
  CHALLENGE_PROGRESS_SUBCOLLECTION,
  GAMIFICATION_PROFILES_COLLECTION,
  EARNED_BADGES_SUBCOLLECTION,
} from "../config";
import {
  ChallengeDefinitionDocument,
  ChallengeProgressDocument,
  ChallengeEventType,
  EarnedBadgeDocument,
} from "../types/firestore.types";

const db = getFirestore();
const logger = functions.logger;

interface UpdateChallengeProgressParams {
  transaction: Transaction;
  userId: string;
  eventType: ChallengeEventType;
  eventValue?: number;
  eventTimestamp: Date;
  eventContext?: Record<string, any>;
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —á–µ–ª–ª–µ–Ω–¥–∂–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–±—ã—Ç–∏—è.
 * @param {UpdateChallengeProgressParams} params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
 */
export async function updateChallengeProgress(
  params: UpdateChallengeProgressParams
): Promise<void> {
  const {transaction, userId, eventType, eventValue = 1} = params;
  logger.debug(
    `[ChallengeProcessor] Updating progress for user ${userId}, ` +
    `event: ${eventType}`
  );

  const personalChallengesQuery = db
    .collection(CHALLENGE_DEFINITIONS_COLLECTION)
    .where("creatorUid", "==", userId)
    .where("type", "==", eventType);
  const systemChallengesQuery = db
    .collection(CHALLENGE_DEFINITIONS_COLLECTION)
    .where("isActiveSystemChallenge", "==", true)
    .where("type", "==", eventType);

  const [personalSnapshot, systemSnapshot] = await Promise.all([
    transaction.get(personalChallengesQuery),
    transaction.get(systemChallengesQuery),
  ]);

  const allRelevantChallenges = [
    ...personalSnapshot.docs,
    ...systemSnapshot.docs,
  ];

  if (allRelevantChallenges.length === 0) {
    logger.debug(
      "[ChallengeProcessor] No active challenges found for event type: " +
      eventType
    );
    return;
  }

  for (const challengeDoc of allRelevantChallenges) {
    const challengeId = challengeDoc.id;
    const challengeData = challengeDoc.data() as ChallengeDefinitionDocument;
    const progressRef = db
      .collection(GAMIFICATION_PROFILES_COLLECTION)
      .doc(userId)
      .collection(CHALLENGE_PROGRESS_SUBCOLLECTION)
      .doc(challengeId);

    const progressDoc = await transaction.get(progressRef);
    let currentProgress = 0;

    if (progressDoc.exists) {
      const progressData = progressDoc.data() as ChallengeProgressDocument;
      if (progressData.isCompleted && challengeData.period === "ONCE") {
        continue; // error: Strings must use doublequote - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ "ONCE"
      }
      currentProgress = (progressData.progress as number) || 0;
    }

    const newProgress = currentProgress + eventValue;
    const isCompletedNow = newProgress >= challengeData.targetValue;

    const progressUpdate: PartialWithFieldValue<ChallengeProgressDocument> = {
      progress: newProgress,
      isCompleted: isCompletedNow,
      lastUpdated: FieldValue.serverTimestamp(),
    };

    if (
      isCompletedNow &&
      (!progressDoc.exists ||
        !(progressDoc.data() as ChallengeProgressDocument).isCompleted)
    ) {
      progressUpdate.completedAt = FieldValue.serverTimestamp();
      logger.info(
        `[ChallengeProcessor] Challenge "${challengeData.name}" completed ` +
        `for user ${userId}. Applying reward...`
      );
      await applyReward(transaction, userId, challengeData);
    }
    transaction.set(progressRef, progressUpdate, {merge: true});
  }
}

/**
 * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —á–µ–ª–ª–µ–Ω–¥–∂.
 * @param {Transaction} transaction - –¢–µ–∫—É—â–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è Firestore.
 * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * @param {ChallengeDefinitionDocument} challenge - –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–µ–ª–ª–µ–Ω–¥–∂–∞.
 */
async function applyReward(
  transaction: Transaction,
  userId: string,
  challenge: ChallengeDefinitionDocument
) {
  const reward = challenge.reward;
  const profileRef = db
    .collection(GAMIFICATION_PROFILES_COLLECTION)
    .doc(userId);

  switch (reward.type) {
  case "XP":
    transaction.update(profileRef, {
      experience: FieldValue.increment(Number(reward.value)),
    });
    break;
  case "COINS":
    transaction.update(profileRef, {
      coins: FieldValue.increment(Number(reward.value)),
    });
    break;
  case "BADGE_ID": {
    const earnedBadgeRef = profileRef
      .collection(EARNED_BADGES_SUBCOLLECTION)
      .doc(reward.value);

    if (!reward.badgeName || !reward.badgeImageUrl) {
      logger.warn(
        "[ChallengeProcessor] Badge reward for challenge " +
        `${challenge.name} is missing denormalized name/imageUrl.`
      );
      break;
    }

    const newEarnedBadge: EarnedBadgeDocument = {
      badgeDefinitionId: reward.value,
      earnedAt: Timestamp.now(),
      name: reward.badgeName,
      imageUrl: reward.badgeImageUrl,
      criteria: challenge.description,
    };
    transaction.set(earnedBadgeRef, newEarnedBadge);
    break;
  }
  case "TEXT":
    // –ù–∏–∫–∞–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    break;
  }
}


// ----- FILE: A:\Progects\Progress Quest Universal\progressquest-backend\functions\src\http\gamification.ts -----
import {
  onCall,
  HttpsError,
  CallableRequest,
} from "firebase-functions/v2/https";
import * as functions from "firebase-functions";
import {getFirestore, Timestamp, FieldValue} from "firebase-admin/firestore";
import {
  commonRuntimeOpts,
  GAMIFICATION_PROFILES_COLLECTION,
  CHALLENGE_PROGRESS_SUBCOLLECTION,
  BADGE_DEFINITIONS_COLLECTION,
  EARNED_BADGES_SUBCOLLECTION,
  VIRTUAL_GARDEN_SUBCOLLECTION,
  STORE_ITEMS_COLLECTION,
  CHALLENGE_DEFINITIONS_COLLECTION,
} from "../config";
import {assertAuthenticated} from "../utils";
import {
  GamificationProfileDocument,
  ChallengeDefinitionDocument,
  BadgeDefinitionDocument,
  EarnedBadgeDocument,
  VirtualPlantDocument,
  StoreItemDocument,
} from "../types/firestore.types";
import {
  GetGamificationProfileResponse,
  GamificationProfileClientDto,
  ClaimDailyRewardResponseDto,
  ChallengeDefinitionClientDto,
  CreateCustomChallengePayload,
  CreateChallengeResponse,
  DeleteChallengePayload,
  SuccessResponse,
  GetBadgesResponse,
  BadgeDefinitionClientDto,
  EarnedBadgeClientDto,
  GetVirtualGardenResponse,
  VirtualPlantClientDto,
  SelectPlantRequestPayload,
  GetStoreItemsResponse,
  StoreItemClientDto,
  PurchaseStoreItemPayload,
  PurchaseStoreItemResponse,
  GetChallengesResponse,
  GetAllBadgeDefinitionsResponseDto,
  RewardClientDto,
  WaterPlantRequestPayload,
  WaterPlantResponseDto,
} from "../types/api.types";

const db = getFirestore();
const logger = functions.logger;

// --- –ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• ---

export const getGamificationProfile = onCall(
  commonRuntimeOpts,
  async (
    request: CallableRequest // warning: no-unused-vars - –æ—Å—Ç–∞–≤–ª—è–µ–º
  ): Promise<GetGamificationProfileResponse> => {
    const uid = assertAuthenticated(request.auth);
    const profileRef = db.collection(GAMIFICATION_PROFILES_COLLECTION).doc(uid);

    try {
      const profileDoc = await profileRef.get();
      if (!profileDoc.exists) {
        logger.error(
          `[Gamification] Profile not found for user: ${uid}. ` +
          "Possible onUserCreate trigger issue."
        );
        throw new HttpsError(
          "not-found",
          "–ü—Ä–æ—Ñ–∏–ª—å –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω."
        );
      }
      const profileData = profileDoc.data() as GamificationProfileDocument;
      const clientProfile: GamificationProfileClientDto = {
        level: profileData.level,
        experience: profileData.experience,
        coins: profileData.coins,
        maxExperienceForLevel: profileData.maxExperienceForLevel,
        currentStreak: profileData.currentStreak,
        lastClaimedDate: (
          profileData.lastClaimedDate as Timestamp
        ).toDate().toISOString(),
        maxStreak: profileData.maxStreak,
        selectedPlantId: profileData.selectedPlantInstanceId,
        lastPomodoroCompletionTime: profileData.lastPomodoroCompletionTime ?
          (
            profileData.lastPomodoroCompletionTime as Timestamp
          ).toDate().toISOString() :
          null,
        lastTaskCompletionTime: profileData.lastTaskCompletionTime ?
          (
            profileData.lastTaskCompletionTime as Timestamp
          ).toDate().toISOString() :
          null,
      };
      return {profile: clientProfile};
    } catch (error: unknown) {
      logger.error(
        `[Gamification] Error fetching profile for user ${uid}:`, error
      );
      if (error instanceof HttpsError) {
        throw error;
      }
      throw new HttpsError(
        "internal", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏."
      );
    }
  }
);

export const getAllBadgeDefinitions = onCall(
  commonRuntimeOpts,
  async (
    request: CallableRequest
  ): Promise<GetAllBadgeDefinitionsResponseDto> => {
    assertAuthenticated(request.auth);
    try {
      const snapshot = await db.collection(BADGE_DEFINITIONS_COLLECTION).get();
      const badges: BadgeDefinitionClientDto[] = snapshot.docs.map((doc) => {
        const data = doc.data() as BadgeDefinitionDocument;
        return {
          id: doc.id,
          name: data.name,
          description: data.description,
          imageUrl: data.imageUrl,
          criteria: data.criteriaText,
          rewardXp: data.rewardXp,
          rewardCoins: data.rewardCoins,
          isHidden: data.isHidden,
        };
      });
      return {badges: badges};
    } catch (error) {
      logger.error("[Gamification] Error fetching all badge def:", error);
      throw new HttpsError("internal", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫.");
    }
  }
);

export const getEarnedBadges = onCall(
  commonRuntimeOpts,
  async (request: CallableRequest): Promise<GetBadgesResponse> => {
    const uid = assertAuthenticated(request.auth);
    try {
      const badgesRef = db
        .collection(GAMIFICATION_PROFILES_COLLECTION)
        .doc(uid)
        .collection(EARNED_BADGES_SUBCOLLECTION);
      const snapshot = await badgesRef.orderBy("earnedAt", "desc").get();
      const earnedBadges: EarnedBadgeClientDto[] = snapshot.docs.map((doc) => {
        const data = doc.data() as EarnedBadgeDocument;
        return {
          badgeDefinitionId: doc.id,
          earnedAt: (data.earnedAt as Timestamp).toDate().toISOString(),
          name: data.name,
          imageUrl: data.imageUrl,
          criteria: data.criteria,
        };
      });
      return {badges: earnedBadges};
    } catch (error) {
      logger.error(
        `[Gamification] Error fetching earned badges for user ${uid}:`,
        error
      );
      throw new HttpsError(
        "internal", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è."
      );
    }
  }
);

export const getActiveChallenges = onCall(
  commonRuntimeOpts,
  async (
    request: CallableRequest // warning: no-unused-vars - –æ—Å—Ç–∞–≤–ª—è–µ–º
  ): Promise<GetChallengesResponse> => {
    logger.warn(
      "[Gamification] getActiveChallenges is not fully implemented " +
      "and returns a placeholder."
    );
    return {challenges: []};
  }
);

export const getVirtualGarden = onCall(
  commonRuntimeOpts,
  async (request: CallableRequest): Promise<GetVirtualGardenResponse> => {
    const uid = assertAuthenticated(request.auth);
    try {
      const [profileDoc, gardenSnapshot] = await Promise.all([
        db.collection(GAMIFICATION_PROFILES_COLLECTION).doc(uid).get(),
        db
          .collection(GAMIFICATION_PROFILES_COLLECTION)
          .doc(uid)
          .collection(VIRTUAL_GARDEN_SUBCOLLECTION)
          .get(),
      ]);

      const selectedPlantId =
        profileDoc.data()?.selectedPlantInstanceId || null;
      const plants: VirtualPlantClientDto[] = gardenSnapshot.docs.map((doc) => {
        const data = doc.data() as VirtualPlantDocument;
        return {
          id: doc.id,
          plantType: data.plantType,
          growthStage: data.growthStage,
          growthPoints: data.growthPoints,
          lastWateredAt: (
            data.lastWateredAt as Timestamp
          ).toDate().toISOString(),
          createdAt: (data.createdAt as Timestamp).toDate().toISOString(),
        };
      });
      return {plants: plants, selectedPlantId: selectedPlantId};
    } catch (error) {
      logger.error(
        `[Gamification] Error fetching virtual garden for user ${uid}:`, error
      );
      throw new HttpsError("internal", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∞–¥.");
    }
  }
);

export const getStoreItems = onCall(
  commonRuntimeOpts,
  async (request: CallableRequest): Promise<GetStoreItemsResponse> => {
    assertAuthenticated(request.auth);
    try {
      const snapshot = await db
        .collection(STORE_ITEMS_COLLECTION)
        .where("isAvailable", "==", true)
        .orderBy("category")
        .orderBy("costInCoins")
        .get();

      const items: StoreItemClientDto[] = snapshot.docs.map((doc) => {
        const data = doc.data() as StoreItemDocument;
        return {
          id: doc.id,
          name: data.name,
          description: data.description,
          costInCoins: data.costInCoins,
          category: data.category,
          itemValue: data.itemValue,
          imageUrl: data.imageUrl,
          isAvailable: data.isAvailable,
        };
      });

      return {items};
    } catch (error) {
      logger.error("[Gamification] Error fetching store items:", error);
      throw new HttpsError("internal", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã.");
    }
  }
);

// --- –î–ï–ô–°–¢–í–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ---

export const claimDailyReward = onCall(
  commonRuntimeOpts,
  async (request: CallableRequest): Promise<ClaimDailyRewardResponseDto> => {
    const uid = assertAuthenticated(request.auth);
    const profileRef = db.collection(GAMIFICATION_PROFILES_COLLECTION).doc(uid);

    try {
      let response: ClaimDailyRewardResponseDto | null = null;
      await db.runTransaction(async (t) => {
        const profileDoc = await t.get(profileRef);
        if (!profileDoc.exists) {
          throw new HttpsError("not-found", "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        }

        const profileData = profileDoc.data() as GamificationProfileDocument;
        const today = new Date();
        today.setUTCHours(0, 0, 0, 0);

        const lastClaimedDate = (
          profileData.lastClaimedDate as Timestamp
        ).toDate();
        lastClaimedDate.setUTCHours(0, 0, 0, 0);

        if (today.getTime() <= lastClaimedDate.getTime()) {
          throw new HttpsError(
            "failed-precondition",
            "–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–∞ —Å–µ–≥–æ–¥–Ω—è." // max-len: 284 -> OK
          );
        }

        const yesterday = new Date(today);
        yesterday.setDate(yesterday.getDate() - 1);
        const newStreak =
          lastClaimedDate.getTime() === yesterday.getTime() ?
            profileData.currentStreak + 1 :
            1;

        // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã –¥–ª—è `newStreak` –¥–Ω—è
        // –î–ª—è –ø—Ä–∏–º–µ—Ä–∞, –∑–∞–≥–ª—É—à–∫–∞:
        const rewardValue = 10 + newStreak * 2;
        const reward: RewardClientDto = {
          type: "COINS",
          value: rewardValue.toString(),
        };
        const coinsGained = Number(reward.value);

        t.update(profileRef, {
          currentStreak: newStreak,
          maxStreak: Math.max(profileData.maxStreak, newStreak),
          lastClaimedDate: Timestamp.fromDate(today),
          coins: FieldValue.increment(coinsGained),
        });

        response = {
          success: true,
          message: `–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ ${newStreak}-–π –¥–µ–Ω—å –ø–æ–ª—É—á–µ–Ω–∞!`,
          rewardReceived: reward,
          newStreak: newStreak,
          newXp: 0, // –í —ç—Ç–æ–º –ø—Ä–∏–º–µ—Ä–µ XP –Ω–µ –¥–∞–µ—Ç—Å—è
          newCoins: coinsGained,
        };
      });

      if (response === null) {
        throw new HttpsError(
          "internal",
          "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç." // max-len: 288 -> OK
        );
      }
      return response;
    } catch (error: unknown) {
      logger.error(
        `[Gamification] Error claiming daily reward for user ${uid}:`,
        error
      );
      if (error instanceof HttpsError) {
        throw error;
      }
      throw new HttpsError(
        "internal",
        "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É." // max-len: 293 -> OK
      );
    }
  }
);


export const selectPlantInGarden = onCall(
  commonRuntimeOpts,
  async (
    request: CallableRequest<SelectPlantRequestPayload>
  ): Promise<SuccessResponse> => {
    const uid = assertAuthenticated(request.auth);
    const {plantInstanceId} = request.data;
    if (!plantInstanceId) {
      throw new HttpsError(
        "invalid-argument",
        "–ù–µ–æ–±—Ö–æ–¥–∏–º ID —Ä–∞—Å—Ç–µ–Ω–∏—è." // max-len: 326 -> OK
      );
    }

    try {
      const profileRef = db
        .collection(GAMIFICATION_PROFILES_COLLECTION)
        .doc(uid);
      await profileRef.update({selectedPlantInstanceId: plantInstanceId});
      return {success: true};
    } catch (error) {
      logger.error(
        `[Gamification] Error selecting plant ${plantInstanceId} ` +
        `for user ${uid}:`,
        error
      );
      throw new HttpsError(
        "internal",
        "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ." // max-len: 365 -> OK
      );
    }
  }
);

export const waterPlantInGarden = onCall(
  commonRuntimeOpts,
  async (
    request: CallableRequest<WaterPlantRequestPayload>
  ): Promise<WaterPlantResponseDto> => {
    const uid = assertAuthenticated(request.auth);
    // const {plantInstanceId} = request.data; // –ü–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è

    const gardenRef = db
      .collection(GAMIFICATION_PROFILES_COLLECTION)
      .doc(uid)
      .collection(VIRTUAL_GARDEN_SUBCOLLECTION);
    const now = Timestamp.now();

    try {
      const allPlantsSnapshot = await gardenRef.get();
      if (allPlantsSnapshot.empty) {
        throw new HttpsError(
          "not-found",
          "–£ –≤–∞—Å –Ω–µ—Ç —Ä–∞—Å—Ç–µ–Ω–∏–π –¥–ª—è –ø–æ–ª–∏–≤–∞."
        );
      }

      const batch = db.batch();
      const updatedPlantsDto: VirtualPlantClientDto[] = [];

      allPlantsSnapshot.forEach((doc) => {
        batch.update(doc.ref, {lastWateredAt: now});
        const data = doc.data() as VirtualPlantDocument;
        updatedPlantsDto.push({
          id: doc.id,
          ...data,
          lastWateredAt: now.toDate().toISOString(),
          createdAt: (data.createdAt as Timestamp).toDate().toISOString(),
        });
      });

      await batch.commit();

      logger.info(`[Gamification] Watered all plants for user ${uid}.`);
      return {
        success: true,
        message: "–í—Å–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –ø–æ–ª–∏—Ç—ã!",
        updatedPlants: updatedPlantsDto,
      };
    } catch (error) {
      logger.error(
        `[Gamification] Error watering plants for user ${uid}:`,
        error
      );
      if (error instanceof HttpsError) {
        throw error;
      }
      throw new HttpsError(
        "internal",
        "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏—è."
      );
    }
  }
);

export const purchaseStoreItem = onCall(
  commonRuntimeOpts,
  async (
    request: CallableRequest<PurchaseStoreItemPayload>
  ): Promise<PurchaseStoreItemResponse> => {
    const uid = assertAuthenticated(request.auth);
    const {itemId} = request.data;
    if (!itemId) {
      throw new HttpsError(
        "invalid-argument",
        "–ù–µ–æ–±—Ö–æ–¥–∏–º ID –ø—Ä–µ–¥–º–µ—Ç–∞."
      );
    }

    const profileRef = db.collection(GAMIFICATION_PROFILES_COLLECTION).doc(uid);
    const itemRef = db.collection(STORE_ITEMS_COLLECTION).doc(itemId);

    try {
      let purchaseResponse: PurchaseStoreItemResponse | null = null;
      await db.runTransaction(async (t) => {
        const [profileDoc, itemDoc] = await t.getAll(profileRef, itemRef);
        if (!profileDoc.exists) {
          throw new HttpsError("not-found", "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        }
        if (!itemDoc.exists) {
          throw new HttpsError("not-found", "–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        }

        const profile = profileDoc.data() as GamificationProfileDocument;
        const item = itemDoc.data() as StoreItemDocument;
        if (profile.coins < item.costInCoins) {
          throw new HttpsError(
            "failed-precondition",
            "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç." // max-len: 456 -> OK
          );
        }

        t.update(profileRef, {
          coins: FieldValue.increment(-item.costInCoins),
        });

        if (item.category === "PLANT_SEED") {
          const newPlantRef = profileRef
            .collection(VIRTUAL_GARDEN_SUBCOLLECTION)
            .doc();
          const newPlant: VirtualPlantDocument = {
            plantType: item.itemValue,
            growthStage: 0,
            growthPoints: 0,
            createdAt: FieldValue.serverTimestamp(),
            lastWateredAt: Timestamp.fromDate(new Date(0)),
          };
          t.set(newPlantRef, newPlant);
        }

        const remainingCoins = profile.coins - item.costInCoins;
        const itemDto: StoreItemClientDto = {id: itemDoc.id, ...item};

        purchaseResponse = {
          success: true,
          message: `–ü—Ä–µ–¥–º–µ—Ç "${item.name}" —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω!`,
          remainingCoins: remainingCoins,
          itemReceived: itemDto,
        };
      });

      if (!purchaseResponse) {
        throw new HttpsError("internal", "–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.");
      }
      return purchaseResponse;
    } catch (error) {
      logger.error(
        `[Gamification] Error purchasing item ${itemId} for user ${uid}:`,
        error
      );
      if (error instanceof HttpsError) {
        throw error;
      }
      throw new HttpsError(
        "internal",
        "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–æ–∫—É–ø–∫—É."
      );
    }
  }
);

// --- –£–ü–†–ê–í–õ–ï–ù–ò–ï –ß–ï–õ–õ–ï–ù–î–ñ–ê–ú–ò ---

export const createCustomChallenge = onCall(
  commonRuntimeOpts,
  async (
    request: CallableRequest<CreateCustomChallengePayload>
  ): Promise<CreateChallengeResponse> => {
    const uid = assertAuthenticated(request.auth);
    const data = request.data;
    if (
      !data.name ||
      !data.type ||
      !data.period ||
      !data.reward ||
      !data.targetValue
    ) {
      throw new HttpsError(
        "invalid-argument",
        "–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —á–µ–ª–ª–µ–Ω–¥–∂–∞ –±—ã–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã."
      );
    }

    const newChallengeRef = db
      .collection(CHALLENGE_DEFINITIONS_COLLECTION)
      .doc();
    const newChallengeData: Omit<ChallengeDefinitionDocument, "id"> = {
      name: data.name,
      description: data.description,
      creatorUid: uid,
      scope: "personal",
      targetEntityId: null,
      isPublicTemplate: false,
      reward: data.reward,
      period: data.period,
      type: data.type,
      targetValue: data.targetValue,
      conditionJson: data.conditionJson || null,
      createdAt: FieldValue.serverTimestamp(),
      updatedAt: FieldValue.serverTimestamp(),
    };

    try {
      await newChallengeRef.set(newChallengeData);
      const createdDoc = await newChallengeRef.get();
      const createdData = createdDoc.data() as ChallengeDefinitionDocument;
      const responseChallenge: ChallengeDefinitionClientDto = {
        ...createdData,
        id: createdDoc.id,
        createdAt: (
          createdData.createdAt as Timestamp
        ).toDate().toISOString(),
        updatedAt: (
          createdData.updatedAt as Timestamp
        ).toDate().toISOString(),
      };
      logger.log(
        `[Gamification] Custom challenge '${data.name}' created ` +
        `by user ${uid}.`
      );
      return {challenge: responseChallenge};
    } catch (error) {
      logger.error(
        `[Gamification] Error creating custom challenge for user ${uid}:`,
        error
      );
      throw new HttpsError("internal", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏—Å–ø—ã—Ç–∞–Ω–∏–µ.");
    }
  }
);

export const deleteCustomChallenge = onCall(
  commonRuntimeOpts,
  async (
    request: CallableRequest<DeleteChallengePayload>
  ): Promise<SuccessResponse> => {
    const uid = assertAuthenticated(request.auth);
    const {challengeDefId} = request.data;
    if (!challengeDefId) {
      throw new HttpsError(
        "invalid-argument",
        "–ù–µ–æ–±—Ö–æ–¥–∏–º ID –∏—Å–ø—ã—Ç–∞–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."
      );
    }

    const challengeRef = db
      .collection(CHALLENGE_DEFINITIONS_COLLECTION)
      .doc(challengeDefId);
    const progressRef = db
      .collection(GAMIFICATION_PROFILES_COLLECTION)
      .doc(uid)
      .collection(CHALLENGE_PROGRESS_SUBCOLLECTION)
      .doc(challengeDefId);

    try {
      await db.runTransaction(async (t) => {
        const challengeDoc = await t.get(challengeRef);
        if (!challengeDoc.exists) {
          throw new HttpsError("not-found", "–ò—Å–ø—ã—Ç–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
        }
        const challengeData =
          challengeDoc.data() as ChallengeDefinitionDocument;
        if (challengeData.creatorUid !== uid) {
          throw new HttpsError(
            "permission-denied",
            "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ."
          );
        }
        t.delete(challengeRef);
        t.delete(progressRef);
      });

      logger.log(
        `[Gamification] Custom challenge ${challengeDefId} deleted ` +
        `by user ${uid}.`
      );
      return {success: true};
    } catch (error) {
      logger.error(
        `[Gamification] Error deleting custom challenge ${challengeDefId} ` +
        `for user ${uid}:`,
        error
      );
      if (error instanceof HttpsError) {
        throw error;
      }
      throw new HttpsError("internal", "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏—Å–ø—ã—Ç–∞–Ω–∏–µ.");
    }
  }
);


// ----- FILE: A:\Progects\Progress Quest Universal\progressquest-backend\functions\src\http\index.ts -----
export * from "./users";
export * from "./workspaces";
export * from "./tasks";
export * from "./pomodoro";
export * from "./gamification";
// export * from "./teams";
// export * from "./views";
// export * from "./gamification";


// ----- FILE: A:\Progects\Progress Quest Universal\progressquest-backend\functions\src\http\pomodoro.ts -----
import {
  HttpsError,
  onCall,
  CallableRequest,
} from "firebase-functions/v2/https";
import {
  getFirestore,
  FieldValue,
  Timestamp,
  PartialWithFieldValue,
} from "firebase-admin/firestore";
import {
  commonRuntimeOpts,
  POMODORO_SESSIONS_COLLECTION,
  POMODORO_EVENTS_TOPIC,
} from "../config";
import {assertAuthenticated, assertPersonalWorkspaceOwner} from "../utils";
import {
  PomodoroSessionDocument,
} from "../types/firestore.types";
import {
  StartPomodoroPhasePayload,
  StartPomodoroPhaseResponse,
  CompletePomodoroPhasePayload,
  SuccessResponse,
} from "../types/api.types";
import {
  PomodoroPhaseStartedEventData,
  PomodoroPhaseCompletedEventData,
} from "../types/events.types";
import {PubSub} from "@google-cloud/pubsub";

const db = getFirestore();
const pubsub = new PubSub();

export const startPomodoroPhase = onCall(
  commonRuntimeOpts,
  async (request: CallableRequest<StartPomodoroPhasePayload>) => {
    const uid = assertAuthenticated(request.auth);
    const data = request.data;

    if (
      !data.taskId ||
      !data.workspaceId ||
      !data.sessionType ||
      data.plannedDurationSeconds == null ||
      data.plannedDurationSeconds <= 0
    ) {
      throw new HttpsError(
        "invalid-argument",
        "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ —Ñ–∞–∑—ã " +
          "Pomodoro."
      );
    }

    try {
      await assertPersonalWorkspaceOwner(data.workspaceId, uid);
    } catch (e: any) {
      if (e instanceof HttpsError) {
        throw e;
      }
      console.error(
        "[Pomo] Permission check failed for startPomodoroPhase for user " +
          `${uid}, ws ${data.workspaceId}`,
        e
      );
      throw new HttpsError("permission-denied", "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.");
    }

    const now = FieldValue.serverTimestamp();
    const newSessionData: Omit<PomodoroSessionDocument, "id" | "updatedAt"> = {
      userId: uid,
      taskId: data.taskId,
      workspaceId: data.workspaceId,
      sessionType: data.sessionType,
      plannedDurationSeconds: data.plannedDurationSeconds,
      phaseNumberInCycle: data.phaseNumberInCycle || 0,
      totalFocusSessionIndex: data.totalFocusSessionIndex || 0,
      startTime: now,
      actualDurationSeconds: 0,
      interruptions: 0,
      completed: false,
    };

    try {
      const sessionRef = await db
        .collection(POMODORO_SESSIONS_COLLECTION)
        .add(newSessionData);

      const eventPayload: PomodoroPhaseStartedEventData = {
        sessionId: sessionRef.id,
        userId: uid,
        taskId: data.taskId,
        workspaceId: data.workspaceId,
        phaseType: data.sessionType,
        plannedDurationSeconds: data.plannedDurationSeconds,
        phaseNumberInCycle: newSessionData.phaseNumberInCycle,
        totalFocusSessionIndex: newSessionData.totalFocusSessionIndex,
        startTime: new Date().toISOString(),
      };
      await pubsub.topic(POMODORO_EVENTS_TOPIC).publishMessage({
        json: {
          eventType: "POMODORO_PHASE_STARTED",
          data: eventPayload,
          eventTimestamp: new Date().toISOString(),
        },
      });
      // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ max-len
      console.log(`[Pomo] Started Pomodoro phase, ID: ${sessionRef.id}`);
      return {sessionId: sessionRef.id} as StartPomodoroPhaseResponse;
    } catch (e: any) {
      console.error(`[Pomo] Error starting pomodoro phase for user ${uid}:`, e);
      throw new HttpsError(
        "internal",
        "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å Pomodoro —Ñ–∞–∑—É.",
        String(e?.message)
      );
    }
  }
);

export const completePomodoroPhase = onCall(
  commonRuntimeOpts,
  async (request: CallableRequest<CompletePomodoroPhasePayload>) => {
    const uid = assertAuthenticated(request.auth);
    const data = request.data;

    if (
      !data.sessionId ||
      data.actualDurationSeconds == null ||
      data.interruptions == null ||
      data.completed == null
    ) {
      throw new HttpsError(
        "invalid-argument",
        "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ñ–∞–∑—ã Pomodoro."
      );
    }

    const sessionRef = db
      .collection(POMODORO_SESSIONS_COLLECTION)
      .doc(data.sessionId);
    const now = FieldValue.serverTimestamp();

    try {
      let phaseDataForEvent: PomodoroPhaseCompletedEventData | null = null;

      await db.runTransaction(async (t) => {
        const sessionDoc = await t.get(sessionRef);
        if (!sessionDoc.exists) {
          throw new HttpsError("not-found", "–°–µ—Å—Å–∏—è Pomodoro –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
        }
        const sessionData = sessionDoc.data() as PomodoroSessionDocument;
        if (sessionData.userId !== uid) {
          throw new HttpsError(
            "permission-denied",
            "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —ç—Ç—É —Å–µ—Å—Å–∏—é Pomodoro."
          );
        }
        if (sessionData.completed) {
          console.warn(
            `[Pomo] Session ${data.sessionId} already marked as completed. ` +
            "Skipping update, but will re-publish event."
          );
        }

        const updatePayload: PartialWithFieldValue<PomodoroSessionDocument> = {
          actualDurationSeconds: data.actualDurationSeconds,
          interruptions: data.interruptions,
          completed: data.completed,
          updatedAt: now,
        };
        t.update(sessionRef, updatePayload);

        phaseDataForEvent = {
          sessionId: data.sessionId,
          userId: uid,
          taskId: sessionData.taskId,
          workspaceId: sessionData.workspaceId,
          phaseType: sessionData.sessionType,
          plannedDurationSeconds: sessionData.plannedDurationSeconds,
          actualDurationSeconds: data.actualDurationSeconds,
          interruptions: data.interruptions,
          completed: data.completed,
          phaseStartTime:
            (sessionData.startTime as Timestamp).toDate().toISOString(),
          completionTime: new Date().toISOString(),
        };
      });

      if (phaseDataForEvent) {
        await pubsub.topic(POMODORO_EVENTS_TOPIC).publishMessage({
          json: {
            eventType: "POMODORO_PHASE_COMPLETED",
            data: phaseDataForEvent,
            eventTimestamp: new Date().toISOString(),
          },
        });
        console.log(
          `[Pomo] Pomodoro phase ${data.sessionId} processed. Event published.`
        );
      } else {
        console.error(
          "[Pomo] phaseDataForEvent was null after transaction for session " +
            `${data.sessionId}.`
        );
      }
      return {
        success: true,
        message: "Pomodoro —Ñ–∞–∑–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.",
      } as SuccessResponse;
    } catch (e: any) {
      console.error(
        `[Pomo] Error completing pomodoro phase ${data.sessionId}:`,
        e
      );
      if (e instanceof HttpsError) {
        throw e;
      }
      throw new HttpsError(
        "internal",
        "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å Pomodoro —Ñ–∞–∑—É.",
        String(e?.message)
      );
    }
  }
);


// ----- FILE: A:\Progects\Progress Quest Universal\progressquest-backend\functions\src\http\statistics.ts -----
import {
  HttpsError,
  onCall,
  CallableRequest,
} from "firebase-functions/v2/https";
import {getFirestore, Timestamp} from "firebase-admin/firestore";
import * as functions from "firebase-functions";
import {
  commonRuntimeOpts,
  GLOBAL_STATISTICS_COLLECTION,
  TASK_STATISTICS_COLLECTION,
  GAMIFICATION_HISTORY_COLLECTION,
} from "../config";
import {assertAuthenticated} from "../utils";
import {
  GlobalStatisticsDocument,
  TaskStatisticsDocument,
  GamificationHistoryEntryDocument,
} from "../types/firestore.types";
import {
  GetGlobalStatisticsResponse,
  GetTaskStatisticsResponse,
  GetGamificationHistoryPayload,
  GetGamificationHistoryResponse,
  GamificationHistoryEntryClientDto,
  GetTaskStatisticsPayload,
  TaskStatisticsClientDto,
  StatsPeriodSummaryClientDto,
  StatsTrendRequestPayload,
} from "../types/api.types";

const db = getFirestore();
const logger = functions.logger;

export const getGlobalStatistics = onCall(
  commonRuntimeOpts,
  async (request: CallableRequest): Promise<GetGlobalStatisticsResponse> => {
    const uid = assertAuthenticated(request.auth);
    try {
      const doc = await db
        .collection(GLOBAL_STATISTICS_COLLECTION)
        .doc(uid)
        .get();
      if (!doc.exists) {
        throw new HttpsError("not-found", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
      }
      const data = doc.data() as GlobalStatisticsDocument;
      return {
        statistics: {
          ...data,
          lastActive: (
            data.lastActive as Timestamp
          ).toDate().toISOString(),
          registrationDate: (
            data.registrationDate as Timestamp
          ).toDate().toISOString(),
        },
      };
    } catch (error) {
      logger.error(
        `[Stats] Error fetching global stats for ${uid}:`,
        error
      );
      if (error instanceof HttpsError) {
        throw error;
      }
      throw new HttpsError(
        "internal",
        "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."
      );
    }
  }
);

export const getTaskStatistics = onCall(
  commonRuntimeOpts,
  async (
    request: CallableRequest<GetTaskStatisticsPayload>
  ): Promise<GetTaskStatisticsResponse> => {
    assertAuthenticated(request.auth);
    const {taskId} = request.data;
    if (!taskId) {
      throw new HttpsError("invalid-argument", "–ù–µ–æ–±—Ö–æ–¥–∏–º ID –∑–∞–¥–∞—á–∏.");
    }

    try {
      const doc = await db
        .collection(TASK_STATISTICS_COLLECTION)
        .doc(taskId)
        .get();
      if (!doc.exists) {
        throw new HttpsError(
          "not-found",
          "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
        );
      }

      const data = doc.data() as TaskStatisticsDocument;
      const responseDto: TaskStatisticsClientDto = {
        completionTime: data.completionTime ?
          (data.completionTime as Timestamp).toDate().toISOString() :
          null,
        timeSpentSeconds: data.timeSpentSeconds,
        totalPomodoroFocusSeconds: data.totalPomodoroFocusSeconds,
        completedPomodoroFocusSessions:
          data.completedPomodoroFocusSessions,
        totalPomodoroInterrupts: data.totalPomodoroInterrupts,
        wasCompletedOnce: data.wasCompletedOnce,
        firstCompletionTime: data.firstCompletionTime ?
          (
            data.firstCompletionTime as Timestamp
          ).toDate().toISOString() :
          null,
        updatedAt: (data.updatedAt as Timestamp).toDate().toISOString(),
      };
      return {statistics: responseDto};
    } catch (error) {
      logger.error(
        `[Stats] Error fetching task stats for ${taskId}:`,
        error
      );
      throw new HttpsError(
        "internal",
        "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–¥–∞—á–∏."
      );
    }
  }
);

export const getGamificationHistory = onCall(
  commonRuntimeOpts,
  async (
    request: CallableRequest<GetGamificationHistoryPayload>
  ): Promise<GetGamificationHistoryResponse> => {
    const uid = assertAuthenticated(request.auth);
    const {limit = 20, startAfterEntryId} = request.data;

    try {
      let query = db
        .collection(GAMIFICATION_HISTORY_COLLECTION)
        .where("userId", "==", uid)
        .orderBy("timestamp", "desc")
        .limit(limit);

      if (startAfterEntryId) {
        const lastDoc = await db
          .collection(GAMIFICATION_HISTORY_COLLECTION)
          .doc(startAfterEntryId)
          .get();
        if (lastDoc.exists) {
          query = query.startAfter(lastDoc);
        }
      }

      const snapshot = await query.get();
      const history: GamificationHistoryEntryClientDto[] =
        snapshot.docs.map((doc) => {
          const data = doc.data() as GamificationHistoryEntryDocument;
          return {
            id: doc.id,
            timestamp: (
              data.timestamp as Timestamp
            ).toDate().toISOString(),
            eventType: data.eventType,
            xpChange: data.xpChange,
            coinsChange: data.coinsChange,
            relatedEntityCloudId: data.relatedEntityId,
            relatedEntityType: data.relatedEntityType,
            description: data.description,
          };
        });

      const lastVisibleDoc = snapshot.docs[snapshot.docs.length - 1];
      const nextPageToken = lastVisibleDoc ?
        lastVisibleDoc.id :
        null;

      return {history, nextPageToken};
    } catch (error) {
      logger.error(
        `[Stats] Error fetching gamification history for ${uid}:`,
        error
      );
      throw new HttpsError(
        "internal",
        "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏."
      );
    }
  }
);

export const getStatsPeriodSummary = onCall(
  commonRuntimeOpts,
  async (
    request: CallableRequest<StatsTrendRequestPayload>
  ): Promise<StatsPeriodSummaryClientDto> => {
    assertAuthenticated(request.auth);
    // –≠—Ç–æ —Å–ª–æ–∂–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Ç—Ä–µ–±—É–µ—Ç –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö.
    // –î–ª—è MVP –æ–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–≥–ª—É—à–∫—É.
    logger.warn(
      "[Stats] getStatsPeriodSummary is a placeholder and not implemented."
    );
    return {
      startDate: request.data.startDate,
      endDate: request.data.endDate,
    };
  }
);


// ----- FILE: A:\Progects\Progress Quest Universal\progressquest-backend\functions\src\http\tasks.ts -----
import {
  HttpsError,
  onCall,
  CallableRequest,
} from "firebase-functions/v2/https";
import {
  getFirestore,
  FieldValue,
  Timestamp,
  Query,
  PartialWithFieldValue,
} from "firebase-admin/firestore";
import {
  commonRuntimeOpts,
  TASKS_COLLECTION,
  GLOBAL_STATISTICS_COLLECTION,
  TASK_EVENTS_TOPIC,
  USERS_COLLECTION,
  DELETED_ENTITIES_COLLECTION,
  SUBTASKS_COLLECTION,
} from "../config";
import {assertAuthenticated, assertPersonalWorkspaceOwner} from "../utils";
import {
  SubtaskDocument,
  TaskDocument,
  TaskStatusType,
  UserViewDocument,
} from "../types/firestore.types";
import {
  CreateTaskPayload,
  TaskClientDto,
  GetTasksPayload,
  GetTasksResponse,
  GetTaskDetailsPayload,
  GetTaskDetailsResponse,
  UpdateTaskPayload,
  UpdateTaskResponse,
  DeleteTaskPayload,
  SuccessResponse,
  UpdateTaskStatusPayload,
  CreateTaskResponse,
  DateRangeFilterClientDto,
  ViewFiltersClientDto,
  CreateSubtaskPayload,
  SubtaskClientDto,
  GetTaskChangesPayload,
  GetTaskChangesResponse,
  DeleteSubtaskPayload,
} from "../types/api.types";
import {
  TaskCreatedEventData,
  TaskStatusUpdatedEventData,
} from "../types/events.types";
import {PubSub} from "@google-cloud/pubsub";

const db = getFirestore();
const pubsub = new PubSub();

export const createTask = onCall(
  commonRuntimeOpts,
  async (request: CallableRequest<CreateTaskPayload>) => {
    const uid = assertAuthenticated(request.auth);
    const data = request.data;

    if (!data.title || !data.workspaceId) {
      throw new HttpsError(
        "invalid-argument",
        "Title & WorkspaceId required."
      );
    }
    await assertPersonalWorkspaceOwner(data.workspaceId, uid);

    const now = FieldValue.serverTimestamp();
    const newTaskRef = db.collection(TASKS_COLLECTION).doc();

    const newTaskData: Omit<TaskDocument, "id"> = {
      title: data.title.trim(),
      description: data.description?.trim() || null,
      status: "TODO",
      priority: data.priority || "MEDIUM",
      dueDate: data.dueDate ?
        Timestamp.fromDate(new Date(data.dueDate)) :
        null,
      createdAt: now,
      updatedAt: now,
      completedAt: null,
      creatorUid: uid,
      assigneeUid: uid,
      workspaceId: data.workspaceId,
      tags: data.tags || [],
      pomodoroEstimatedCycles: null,
      pomodoroEstimatedMinutes: data.pomodoroEstimatedMinutes || null,
      approachParams: data.approachParams || null,
      orderInList: 0,
      lastSyncClientTimestamp: null,
      localId: null,
    };

    try {
      await db.runTransaction(async (t) => {
        t.set(newTaskRef, newTaskData);
        const gsRef = db.collection(GLOBAL_STATISTICS_COLLECTION).doc(uid);
        t.update(gsRef, {
          totalTasksCreated: FieldValue.increment(1),
          lastActive: now,
        });
      });

      const eventPayload: TaskCreatedEventData = {
        taskId: newTaskRef.id,
        workspaceId: data.workspaceId,
        creatorUid: uid,
        assigneeUid: uid,
        title: newTaskData.title,
      };
      await pubsub.topic(TASK_EVENTS_TOPIC).publishMessage({
        json: {
          eventType: "TASK_CREATED",
          data: eventPayload,
          eventTimestamp: new Date().toISOString(),
        },
      });
      console.log(
        `[Tasks] Task ${newTaskRef.id} created in ws ${data.workspaceId}`
      );
      const createdDoc = await newTaskRef.get();
      const createdData = createdDoc.data() as TaskDocument;
      return {
        task: {
          id: newTaskRef.id,
          ...createdData,
          createdAt: (
            createdData.createdAt as Timestamp
          ).toDate().toISOString(),
          updatedAt: (
            createdData.updatedAt as Timestamp
          ).toDate().toISOString(),
          dueDate: createdData.dueDate ?
            (createdData.dueDate as Timestamp).toDate().toISOString() :
            null,
          completedAt: null,
        },
      } as CreateTaskResponse;
    } catch (e: any) {
      console.error(
        `[Tasks] Error creating task for ws ${data.workspaceId}:`,
        e
      );
      if (e instanceof HttpsError) {
        throw e;
      }
      throw new HttpsError(
        "internal",
        "Failed to create task.",
        String(e?.message)
      );
    }
  }
);

export const getTasks = onCall(
  commonRuntimeOpts,
  async (request: CallableRequest<GetTasksPayload>) => {
    const uid = assertAuthenticated(request.auth);
    const {viewId, workspaceId, filters, sortBy, sortDirection} = request.data;

    let targetWorkspaceIds: string[] = [];
    let effectiveFilters: ViewFiltersClientDto | null = filters || null;
    let effectiveSortBy = sortBy;
    let effectiveSortDir = sortDirection;

    try {
      if (viewId) {
        const viewRef = db.collection(USERS_COLLECTION).doc(uid)
          .collection("views").doc(viewId);
        const viewDoc = await viewRef.get();
        if (!viewDoc.exists) {
          throw new HttpsError("not-found", "–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
        }
        const viewDataFromDb = viewDoc.data() as UserViewDocument;
        targetWorkspaceIds = viewDataFromDb.workspaceIds;

        if (viewDataFromDb.filters) {
          const dbFilters = viewDataFromDb.filters;
          let clientDateRange: DateRangeFilterClientDto | null | undefined =
            undefined;

          if (dbFilters.dateRange) {
            const dr = dbFilters.dateRange;
            clientDateRange = {
              start: dr.start ?
                (dr.start as Timestamp).toDate().toISOString() :
                null,
              end: dr.end ? (dr.end as Timestamp).toDate().toISOString() : null,
              type: dr.type,
            };
          }

          effectiveFilters = {
            status: dbFilters.status || undefined,
            priority: dbFilters.priority || undefined,
            tagsInclude: dbFilters.tagsInclude || undefined,
            tagsExclude: dbFilters.tagsExclude || undefined,
            dateRange: clientDateRange,
            assignee: dbFilters.assignee || undefined,
          };
        } else {
          effectiveFilters = null;
        }

        effectiveSortBy = viewDataFromDb.sortBy || effectiveSortBy;
        effectiveSortDir = viewDataFromDb.sortDirection || effectiveSortDir;

        if (targetWorkspaceIds.length === 0) {
          return {tasks: []} as GetTasksResponse;
        }
      } else if (workspaceId) {
        targetWorkspaceIds = [workspaceId];
      } else {
        throw new HttpsError(
          "invalid-argument",
          "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω viewId –∏–ª–∏ workspaceId."
        );
      }

      for (const wsId of targetWorkspaceIds) {
        await assertPersonalWorkspaceOwner(wsId, uid);
      }

      let query: Query = db.collection(TASKS_COLLECTION)
        .where("workspaceId", "in", targetWorkspaceIds)
        .where("creatorUid", "==", uid);

      if (effectiveFilters) {
        if (effectiveFilters.status && effectiveFilters.status.length > 0) {
          if (effectiveFilters.status.length < 30) {
            query = query.where("status", "in", effectiveFilters.status);
          }
        }
        if (effectiveFilters.priority && effectiveFilters.priority.length > 0) {
          if (effectiveFilters.priority.length < 30) {
            query = query.where("priority", "in", effectiveFilters.priority);
          }
        }
        if (
          effectiveFilters.tagsInclude &&
          effectiveFilters.tagsInclude.length > 0
        ) {
          if (effectiveFilters.tagsInclude.length < 30) {
            query = query.where(
              "tags",
              "array-contains-any",
              effectiveFilters.tagsInclude
            );
          }
        }
        if (effectiveFilters.dateRange) {
          const drClient = effectiveFilters.dateRange;
          const fieldToFilter =
            drClient.type === "created" ?
              "createdAt" :
              drClient.type === "completed" ?
                "completedAt" :
                "dueDate";
          if (drClient.start) {
            query = query.where(
              fieldToFilter,
              ">=",
              Timestamp.fromDate(new Date(drClient.start))
            );
          }
          if (drClient.end) {
            const endDate = new Date(drClient.end as string | number);
            const endOfDay = new Date(
              endDate.getFullYear(),
              endDate.getMonth(),
              endDate.getDate() + 1
            );
            query = query.where(
              fieldToFilter,
              "<",
              Timestamp.fromDate(endOfDay)
            );
          }
        }
        if (effectiveFilters.assignee) {
          if (effectiveFilters.assignee === "me") {
            query = query.where("assigneeUid", "==", uid);
          } else if (effectiveFilters.assignee === "unassigned") {
            query = query.where("assigneeUid", "==", null);
          } else {
            query = query.where(
              "assigneeUid",
              "==",
              effectiveFilters.assignee
            );
          }
        }
      }

      const finalSortBy = effectiveSortBy || "createdAt";
      const finalSortDir = effectiveSortDir || "desc";
      query = query.orderBy(finalSortBy, finalSortDir);

      const snapshot = await query.limit(100).get();
      const tasks = snapshot.docs.map((doc) => {
        const data = doc.data() as TaskDocument;
        return {
          id: doc.id,
          ...data,
          createdAt: (data.createdAt as Timestamp).toDate().toISOString(),
          updatedAt: (data.updatedAt as Timestamp).toDate().toISOString(),
          dueDate: data.dueDate ?
            (data.dueDate as Timestamp).toDate().toISOString() :
            null,
          completedAt: data.completedAt ?
            (data.completedAt as Timestamp).toDate().toISOString() :
            null,
        } as TaskClientDto;
      });
      return {tasks} as GetTasksResponse;
    } catch (e: any) {
      console.error(
        `[Tasks] Error fetching tasks for user ${uid} ` +
          `(wsId: ${workspaceId}, viewId: ${viewId}):`,
        e
      );
      if (e instanceof HttpsError) {
        throw e;
      }
      throw new HttpsError(
        "internal",
        "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞—á–∏.",
        String(e?.message)
      );
    }
  }
);

export const getTaskDetails = onCall(
  commonRuntimeOpts,
  async (request: CallableRequest<GetTaskDetailsPayload>) => {
    const uid = assertAuthenticated(request.auth);
    const {taskId} = request.data;

    if (!taskId) {
      throw new HttpsError("invalid-argument", "TaskId is required.");
    }
    try {
      const taskRef = db.collection(TASKS_COLLECTION).doc(taskId);
      const taskDoc = await taskRef.get();
      if (!taskDoc.exists) {
        throw new HttpsError("not-found", "Task not found.");
      }
      const taskData = taskDoc.data() as TaskDocument;
      await assertPersonalWorkspaceOwner(taskData.workspaceId, uid);

      return {
        task: {
          id: taskDoc.id,
          ...taskData,
          createdAt: (
            taskData.createdAt as Timestamp
          ).toDate().toISOString(),
          updatedAt: (
            taskData.updatedAt as Timestamp
          ).toDate().toISOString(),
          dueDate: taskData.dueDate ?
            (taskData.dueDate as Timestamp).toDate().toISOString() :
            null,
          completedAt: taskData.completedAt ?
            (taskData.completedAt as Timestamp).toDate().toISOString() :
            null,
        },
      } as GetTaskDetailsResponse;
    } catch (e: any) {
      console.error(
        `[Tasks] Error fetching details for task ${taskId}:`,
        e
      );
      if (e instanceof HttpsError) {
        throw e;
      }
      throw new HttpsError(
        "internal",
        "Fetch task details failed.",
        String(e?.message)
      );
    }
  }
);

export const updateTask = onCall(
  commonRuntimeOpts,
  async (request: CallableRequest<UpdateTaskPayload>) => {
    const uid = assertAuthenticated(request.auth);
    const data = request.data;
    const {taskId} = data;

    if (!taskId) {
      throw new HttpsError("invalid-argument", "TaskId is required.");
    }
    const taskRef = db.collection(TASKS_COLLECTION).doc(taskId);
    const updates: PartialWithFieldValue<TaskDocument> = {};
    let hasUpdates = false;

    if (data.title !== undefined) {
      updates.title = data.title;
      hasUpdates = true;
    }
    if (data.description !== undefined) {
      updates.description = data.description;
      hasUpdates = true;
    }
    if (data.priority !== undefined) {
      updates.priority = data.priority;
      hasUpdates = true;
    }
    if (data.dueDate !== undefined) {
      updates.dueDate = data.dueDate ?
        Timestamp.fromDate(new Date(data.dueDate)) :
        null;
      hasUpdates = true;
    }
    if (data.tags !== undefined) {
      updates.tags = data.tags;
      hasUpdates = true;
    }
    if (data.approachParams !== undefined) {
      updates.approachParams = data.approachParams;
      hasUpdates = true;
    }
    if (data.pomodoroEstimatedMinutes !== undefined) {
      updates.pomodoroEstimatedMinutes = data.pomodoroEstimatedMinutes;
      hasUpdates = true;
    }

    if (!hasUpdates) {
      throw new HttpsError("invalid-argument", "No data to update.");
    }
    updates.updatedAt = FieldValue.serverTimestamp();

    try {
      await db.runTransaction(async (t) => {
        const taskDoc = await t.get(taskRef);
        if (!taskDoc.exists) {
          throw new HttpsError("not-found", "Task not found.");
        }
        const taskData = taskDoc.data() as TaskDocument;
        await assertPersonalWorkspaceOwner(taskData.workspaceId, uid);
        t.update(taskRef, updates);
      });

      const updatedDoc = await taskRef.get();
      const updatedData = updatedDoc.data() as TaskDocument;
      console.log(`[Tasks] Task ${taskId} updated.`);
      return {
        success: true,
        updatedTask: {
          id: updatedDoc.id,
          ...updatedData,
          createdAt: (
            updatedData.createdAt as Timestamp
          ).toDate().toISOString(),
          updatedAt: (
            updatedData.updatedAt as Timestamp
          ).toDate().toISOString(),
          dueDate: updatedData.dueDate ?
            (updatedData.dueDate as Timestamp).toDate().toISOString() :
            null,
          completedAt: updatedData.completedAt ?
            (updatedData.completedAt as Timestamp).toDate().toISOString() :
            null,
        },
      } as UpdateTaskResponse;
    } catch (e: any) {
      console.error(`[Tasks] Error updating task ${taskId}:`, e);
      if (e instanceof HttpsError) {
        throw e;
      }
      throw new HttpsError(
        "internal",
        "Failed to update task.",
        String(e?.message)
      );
    }
  }
);

export const updateTaskStatus = onCall(
  commonRuntimeOpts,
  async (request: CallableRequest<UpdateTaskStatusPayload>) => {
    const uid = assertAuthenticated(request.auth);
    const {taskId, newStatus, workspaceId} = request.data;

    if (!taskId || !newStatus || !workspaceId) {
      throw new HttpsError("invalid-argument", "Required fields missing.");
    }
    const taskRef = db.collection(TASKS_COLLECTION).doc(taskId);
    const now = FieldValue.serverTimestamp();
    try {
      let oldStatus: TaskStatusType | undefined;
      let taskInfoForEvent: Partial<
        Pick<TaskDocument, "title" | "assigneeUid" | "creatorUid">
      > | undefined;

      await db.runTransaction(async (t) => {
        const taskDoc = await t.get(taskRef);
        if (
          !taskDoc.exists ||
          (taskDoc.data() as TaskDocument).workspaceId !== workspaceId
        ) {
          throw new HttpsError("not-found", "Task not found or invalid ws.");
        }
        const currentTaskData = taskDoc.data() as TaskDocument;
        await assertPersonalWorkspaceOwner(currentTaskData.workspaceId, uid);
        oldStatus = currentTaskData.status;
        taskInfoForEvent = {
          title: currentTaskData.title,
          assigneeUid: currentTaskData.assigneeUid,
          creatorUid: currentTaskData.creatorUid,
        };
        const updatePayload: PartialWithFieldValue<TaskDocument> = {
          status: newStatus,
          updatedAt: now,
        };
        if (newStatus === "DONE" && oldStatus !== "DONE") {
          updatePayload.completedAt = now;
        } else if (newStatus !== "DONE" && oldStatus === "DONE") {
          updatePayload.completedAt = null;
        }
        t.update(taskRef, updatePayload);
      });

      const eventData: TaskStatusUpdatedEventData = {
        taskId,
        workspaceId,
        userId: uid,
        newStatus,
        oldStatus,
        completedAt:
          newStatus === "DONE" ? new Date().toISOString() : undefined,
        taskData: taskInfoForEvent,
      };
      await pubsub.topic(TASK_EVENTS_TOPIC).publishMessage({
        json: {
          eventType: "TASK_STATUS_UPDATED",
          data: eventData,
          eventTimestamp: new Date().toISOString(),
        },
      });
      console.log(
        `[Tasks] Status of task ${taskId} updated to ${newStatus}.`
      );
      return {
        success: true,
        message: "–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω.",
      } as SuccessResponse;
    } catch (e: any) {
      console.error(
        `[Tasks] Error updating status for task ${taskId}:`,
        e
      );
      if (e instanceof HttpsError) {
        throw e;
      }
      throw new HttpsError(
        "internal",
        "Update status failed.",
        String(e?.message)
      );
    }
  }
);

export const deleteTask = onCall(
  commonRuntimeOpts,
  async (request: CallableRequest<DeleteTaskPayload>) => {
    const uid = assertAuthenticated(request.auth);
    const {taskId} = request.data;
    if (!taskId) {
      throw new HttpsError("invalid-argument", "TaskId is required.");
    }

    const taskRef = db.collection(TASKS_COLLECTION).doc(taskId);

    try {
      const taskDoc = await taskRef.get();
      if (!taskDoc.exists) {
        throw new HttpsError("not-found", "Task not found.");
      }

      const taskData = taskDoc.data() as TaskDocument;
      await assertPersonalWorkspaceOwner(taskData.workspaceId, uid);

      // –ü—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç. –¢—Ä–∏–≥–≥–µ—Ä —Å–¥–µ–ª–∞–µ—Ç –æ—Å—Ç–∞–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É.
      await taskRef.delete();

      console.log(
        `[Tasks] Task ${taskId} deletion initiated by user ${uid}.`
      );
      return {success: true, message: "–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞."};
    } catch (e: any) {
      console.error(`[Tasks] Error deleting task ${taskId}:`, e);
      if (e instanceof HttpsError) {
        throw e;
      }
      throw new HttpsError("internal", "Failed to delete task.", e.message);
    }
  }
);

export const getTaskChanges = onCall(
  commonRuntimeOpts,
  async (
    request: CallableRequest<GetTaskChangesPayload>
  ): Promise<GetTaskChangesResponse> => {
    const uid = assertAuthenticated(request.auth);
    const {since, workspaceIds} = request.data;

    if (!Array.isArray(workspaceIds) || workspaceIds.length === 0) {
      throw new HttpsError(
        "invalid-argument",
        "Workspace IDs must be a non-empty array."
      );
    }
    if (!since) {
      throw new HttpsError(
        "invalid-argument",
        "A 'since' timestamp is required."
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –≤—Å–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–µ –†–ü
    for (const wsId of workspaceIds) {
      await assertPersonalWorkspaceOwner(wsId, uid);
    }

    const sinceTimestamp = Timestamp.fromDate(new Date(since));
    const serverTimestamp = Timestamp.now().toDate().toISOString();

    const updatedTasksPromise = db
      .collection(TASKS_COLLECTION)
      .where("workspaceId", "in", workspaceIds)
      .where("updatedAt", ">", sinceTimestamp)
      .get();

    const deletedTasksPromise = db
      .collection(DELETED_ENTITIES_COLLECTION)
      .where("entityType", "==", "task")
      .where("workspaceId", "in", workspaceIds)
      .where("deletedAt", ">", sinceTimestamp)
      .get();

    try {
      const [updatedSnapshot, deletedSnapshot] = await Promise.all([
        updatedTasksPromise,
        deletedTasksPromise,
      ]);

      const updatedTasks: TaskClientDto[] = updatedSnapshot.docs.map((doc) => {
        const data = doc.data() as TaskDocument;
        // eslint-disable-next-line max-len
        return {
          /* ...–º–∞–ø–ø–∏–Ω–≥ –≤ TaskClientDto... */ id: doc.id,
          ...data,
        } as unknown as TaskClientDto;
      });

      const deletedTaskCloudIds = deletedSnapshot.docs.map((doc) => doc.id);

      console.info(
        `[Sync] Returning ${updatedTasks.length} updated and ` +
        `${deletedTaskCloudIds.length} deleted tasks for user ${uid}.`
      );

      return {
        updatedTasks,
        deletedTaskCloudIds,
        serverTimestamp,
      };
    } catch (error) {
      console.error(
        `[Sync] Error getting task changes for user ${uid}`,
        error
      );
      throw new HttpsError(
        "internal",
        "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞–¥–∞—á."
      );
    }
  }
);

export const addSubtask = onCall(
  commonRuntimeOpts,
  async (
    request: CallableRequest<CreateSubtaskPayload>
  ): Promise<SubtaskClientDto> => {
    const uid = assertAuthenticated(request.auth);
    const {parentTaskId, title} = request.data;
    if (!parentTaskId || !title) {
      throw new HttpsError(
        "invalid-argument",
        "Parent taskId and title are required."
      );
    }

    const parentTaskRef = db.collection(TASKS_COLLECTION).doc(parentTaskId);
    const subtaskRef = parentTaskRef.collection(SUBTASKS_COLLECTION).doc();

    try {
      const parentTaskDoc = await parentTaskRef.get();
      if (!parentTaskDoc.exists) {
        throw new HttpsError("not-found", "Parent task not found.");
      }
      await assertPersonalWorkspaceOwner(
        (parentTaskDoc.data() as TaskDocument).workspaceId,
        uid
      );

      const newSubtask: SubtaskDocument = {
        title: title.trim(),
        completed: false,
        order: 0, // –õ–æ–≥–∏–∫—É –ø–æ—Ä—è–¥–∫–∞ –ª—É—á—à–µ –¥–µ–ª–∞—Ç—å –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ –∏–ª–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ
        createdAt: FieldValue.serverTimestamp(),
      };

      // –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –∑–∞–¥–∞—á—É
      await db.runTransaction(async (t) => {
        t.set(subtaskRef, newSubtask);
        // –í–∞–∂–Ω–æ! –û–±–Ω–æ–≤–ª—è–µ–º updatedAt —É —Ä–æ–¥–∏—Ç–µ–ª—è
        t.update(parentTaskRef, {updatedAt: FieldValue.serverTimestamp()});
      });

      const createdDoc = await subtaskRef.get();
      const createdData = createdDoc.data() as SubtaskDocument;
      return {
        id: createdDoc.id,
        ...createdData,
        createdAt: (
          createdData.createdAt as Timestamp
        ).toDate().toISOString(),
      };
    } catch (e) {
      console.error(
        `[Subtask] Error adding subtask to task ${parentTaskId}`,
        e
      );
      if (e instanceof HttpsError) {
        throw e;
      }
      throw new HttpsError("internal", "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∑–∞–¥–∞—á—É.");
    }
  }
);

// === –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: deleteSubtask ===
export const deleteSubtask = onCall(
  commonRuntimeOpts,
  async (
    request: CallableRequest<DeleteSubtaskPayload>
  ): Promise<SuccessResponse> => {
    const uid = assertAuthenticated(request.auth);
    const {parentTaskId, subtaskId} = request.data;

    if (!parentTaskId || !subtaskId) {
      throw new HttpsError(
        "invalid-argument",
        "Parent taskId and subtaskId are required."
      );
    }

    const parentTaskRef = db.collection(TASKS_COLLECTION).doc(parentTaskId);
    const subtaskRef = parentTaskRef
      .collection(SUBTASKS_COLLECTION)
      .doc(subtaskId);

    try {
      await db.runTransaction(async (t) => {
        const parentTaskDoc = await t.get(parentTaskRef);
        if (!parentTaskDoc.exists) {
          // –ï—Å–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∑–∞–¥–∞—á–∏ –Ω–µ—Ç, —Ç–æ –∏ –ø–æ–¥–∑–∞–¥–∞—á–∏ –Ω–µ—Ç.
          // –ü—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º.
          console.warn(
            `[Subtask] Parent task ${parentTaskId} not found ` +
            "during subtask deletion. Skipping."
          );
          return;
        }
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –∑–∞–¥–∞—á—É
        await assertPersonalWorkspaceOwner(
          (parentTaskDoc.data() as TaskDocument).workspaceId,
          uid
        );

        const subtaskDoc = await t.get(subtaskRef);
        if (subtaskDoc.exists) {
          t.delete(subtaskRef);
          // –ö–õ–Æ–ß–ï–í–û–ô –ú–û–ú–ï–ù–¢: –û–±–Ω–æ–≤–ª—è–µ–º updatedAt —É —Ä–æ–¥–∏—Ç–µ–ª—è
          t.update(parentTaskRef, {updatedAt: FieldValue.serverTimestamp()});
        }
      });

      console.info(
        `[Subtask] Subtask ${subtaskId} of task ${parentTaskId} was deleted.`
      );

      return {success: true, message: "–ü–æ–¥–∑–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞."};
    } catch (e) {
      console.error(
        `[Subtask] Error deleting subtask ${subtaskId} for task ` +
        parentTaskId,
        e
      );
      if (e instanceof HttpsError) {
        throw e;
      }
      throw new HttpsError("internal", "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–¥–∑–∞–¥–∞—á—É.");
    }
  }
);


// ----- FILE: A:\Progects\Progress Quest Universal\progressquest-backend\functions\src\http\teams.ts -----


// ----- FILE: A:\Progects\Progress Quest Universal\progressquest-backend\functions\src\http\users.ts -----
import {
  HttpsError,
  onCall,
  CallableRequest,
} from "firebase-functions/v2/https";
import {
  getFirestore,
  FieldValue,
  Timestamp,
  WriteBatch,
} from "firebase-admin/firestore";
import {getAuth} from "firebase-admin/auth";
import * as functions from "firebase-functions";
import {PubSub} from "@google-cloud/pubsub";

import {
  commonRuntimeOpts,
  USERS_COLLECTION,
  USER_EVENTS_TOPIC,
  WORKSPACES_COLLECTION,
  TASKS_COLLECTION,
  GAMIFICATION_PROFILES_COLLECTION,
  GLOBAL_STATISTICS_COLLECTION,
} from "../config";
import {assertAuthenticated} from "../utils";
import {
  UserDocument,
  FcmTokenDocument,
  WorkspaceDocument,
  TaskDocument,
  ActiveItems,
} from "../types/firestore.types";
import {
  GetUserProfileResponse,
  UpdateUserProfilePayload,
  UpdateUserProfileResponse,
  UpdateUserAppSettingsPayload,
  UpdateUserAppSettingsResponse,
  UpdateUserPomodoroSettingsPayload,
  UpdateUserPomodoroSettingsResponse,
  UpdateUserActiveItemsPayload,
  UpdateUserActiveItemsResponse,
  SuccessResponse,
  SendPasswordResetEmailPayload,
  RegisterFcmTokenPayload,
  UnregisterFcmTokenPayload,
  MigrateGuestDataPayload,
  MigrateGuestDataResponse,
} from "../types/api.types";
import {UserProfileUpdatedEventData} from "../types/events.types";

const db = getFirestore();
const authAdmin = getAuth();
const pubsub = new PubSub();
const logger = functions.logger;
const FIRESTORE_BATCH_LIMIT = 500;

// --- –ü—Ä–æ—Ñ–∏–ª—å –∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---

const delay = (ms: number) => new Promise((res) => setTimeout(res, ms));

export const getCurrentUserProfile = onCall(
  commonRuntimeOpts,
  async (request: CallableRequest): Promise<GetUserProfileResponse> => {
    const uid = assertAuthenticated(request.auth);
    const userDocRef = db.collection(USERS_COLLECTION).doc(uid);

    try {
      let userDoc = await userDocRef.get();
      let attempts = 0;
      const maxAttempts = 5;
      const retryDelay = 500;

      while (!userDoc.exists && attempts < maxAttempts) {
        attempts++;
        logger.warn(
          `[Users] Profile for user ${uid} not found on attempt ${attempts}. ` +
          `Retrying in ${retryDelay}ms...`
        );
        await delay(retryDelay);
        userDoc = await userDocRef.get();
      }

      if (!userDoc.exists) {
        logger.error(
          `[Users] Profile for user ${uid} not found ` +
          `after ${maxAttempts} attempts.`
        );
        throw new HttpsError(
          "not-found",
          "–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ —Å–Ω–æ–≤–∞."
        );
      }

      const userData = userDoc.data() as UserDocument;
      const clientProfile = {
        ...userData,
        createdAt: (userData.createdAt as Timestamp).toDate()
          .toISOString(),
        lastLoginAt: (userData.lastLoginAt as Timestamp).toDate()
          .toISOString(),
      };

      return {
        userProfile: clientProfile,
      } as unknown as GetUserProfileResponse;
    } catch (error: unknown) {
      logger.error(`[Users] Error fetching profile for ${uid}:`, error);
      if (error instanceof HttpsError) {
        throw error;
      }
      throw new HttpsError(
        "internal",
        "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è.",
        (error as Error).message
      );
    }
  }
);

export const updateUserProfile = onCall(
  commonRuntimeOpts,
  async (
    request: CallableRequest<UpdateUserProfilePayload>
  ): Promise<UpdateUserProfileResponse> => {
    const uid = assertAuthenticated(request.auth);
    const data = request.data;
    const userDocRef = db.collection(USERS_COLLECTION).doc(uid);

    const updates: Partial<Pick<UserDocument, "displayName" | "avatarUrl">> =
      {};
    const updatedFields: Array<
      keyof Pick<UserDocument, "displayName" | "avatarUrl">
    > = [];

    if (typeof data.displayName === "string") {
      updates.displayName = data.displayName.trim();
      updatedFields.push("displayName");
    }
    if (data.avatarUrl !== undefined) {
      updates.avatarUrl = data.avatarUrl;
      updatedFields.push("avatarUrl");
    }

    if (updatedFields.length === 0) {
      throw new HttpsError("invalid-argument", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.");
    }
    (updates as any).lastLoginAt = FieldValue.serverTimestamp();

    try {
      await userDocRef.update(updates);
      const authUpdates: {displayName?: string; photoURL?: string | null} = {};
      if (updates.displayName) {
        authUpdates.displayName = updates.displayName;
      }
      if (updates.avatarUrl !== undefined) {
        authUpdates.photoURL = updates.avatarUrl;
      }
      if (Object.keys(authUpdates).length > 0) {
        await authAdmin.updateUser(uid, authUpdates);
      }

      const eventPayload: UserProfileUpdatedEventData = {
        userId: uid,
        updatedFields,
      };
      await pubsub.topic(USER_EVENTS_TOPIC).publishMessage({
        json: {
          eventType: "USER_PROFILE_UPDATED",
          data: eventPayload,
          eventTimestamp: new Date().toISOString(),
        },
      });

      const updatedDoc = await userDocRef.get();
      const updatedData = updatedDoc.data() as UserDocument;
      return {
        success: true,
        updatedProfile: {
          ...updatedData,
          createdAt: (updatedData.createdAt as Timestamp).toDate()
            .toISOString(),
          lastLoginAt: (
            updatedData.lastLoginAt as Timestamp
          ).toDate().toISOString(),
        },
      } as unknown as UpdateUserProfileResponse;
    } catch (error) {
      logger.error(`[Users] Error updating profile for ${uid}:`, error);
      if (error instanceof HttpsError) {
        throw error;
      }
      throw new HttpsError(
        "internal",
        "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è.",
        (error as Error).message
      );
    }
  }
);

export const updateUserAppSettings = onCall(
  commonRuntimeOpts,
  async (
    request: CallableRequest<UpdateUserAppSettingsPayload>
  ): Promise<UpdateUserAppSettingsResponse> => {
    const uid = assertAuthenticated(request.auth);
    const data = request.data;
    if (Object.keys(data).length === 0) {
      throw new HttpsError("invalid-argument", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.");
    }
    try {
      await db
        .collection(USERS_COLLECTION)
        .doc(uid)
        .set({appSettings: data}, {merge: true});
      logger.log(`[Users] App settings updated for user ${uid}.`);
      const updatedDoc = await db.collection(USERS_COLLECTION).doc(uid).get();
      const newSettings = (updatedDoc.data() as UserDocument).appSettings;
      return {success: true, appSettings: newSettings};
    } catch (error: any) {
      logger.error(`[Users] Error updating app settings for ${uid}:`, error);
      throw new HttpsError(
        "internal",
        "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫.",
        error.message
      );
    }
  }
);

export const updateUserPomodoroSettings = onCall(
  commonRuntimeOpts,
  async (
    request: CallableRequest<UpdateUserPomodoroSettingsPayload>
  ): Promise<UpdateUserPomodoroSettingsResponse> => {
    const uid = assertAuthenticated(request.auth);
    const data = request.data;
    if (Object.keys(data).length === 0) {
      throw new HttpsError("invalid-argument", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.");
    }
    try {
      await db
        .collection(USERS_COLLECTION)
        .doc(uid)
        .set({pomodoroSettings: data}, {merge: true});
      logger.log(`[Users] Pomodoro settings updated for user ${uid}.`);
      const updatedDoc = await db.collection(USERS_COLLECTION).doc(uid).get();
      const newSettings = (updatedDoc.data() as UserDocument).pomodoroSettings;
      return {success: true, pomodoroSettings: newSettings};
    } catch (error: any) {
      logger.error(
        `[Users] Error updating pomodoro settings for ${uid}:`,
        error
      );
      throw new HttpsError(
        "internal",
        "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫.",
        error.message
      );
    }
  }
);

export const updateUserActiveItems = onCall(
  commonRuntimeOpts,
  async (
    request: CallableRequest<UpdateUserActiveItemsPayload>
  ): Promise<UpdateUserActiveItemsResponse> => {
    const uid = assertAuthenticated(request.auth);
    const data = request.data;
    const updates: {[key: string]: any} = {};

    if (data.workspaceId !== undefined) {
      updates["activeItems.workspaceId"] = data.workspaceId;
    }
    if (data.viewId !== undefined) {
      updates["activeItems.viewId"] = data.viewId;
    }

    if (Object.keys(updates).length === 0) {
      throw new HttpsError("invalid-argument", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.");
    }

    try {
      await db.collection(USERS_COLLECTION).doc(uid).update(updates);
      logger.log(`[Users] Active items updated for user ${uid}.`);
      const userDoc = await db.collection(USERS_COLLECTION).doc(uid).get();
      const activeItems = (userDoc.data() as UserDocument)?.activeItems || {
        workspaceId: null,
        viewId: null,
      };
      return {success: true, activeItems: activeItems as ActiveItems};
    } catch (error: any) {
      logger.error(`[Users] Error updating active items for ${uid}:`, error);
      throw new HttpsError(
        "internal",
        "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤.",
        error.message
      );
    }
  }
);

// --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –£—á–µ—Ç–Ω—ã–º–∏ –î–∞–Ω–Ω—ã–º–∏ ---

export const sendPasswordResetEmail = onCall(
  commonRuntimeOpts,
  async (
    request: CallableRequest<SendPasswordResetEmailPayload>
  ): Promise<SuccessResponse> => {
    const email = request.data.email;
    if (!email || !/.+@.+\..+/.test(email)) {
      throw new HttpsError(
        "invalid-argument",
        "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email."
      );
    }
    try {
      await authAdmin.getUserByEmail(email);
      logger.log(
        `[Users] Password reset request for existing user: ${email}. ` +
        "NOTE: Actual email sending is not implemented."
      );
      return {
        success: true,
        message: "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –µ–º—É –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–∏—Å—å–º–æ.",
      };
    } catch (error: any) {
      if (error.code === "auth/user-not-found") {
        logger.warn(
          `[Users] Password reset requested for non-existent email: ${email}`
        );
        return {
          success: true,
          message: "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –µ–º—É –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–∏—Å—å–º–æ.",
        };
      }
      logger.error(
        `[Users] Error during password reset request for ${email}:`,
        error
      );
      throw new HttpsError(
        "internal",
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø–∞—Ä–æ–ª—è.",
        error.message
      );
    }
  }
);

export const registerFcmToken = onCall(
  commonRuntimeOpts,
  async (
    request: CallableRequest<RegisterFcmTokenPayload>
  ): Promise<SuccessResponse> => {
    const uid = assertAuthenticated(request.auth);
    const {token, platform, deviceName} = request.data;
    if (!token) {
      throw new HttpsError("invalid-argument", "FCM —Ç–æ–∫–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω.");
    }

    const tokenRef = db
      .collection(USERS_COLLECTION)
      .doc(uid)
      .collection("fcmTokens")
      .doc(token);
    const now = Timestamp.now();
    const tokenDoc: FcmTokenDocument = {
      token,
      platform: platform || "unknown",
      createdAt: now,
      lastUsedAt: now,
      ...(deviceName && {deviceName}),
    };

    try {
      await tokenRef.set(tokenDoc, {merge: true});
      logger.log(`[Users] FCM token registered/updated for UID: ${uid}`);
      return {success: true};
    } catch (error: any) {
      logger.error(`[Users] Error reg FCM token for UID ${uid}:`, error);
      throw new HttpsError(
        "internal",
        "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω.",
        error.message
      );
    }
  }
);

export const unregisterFcmToken = onCall(
  commonRuntimeOpts,
  async (
    request: CallableRequest<UnregisterFcmTokenPayload>
  ): Promise<SuccessResponse> => {
    const uid = assertAuthenticated(request.auth);
    const {token} = request.data;
    if (!token) {
      throw new HttpsError("invalid-argument", "FCM —Ç–æ–∫–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω.");
    }

    const tokenRef = db
      .collection(USERS_COLLECTION)
      .doc(uid)
      .collection("fcmTokens")
      .doc(token);

    try {
      await tokenRef.delete();
      logger.log(`[Users] FCM token unregistered for UID: ${uid}`);
      return {success: true};
    } catch (error: any) {
      logger.error(
        `[Users] Error unregistering FCM token for UID ${uid}:`,
        error
      );
      throw new HttpsError(
        "internal",
        "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Ç–æ–∫–µ–Ω–∞.",
        error.message
      );
    }
  }
);

// --- –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –û–ø–µ—Ä–∞—Ü–∏–∏ ---

/**
 * –£–¥–∞–ª—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Firestore.
 * @param {string} uid UID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 */
async function deleteUserData(uid: string) {
  logger.info(`[Users:deleteUserData] Deleting core documents for ${uid}`);
  const batch = db.batch();
  batch.delete(db.collection(USERS_COLLECTION).doc(uid));
  batch.delete(db.collection(GAMIFICATION_PROFILES_COLLECTION).doc(uid));
  batch.delete(db.collection(GLOBAL_STATISTICS_COLLECTION).doc(uid));
  await batch.commit();
}

export const requestAccountDeletion = onCall(
  commonRuntimeOpts,
  async (request: CallableRequest): Promise<SuccessResponse> => {
    const uid = assertAuthenticated(request.auth);
    logger.warn(
      `[Users] Account deletion requested by UID: ${uid}. This is irreversible.`
    );
    try {
      await deleteUserData(uid);
      await authAdmin.deleteUser(uid);
      logger.log(
        `[Users] Account for UID: ${uid} has been successfully deleted.`
      );
      return {success: true, message: "–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω."};
    } catch (error: any) {
      logger.error(
        `[Users] CRITICAL: Failed during account deletion for UID ${uid}:`,
        error
      );
      if (error instanceof HttpsError) {
        throw error;
      }
      throw new HttpsError(
        "internal",
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞.",
        error.message
      );
    }
  }
);

export const migrateGuestData = onCall(
  {...commonRuntimeOpts, timeoutSeconds: 300},
  async (
    request: CallableRequest<MigrateGuestDataPayload>
  ): Promise<MigrateGuestDataResponse> => {
    const uid = assertAuthenticated(request.auth);
    const data = request.data;
    if (!data.workspaces || !Array.isArray(data.workspaces)) {
      throw new HttpsError(
        "invalid-argument",
        "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –º–∞—Å—Å–∏–≤ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤."
      );
    }
    logger.log(
      `[Users] Starting guest data migration for UID: ${uid}. ` +
      `Workspaces to migrate: ${data.workspaces.length}`
    );

    const idMappings: {
      workspaces: Record<string, string>;
      tasks: Record<string, string>;
    } = {workspaces: {}, tasks: {}};

    const now = FieldValue.serverTimestamp();
    const batches: WriteBatch[] = [db.batch()];
    let currentBatchIndex = 0;
    let operationCount = 0;

    try {
      for (const ws of data.workspaces) {
        if (operationCount >= FIRESTORE_BATCH_LIMIT - 10) {
          batches.push(db.batch());
          currentBatchIndex++;
          operationCount = 0;
        }

        const newWsRef = db.collection(WORKSPACES_COLLECTION).doc();
        idMappings.workspaces[ws.localId] = newWsRef.id;
        const newWsData: Omit<WorkspaceDocument, "id"> = {
          name: ws.name,
          description: ws.description || null,
          ownerUid: uid,
          isPersonal: true,
          teamId: null,
          createdAt: now,
          updatedAt: now,
          activeApproach: ws.activeApproach || "CALENDAR",
          defaultTags: [],
          settings: {
            allowMembersToCreateTasks: true,
            taskVisibility: "all_visible",
          },
          lastClientSyncTimestamp: null,
          syncStatus: "synced",
        };
        batches[currentBatchIndex].set(newWsRef, newWsData);
        operationCount++;

        for (const task of ws.tasks) {
          if (operationCount >= FIRESTORE_BATCH_LIMIT) {
            batches.push(db.batch());
            currentBatchIndex++;
            operationCount = 0;
          }
          const newTaskRef = db.collection(TASKS_COLLECTION).doc();
          idMappings.tasks[task.localId] = newTaskRef.id;
          const newTaskData: Omit<TaskDocument, "id"> = {
            title: task.title,
            description: task.description || null,
            status: "TODO",
            priority: task.priority || "MEDIUM",
            dueDate: task.dueDate ?
              Timestamp.fromMillis(Number(task.dueDate)) :
              null,
            createdAt: now,
            updatedAt: now,
            completedAt: null,
            creatorUid: uid,
            assigneeUid: uid,
            workspaceId: newWsRef.id,
            tags: task.tags || [],
            pomodoroEstimatedCycles: null,
            pomodoroEstimatedMinutes: task.pomodoroEstimatedMinutes || null,
            approachParams: null,
            orderInList: 0,
            lastSyncClientTimestamp: null,
            localId: task.localId,
          };
          batches[currentBatchIndex].set(newTaskRef, newTaskData);
          operationCount++;
        }
      }

      await Promise.all(batches.map((b) => b.commit()));
      logger.log(`[Users] Guest data migration successful for UID: ${uid}.`);
      return {success: true, idMappings};
    } catch (error: any) {
      logger.error(
        `[Users] Error during guest data migration for UID ${uid}:`,
        error
      );
      throw new HttpsError(
        "internal",
        "–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö.",
        error.message
      );
    }
  }
);


// ----- FILE: A:\Progects\Progress Quest Universal\progressquest-backend\functions\src\http\views.ts -----



// ----- FILE: A:\Progects\Progress Quest Universal\progressquest-backend\functions\src\http\workspaces.ts -----
import {HttpsError, onCall} from "firebase-functions/v2/https";
import {
  getFirestore,
  FieldValue,
  Timestamp,
} from "firebase-admin/firestore";
import {
  commonRuntimeOpts,
  WORKSPACES_COLLECTION,
  USERS_COLLECTION,
  GLOBAL_STATISTICS_COLLECTION,
  WORKSPACE_EVENTS_TOPIC,
} from "../config";
import {
  assertAuthenticated,
  assertTeamRole,
  assertWorkspaceRole,
} from "../utils";
import {
  WorkspaceDocument,
  UserDocument,
  WorkspaceMemberDocument,
} from "../types/firestore.types";
import {
  CreateWorkspacePayload,
  WorkspaceClientDto,
  GetUserWorkspacesResponse,
  GetWorkspaceDetailsPayload,
  GetWorkspaceDetailsResponse,
  UpdateWorkspacePayload,
  UpdateWorkspaceResponse,
  DeleteWorkspacePayload,
  SuccessResponse,
  CreateWorkspaceResponse,
} from "../types/api.types";
import {
  WorkspaceCreatedEventData,
  WorkspaceUpdatedEventData,
  WorkspaceDeletedEventData,
} from "../types/events.types";
import {PubSub} from "@google-cloud/pubsub";

const db = getFirestore();
const pubsub = new PubSub();

export const createWorkspace = onCall(
  commonRuntimeOpts,
  async (request) => {
    const uid = assertAuthenticated(request.auth);
    const data = request.data as CreateWorkspacePayload;

    if (!data.name || data.name.trim().length === 0) {
      throw new HttpsError(
        "invalid-argument",
        "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ."
      );
    }
    if (!data.isPersonal && !data.teamId) {
      throw new HttpsError(
        "invalid-argument",
        "–î–ª—è –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º ID –∫–æ–º–∞–Ω–¥—ã."
      );
    }

    const now = FieldValue.serverTimestamp();
    const newWorkspaceRef = db.collection(WORKSPACES_COLLECTION).doc();

    const newWorkspaceData: Omit<WorkspaceDocument, "id"> = {
      name: data.name.trim(),
      description: data.description?.trim() || null,
      ownerUid: uid,
      isPersonal: data.isPersonal,
      teamId: data.isPersonal ? null : data.teamId || null,
      createdAt: now,
      updatedAt: now,
      activeApproach: data.activeApproach || "CALENDAR",
      defaultTags: data.defaultTags || [],
      settings: data.settings || {},
      lastClientSyncTimestamp: null,
      syncStatus: data.isPersonal ? "pending_upload" : null,
    };

    try {
      if (!data.isPersonal && data.teamId) {
        await assertTeamRole(data.teamId, uid, ["owner", "admin"]);
      }

      await newWorkspaceRef.set(newWorkspaceData);

      const userStatsUpdate: {[key: string]: any} = {};
      if (data.isPersonal) {
        userStatsUpdate.totalPersonalWorkspacesCreated =
          FieldValue.increment(1);
      }

      if (data.isPersonal && Object.keys(userStatsUpdate).length > 0) {
        const userGlobalStatsRef = db
          .collection(GLOBAL_STATISTICS_COLLECTION)
          .doc(uid);
        await userGlobalStatsRef.set(userStatsUpdate, {merge: true});
      }

      const eventPayload: WorkspaceCreatedEventData = {
        workspaceId: newWorkspaceRef.id,
        ownerUid: uid,
        teamId: newWorkspaceData.teamId,
        isPersonal: newWorkspaceData.isPersonal,
        workspaceName: newWorkspaceData.name,
      };
      await pubsub.topic(WORKSPACE_EVENTS_TOPIC).publishMessage({
        json: {
          eventType: "WORKSPACE_CREATED",
          data: eventPayload,
          eventTimestamp: new Date().toISOString(),
        },
      });

      console.log(
        `[WS] Workspace created: ${newWorkspaceRef.id} by user ${uid}`
      );
      const createdDoc = await newWorkspaceRef.get();
      const createdData = createdDoc.data() as WorkspaceDocument;

      return {
        workspace: {
          id: newWorkspaceRef.id,
          ...createdData,
          createdAt: (
            createdData.createdAt as Timestamp
          ).toDate().toISOString(),
          updatedAt: (
            createdData.updatedAt as Timestamp
          ).toDate().toISOString(),
          lastClientSyncTimestamp: null,
          syncStatus: createdData.syncStatus,
        },
      } as CreateWorkspaceResponse;
    } catch (error: any) {
      console.error(
        `[WS] Error creating workspace for user ${uid}:`,
        error
      );
      if (error instanceof HttpsError) {
        throw error;
      }
      throw new HttpsError(
        "internal",
        "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ.",
        error.message
      );
    }
  }
);

export const getUserWorkspaces = onCall(
  commonRuntimeOpts,
  async (request) => {
    const userUID = assertAuthenticated(request.auth);
    const clientWorkspaces: WorkspaceClientDto[] = [];

    try {
      // --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ù–ê–ß–ê–õ–û: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ ---

      // 1. –ó–∞–ø—Ä–æ—Å –ª–∏—á–Ω—ã—Ö —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤
      const personalSnapshot = await db
        .collection(WORKSPACES_COLLECTION)
        .where("ownerUid", "==", userUID)
        .where("isPersonal", "==", true)
        .orderBy("createdAt", "desc")
        .get();

      personalSnapshot.docs.forEach((doc) => {
        const data = doc.data() as WorkspaceDocument;
        clientWorkspaces.push({
          id: doc.id,
          name: data.name,
          description: data.description,
          ownerUid: data.ownerUid,
          isPersonal: data.isPersonal,
          teamId: data.teamId,
          createdAt: (data.createdAt as Timestamp).toDate().toISOString(),
          updatedAt: (data.updatedAt as Timestamp).toDate().toISOString(),
          activeApproach: data.activeApproach,
          defaultTags: data.defaultTags,
          settings: data.settings,
          currentUserWorkspaceRole: "owner", // –í–ª–∞–¥–µ–ª–µ—Ü –ª–∏—á–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
        });
      });

      // 2. –ó–∞–ø—Ä–æ—Å –∫–æ–º–∞–Ω–¥–Ω—ã—Ö —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤
      const userDocSnap = await db
        .collection(USERS_COLLECTION)
        .doc(userUID)
        .get();
      const userDocData = userDocSnap.data() as UserDocument | undefined;
      const teamMemberships = userDocData?.teamMemberships || [];

      if (teamMemberships.length > 0) {
        const teamIds = teamMemberships.map((m) => m.teamId);

        // –û–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥–Ω—ã—Ö —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤
        const teamWsSnap = await db
          .collection(WORKSPACES_COLLECTION)
          .where("teamId", "in", teamIds)
          .orderBy("name", "asc")
          .get();

        const teamRoleMap = teamMemberships.reduce((acc, m) => {
          acc[m.teamId] = m.userTeamRole;
          return acc;
        }, {} as Record<string, string>);

        teamWsSnap.docs.forEach((wsDoc) => {
          const wsData = wsDoc.data() as WorkspaceDocument;
          const userTeamRole = teamRoleMap[wsData.teamId as string] || null;

          // –í–ê–ñ–ù–û: Î°úÏßÅÏùÄ
          if (userTeamRole) {
            clientWorkspaces.push({
              id: wsDoc.id,
              name: wsData.name,
              description: wsData.description,
              ownerUid: wsData.ownerUid,
              isPersonal: wsData.isPersonal,
              teamId: wsData.teamId,
              createdAt: (wsData.createdAt as Timestamp).toDate().toISOString(),
              updatedAt: (wsData.updatedAt as Timestamp).toDate().toISOString(),
              activeApproach: wsData.activeApproach,
              defaultTags: wsData.defaultTags,
              settings: wsData.settings,
              currentUserWorkspaceRole:
                userTeamRole as WorkspaceMemberDocument["workspaceRole"],
            });
          }
        });
      }

      // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ (–ª–∏—á–Ω—ã–µ –æ–±—ã—á–Ω–æ –Ω–æ–≤–µ–µ –∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–≤–µ—Ä—Ö—É)
      clientWorkspaces.sort((a, b) => b.createdAt.localeCompare(a.createdAt));

      return {workspaces: clientWorkspaces} as GetUserWorkspacesResponse;
    } catch (e: any) {
      console.error(`[WS] Err fetch workspaces for ${userUID}:`, e.message);
      if (e instanceof HttpsError) {
        throw e;
      }
      throw new HttpsError(
        "internal",
        "Fetch workspaces failed.",
        e.message
      );
    }
  }
);

export const getWorkspaceDetails = onCall(
  commonRuntimeOpts,
  async (request) => {
    const uid = assertAuthenticated(request.auth);
    const {workspaceId} = request.data as GetWorkspaceDetailsPayload;

    if (!workspaceId) {
      throw new HttpsError("invalid-argument", "WorkspaceId is required.");
    }
    try {
      const workspaceRef = db
        .collection(WORKSPACES_COLLECTION)
        .doc(workspaceId);
      const workspaceDoc = await workspaceRef.get();

      if (!workspaceDoc.exists) {
        throw new HttpsError(
          "not-found",
          "–†–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        );
      }
      const wsData = workspaceDoc.data() as WorkspaceDocument;
      let currentUserRole:
        | WorkspaceMemberDocument["workspaceRole"]
        | null = null;

      if (wsData.isPersonal) {
        if (wsData.ownerUid !== uid) {
          throw new HttpsError("permission-denied", "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.");
        }
        currentUserRole = "owner";
      } else {
        const memberRef = workspaceRef.collection("members").doc(uid);
        const memberDoc = await memberRef.get();
        if (!memberDoc.exists) {
          throw new HttpsError(
            "permission-denied",
            "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞."
          );
        }
        currentUserRole = (
          memberDoc.data() as WorkspaceMemberDocument
        ).workspaceRole;
      }

      const responseWorkspace: WorkspaceClientDto = {
        id: workspaceDoc.id,
        ...wsData,
        createdAt: (wsData.createdAt as Timestamp).toDate().toISOString(),
        updatedAt: (wsData.updatedAt as Timestamp).toDate().toISOString(),
        currentUserWorkspaceRole: currentUserRole,
      };
      return {workspace: responseWorkspace} as GetWorkspaceDetailsResponse;
    } catch (e: any) {
      console.error(`[WS] Error details for ws ${workspaceId}:`, e.message);
      if (e instanceof HttpsError) {
        throw e;
      }
      throw new HttpsError(
        "internal",
        "Failed to get details.",
        e.message
      );
    }
  }
);

export const updateWorkspace = onCall(
  commonRuntimeOpts,
  async (request) => {
    const uid = assertAuthenticated(request.auth);
    const data = request.data as UpdateWorkspacePayload;

    if (!data.workspaceId) {
      throw new HttpsError("invalid-argument", "WorkspaceId is required.");
    }

    const workspaceRef = db
      .collection(WORKSPACES_COLLECTION)
      .doc(data.workspaceId);
    const updates: Partial<
      Omit<
        WorkspaceDocument,
        "id" | "createdAt" | "ownerUid" | "isPersonal" | "teamId"
      >
    > & {updatedAt: FieldValue} = {
      updatedAt: FieldValue.serverTimestamp(),
    };

    if (data.name !== undefined) {
      updates.name = data.name;
    }
    if (data.description !== undefined) {
      updates.description = data.description;
    }
    if (data.activeApproach !== undefined) {
      updates.activeApproach = data.activeApproach;
    }
    if (data.defaultTags !== undefined) {
      updates.defaultTags = data.defaultTags;
    }
    if (data.settings !== undefined) {
      updates.settings = data.settings;
    }

    if (Object.keys(updates).length === 1 && "updatedAt" in updates) {
      throw new HttpsError("invalid-argument", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.");
    }

    try {
      const wsDoc = await workspaceRef.get();
      if (!wsDoc.exists) {
        throw new HttpsError("not-found", "Workspace not found.");
      }
      const wsData = wsDoc.data() as WorkspaceDocument;

      if (wsData.isPersonal && wsData.ownerUid !== uid) {
        throw new HttpsError("permission-denied", "Permission denied.");
      }
      if (!wsData.isPersonal) {
        await assertWorkspaceRole(data.workspaceId, uid, [
          "owner",
          "admin",
          "manager",
        ]);
      }

      await workspaceRef.update(updates);

      const eventPayload: WorkspaceUpdatedEventData = {
        workspaceId: data.workspaceId,
        updatedFields: Object.keys(updates).filter(
          (k) => k !== "updatedAt"
        ) as Array<keyof WorkspaceDocument>,
        updatedByUid: uid,
      };
      await pubsub.topic(WORKSPACE_EVENTS_TOPIC).publishMessage({
        json: {
          eventType: "WORKSPACE_UPDATED",
          data: eventPayload,
          eventTimestamp: new Date().toISOString(),
        },
      });

      const updatedDoc = await workspaceRef.get();
      const updatedWsData = updatedDoc.data() as WorkspaceDocument;
      return {
        success: true,
        updatedWorkspace: {
          id: updatedDoc.id,
          ...updatedWsData,
          createdAt: (
            updatedWsData.createdAt as Timestamp
          ).toDate().toISOString(),
          updatedAt: (
            updatedWsData.updatedAt as Timestamp
          ).toDate().toISOString(),
        },
      } as UpdateWorkspaceResponse;
    } catch (e: any) {
      console.error(`[WS] Error updating ws ${data.workspaceId}:`, e.message);
      if (e instanceof HttpsError) {
        throw e;
      }
      throw new HttpsError(
        "internal",
        "Failed to update workspace.",
        e.message
      );
    }
  }
);

export const deleteWorkspace = onCall(
  commonRuntimeOpts,
  async (request) => {
    const uid = assertAuthenticated(request.auth);
    const {workspaceId} = request.data as DeleteWorkspacePayload;

    if (!workspaceId) {
      throw new HttpsError("invalid-argument", "WorkspaceId is required.");
    }
    const workspaceRef = db.collection(WORKSPACES_COLLECTION).doc(workspaceId);
    try {
      const wsDoc = await workspaceRef.get();
      if (!wsDoc.exists) {
        throw new HttpsError("not-found", "Workspace not found.");
      }
      const wsData = wsDoc.data() as WorkspaceDocument;

      if (wsData.ownerUid !== uid) {
        throw new HttpsError(
          "permission-denied",
          "Only owner can delete workspace."
        );
      }
      await workspaceRef.delete();

      const eventPayload: WorkspaceDeletedEventData = {
        workspaceId,
        teamId: wsData.teamId,
        deletedByUid: uid,
      };
      await pubsub.topic(WORKSPACE_EVENTS_TOPIC).publishMessage({
        json: {
          eventType: "WORKSPACE_DELETED",
          data: eventPayload,
          eventTimestamp: new Date().toISOString(),
        },
      });

      console.log(`[WS] Workspace ${workspaceId} deleted by user ${uid}`);
      return {
        success: true,
        message: "–†–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–æ.",
      } as SuccessResponse;
    } catch (e: any) {
      console.error(`[WS] Error deleting ws ${workspaceId}:`, e.message);
      if (e instanceof HttpsError) {
        throw e;
      }
      throw new HttpsError(
        "internal",
        "Failed to delete workspace.",
        e.message
      );
    }
  }
);


// ----- FILE: A:\Progects\Progress Quest Universal\progressquest-backend\functions\src\pubsub\index.ts -----
export * from "./pomodoroEventHandlers";
export * from "./taskEventHandlers";
export * from "./userEventHandlers";


// ----- FILE: A:\Progects\Progress Quest Universal\progressquest-backend\functions\src\pubsub\pomodoroEventHandlers.ts -----
import {onMessagePublished} from "firebase-functions/v2/pubsub";
import {getFirestore, FieldValue, Timestamp} from "firebase-admin/firestore";
import {
  POMODORO_EVENTS_TOPIC,
  TASK_STATISTICS_COLLECTION,
  GAMIFICATION_PROFILES_COLLECTION,
  GLOBAL_STATISTICS_COLLECTION,
  GAMIFICATION_HISTORY_COLLECTION,
  commonRuntimeOpts,
  XP_PER_POMODORO_FOCUS_MINUTE,
  COINS_PER_XP_BATCH_POMODORO,
  XP_BATCH_FOR_COIN_POMODORO,
  MIN_FOCUS_DURATION_FOR_REWARD_SECONDS,
} from "../config";
import {
  GamificationHistoryEntryDocument,
} from "../types/firestore.types";
import {PomodoroPhaseCompletedEventData} from "../types/events.types";

const db = getFirestore();

export const onPomodoroPhaseCompletedUpdateGamificationAndStats =
  onMessagePublished(
    {topic: POMODORO_EVENTS_TOPIC, ...commonRuntimeOpts},
    async (event) => {
      if (!event.data.message?.json) {
        console.warn(
          "[PomoEventHandler] PubSub message for topic " + // quotes
            POMODORO_EVENTS_TOPIC +
            " missing JSON payload. Event ID:",
          event.id
        );
        return;
      }

      const phaseEventData = event.data.message
        .json as PomodoroPhaseCompletedEventData;
      const eventTimestamp = event.time;

      // –î–ª—è —Å—Ç—Ä–æ–∫–∏ 28, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ quotes –≤—Å–µ –µ—â–µ —Ç–∞–º:
      console.log(
        "[PomoEventHandler] Processing POMODORO_PHASE_COMPLETED event " +
          "for session: " + // quotes
          phaseEventData.sessionId
      );

      const {
        userId,
        taskId,
        phaseType,
        actualDurationSeconds,
        completed,
      } = phaseEventData;

      if (
        phaseType !== "FOCUS" ||
        !completed ||
        actualDurationSeconds < MIN_FOCUS_DURATION_FOR_REWARD_SECONDS
      ) {
        // –î–ª—è —Å—Ç—Ä–æ–∫–∏ 40, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ quotes –≤—Å–µ –µ—â–µ —Ç–∞–º:
        console.log(
          "[PomoEventHandler] Skipping gamification/stats update for " +
            "session " + // quotes
            phaseEventData.sessionId +
            ": Not a qualifying focus phase. Type: " +
            phaseType +
            ", Completed: " + // quotes
            completed +
            ", Duration: " + // quotes
            actualDurationSeconds +
            "s."
        );
        return;
      }

      const batch = db.batch();
      const serverTimestamp = FieldValue.serverTimestamp();

      const taskStatsRef = db
        .collection(TASK_STATISTICS_COLLECTION)
        .doc(taskId);
      batch.set(
        taskStatsRef,
        {
          totalPomodoroFocusSeconds: FieldValue.increment(
            actualDurationSeconds
          ),
          completedPomodoroFocusSessions: FieldValue.increment(1),
          updatedAt: serverTimestamp,
        },
        {merge: true}
      );

      const gamificationProfileRef = db
        .collection(GAMIFICATION_PROFILES_COLLECTION)
        .doc(userId);

      const minutesInFocus = Math.floor(actualDurationSeconds / 60);
      const xpAwarded = minutesInFocus * XP_PER_POMODORO_FOCUS_MINUTE;
      const coinsAwarded =
        Math.floor(xpAwarded / XP_BATCH_FOR_COIN_POMODORO) *
        COINS_PER_XP_BATCH_POMODORO;

      if (xpAwarded > 0 || coinsAwarded > 0) {
        batch.update(gamificationProfileRef, {
          experience: FieldValue.increment(xpAwarded),
          coins: FieldValue.increment(coinsAwarded),
          lastPomodoroCompletionTime: Timestamp.fromDate(
            new Date(eventTimestamp)
          ),
        });
      }

      const globalStatsRef = db
        .collection(GLOBAL_STATISTICS_COLLECTION)
        .doc(userId);
      batch.update(globalStatsRef, {
        totalPomodoroFocusMinutes: FieldValue.increment(minutesInFocus),
        lastActive: serverTimestamp,
      });

      if (xpAwarded > 0 || coinsAwarded > 0) {
        const historyRef = db.collection(GAMIFICATION_HISTORY_COLLECTION).doc();
        const historyEntry: GamificationHistoryEntryDocument = {
          userId,
          timestamp: serverTimestamp,
          eventType: "POMODORO_FOCUS_PHASE",
          xpChange: xpAwarded,
          coinsChange: coinsAwarded,
          relatedEntityId: taskId,
          relatedEntityType: "task",
          description:
            "–ó–∞–≤–µ—Ä—à–µ–Ω–∞ —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏—è Pomodoro (" +
            minutesInFocus + // quotes
            " –º–∏–Ω) –¥–ª—è –∑–∞–¥–∞—á–∏ ID: " +
            taskId.substring(0, 5) + // quotes
            "...",
        };
        batch.set(historyRef, historyEntry);
      }

      console.log(
        "[PomoEventHandler] TODO: Implement challenge checks for Pomodoro " +
          "event."
      );

      console.log(
        "[PomoEventHandler] TODO: Implement plant growth for Pomodoro event."
      );

      try {
        await batch.commit();
        console.log(
          "[PomoEventHandler] Gamification & stats updated successfully for " +
            "pomodoro session: " + // quotes
            phaseEventData.sessionId
        );
      } catch (error) {
        console.error(
          "[PomoEventHandler] Error committing batch for pomodoro session " +
            phaseEventData.sessionId + // quotes
            ":",
          error
        );
        throw error;
      }
    }
  );


// ----- FILE: A:\Progects\Progress Quest Universal\progressquest-backend\functions\src\pubsub\taskEventHandlers.ts -----
import {onMessagePublished} from "firebase-functions/v2/pubsub";
import {
  getFirestore,
  FieldValue,
  Timestamp,
  PartialWithFieldValue,
} from "firebase-admin/firestore";
import {
  TASK_EVENTS_TOPIC,
  TASK_STATISTICS_COLLECTION,
  GAMIFICATION_PROFILES_COLLECTION,
  GLOBAL_STATISTICS_COLLECTION,
  GAMIFICATION_HISTORY_COLLECTION,
  commonRuntimeOpts,
  XP_FOR_TASK_COMPLETION,
  COINS_FOR_TASK_COMPLETION,
  TASKS_COLLECTION,
  SUBTASKS_COLLECTION,
  WORKSPACES_COLLECTION,
  DELETED_ENTITIES_COLLECTION,
} from "../config";
import {
  TaskStatisticsDocument,
  GamificationHistoryEntryDocument,
  DeletedEntityDocument,
  TaskDocument,
  WorkspaceDocument,
} from "../types/firestore.types";
import {TaskStatusUpdatedEventData} from "../types/events.types";
import {updateChallengeProgress} from "../gamification/challengeProcessor";
import {
  onDocumentDeleted,
  onDocumentWritten,
} from "firebase-functions/firestore";

const db = getFirestore();

export const onTaskStatusUpdatedProcessGamification = onMessagePublished(
  {topic: TASK_EVENTS_TOPIC, ...commonRuntimeOpts},
  async (event) => {
    if (!event.data.message?.json) {
      console.warn(
        "[TaskEventHandler] PubSub message missing JSON payload.",
        {eventId: event.id}
      );
      return;
    }

    const taskEvent = event.data.message.json as {
      eventType: string;
      data: any;
    };
    if (taskEvent.eventType !== "TASK_STATUS_UPDATED") {
      return;
    }

    const taskEventData = taskEvent.data as TaskStatusUpdatedEventData;
    const {
      taskId,
      userId,
      newStatus,
      oldStatus,
      completedAt,
      taskData,
    } = taskEventData;

    console.log(
      `[TaskEventHandler] Processing event for task: ${taskId}, ` +
      `newStatus: ${newStatus}`
    );

    if (newStatus !== "DONE" || oldStatus === "DONE") {
      console.log(
        `[TaskEventHandler] Task ${taskId} status not 'DONE' or ` +
        "was already 'DONE'. Skipping."
      );
      return;
    }

    const serverWriteTimestamp = FieldValue.serverTimestamp();
    const completionTimestampForWrite = completedAt ?
      Timestamp.fromDate(new Date(completedAt)) :
      serverWriteTimestamp;

    try {
      await db.runTransaction(async (t) => {
        const gamificationProfileRef = db
          .collection(GAMIFICATION_PROFILES_COLLECTION)
          .doc(userId);
        const globalStatsRef = db
          .collection(GLOBAL_STATISTICS_COLLECTION)
          .doc(userId);
        const taskStatsRef = db
          .collection(TASK_STATISTICS_COLLECTION)
          .doc(taskId);
        const historyRef = db
          .collection(GAMIFICATION_HISTORY_COLLECTION)
          .doc();

        const statDoc = await t.get(taskStatsRef);
        const updateData: PartialWithFieldValue<TaskStatisticsDocument> = {
          completionTime: completionTimestampForWrite,
          wasCompletedOnce: true,
          updatedAt: serverWriteTimestamp,
        };
        if (!statDoc.exists || !statDoc.data()?.wasCompletedOnce) {
          updateData.firstCompletionTime = completionTimestampForWrite;
        }
        t.set(taskStatsRef, updateData, {merge: true});

        t.update(gamificationProfileRef, {
          experience: FieldValue.increment(XP_FOR_TASK_COMPLETION),
          coins: FieldValue.increment(COINS_FOR_TASK_COMPLETION),
          lastTaskCompletionTime: Timestamp.fromDate(new Date(event.time)),
        });

        t.update(globalStatsRef, {
          totalTasksCompleted: FieldValue.increment(1),
          lastActive: serverWriteTimestamp,
        });

        const taskTitleSubstring = (
          taskData?.title ?? "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
        ).substring(0, 30);
        const historyEntry: GamificationHistoryEntryDocument = {
          userId,
          timestamp: serverWriteTimestamp,
          eventType: "TASK_COMPLETED",
          xpChange: XP_FOR_TASK_COMPLETION,
          coinsChange: COINS_FOR_TASK_COMPLETION,
          relatedEntityId: taskId,
          relatedEntityType: "task",
          description: `–ó–∞–¥–∞—á–∞ '${taskTitleSubstring}...' –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.`,
        };
        t.set(historyRef, historyEntry);

        await updateChallengeProgress({
          transaction: t,
          userId,
          eventType: "TASK_COMPLETION_COUNT",
          eventValue: 1,
          eventTimestamp: new Date(event.time),
        });
      });
      console.log(
        "[TaskEventHandler] Gamification & stats updated " +
        `successfully for task completion: ${taskId}`
      );
    } catch (error) {
      console.error(
        `[TaskEventHandler] Transaction failed for task completion ${taskId}:`,
        error
      );
      throw error;
    }
  }
);

/**
 * –¢—Ä–∏–≥–≥–µ—Ä –¥–ª—è "–º—è–≥–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è". –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –∫–æ–≥–¥–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ—Ç—Å—è.
 * –°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ deletedEntities.
 */
export const onTaskDocumentDeleted = onDocumentDeleted(
  {...commonRuntimeOpts, document: `${TASKS_COLLECTION}/{taskId}`},
  async (event) => {
    const deletedTaskData = event.data?.data() as TaskDocument | undefined;
    const taskId = event.params.taskId;

    if (!deletedTaskData) {
      console.warn(
        `[onTaskDelete] No data for deleted task ID: ${taskId}. Skipping.`
      );
      return;
    }

    try {
      let parentTeamId: string | null = null;
      if (deletedTaskData.workspaceId) {
        const workspaceDoc = await db
          .collection(WORKSPACES_COLLECTION)
          .doc(deletedTaskData.workspaceId)
          .get();
        if (workspaceDoc.exists) {
          const workspaceData = workspaceDoc.data() as WorkspaceDocument;
          if (!workspaceData.isPersonal) {
            parentTeamId = workspaceData.teamId;
          }
        }
      }

      const softDeleteEntry: DeletedEntityDocument = {
        entityType: "task",
        deletedAt: FieldValue.serverTimestamp(),
        userId: deletedTaskData.creatorUid,
        workspaceId: deletedTaskData.workspaceId,
        teamId: parentTeamId,
      };

      await db
        .collection(DELETED_ENTITIES_COLLECTION)
        .doc(taskId)
        .set(softDeleteEntry);
      console.info(
        `[onTaskDelete] Soft delete entry created for task: ${taskId} ` +
        `with teamId: ${parentTeamId}`
      );
    } catch (error) {
      console.error(
        `[onTaskDelete] Failed to create soft delete entry for task ${taskId}:`,
        error
      );
    }
  }
);

/**
 * –¢—Ä–∏–≥–≥–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –æ–±–Ω–æ–≤–ª—è–µ—Ç `updatedAt` —É —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∑–∞–¥–∞—á–∏
 * –ø—Ä–∏ –ª—é–±–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ (—Å–æ–∑–¥–∞–Ω–∏–∏, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏, —É–¥–∞–ª–µ–Ω–∏–∏) –µ–µ –ø–æ–¥–∑–∞–¥–∞—á–∏.
 */
export const onSubtaskChangeUpdateParentTask = onDocumentWritten(
  {
    ...commonRuntimeOpts,
    document: `${TASKS_COLLECTION}/{taskId}/${SUBTASKS_COLLECTION}/{subtaskId}`,
  },
  async (event) => {
    const parentTaskId = event.params.taskId;
    if (!parentTaskId) {
      return;
    }

    console.debug(
      `[onSubtaskChange] Subtask changed for task ${parentTaskId}. ` +
      "Updating parent timestamp."
    );

    const parentTaskRef = db.collection(TASKS_COLLECTION).doc(parentTaskId);
    try {
      await parentTaskRef.update({updatedAt: FieldValue.serverTimestamp()});
      console.info(
        `[onSubtaskChange] Parent task ${parentTaskId} timestamp updated.`
      );
    } catch (error) {
      console.error(
        `[onSubtaskChange] Failed to update parent task ${parentTaskId} ` +
        "timestamp:",
        error
      );
    }
  }
);


// ----- FILE: A:\Progects\Progress Quest Universal\progressquest-backend\functions\src\pubsub\userEventHandlers.ts -----
import {onMessagePublished} from "firebase-functions/v2/pubsub";
import {
  USER_EVENTS_TOPIC,
  commonRuntimeOpts,
} from "../config";
import {
  UserCreatedEventData,
} from "../types/events.types";

export const onUserCreatedProcessWelcome = onMessagePublished(
  {topic: USER_EVENTS_TOPIC, ...commonRuntimeOpts},
  async (event) => {
    if (!event.data.message?.json) {
      console.warn( // 6 –ø—Ä–æ–±–µ–ª–æ–≤ –æ—Ç –Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–æ–∫–∏ —Ñ—É–Ω–∫—Ü–∏–∏
        "[UserEventHandler] PubSub message for topic " +
        USER_EVENTS_TOPIC +
        " missing JSON payload. Event ID:",
        event.id
      );
      return; // 6 –ø—Ä–æ–±–µ–ª–æ–≤
    }

    const genericEventData = event.data.message.json as {eventType: string};

    switch (genericEventData.eventType) { // 4 –ø—Ä–æ–±–µ–ª–∞
    case "USER_CREATED": { // 6 –ø—Ä–æ–±–µ–ª–æ–≤ –¥–ª—è case, { –Ω–∞ —Ç–æ–π –∂–µ —Å—Ç—Ä–æ–∫–µ
      const userEventData = event.data.message // 8 –ø—Ä–æ–±–µ–ª–æ–≤
        .json as UserCreatedEventData;
      console.log( // 8 –ø—Ä–æ–±–µ–ª–æ–≤
        "[UserEventHandler] Processing USER_CREATED event for userId: " +
            userEventData.userId
      );

      console.log( // 8 –ø—Ä–æ–±–µ–ª–æ–≤
        "[UserEventHandler] Finished processing USER_CREATED for " +
            userEventData.userId +
            ". No additional actions configured for MVP."
      );
      break; // 8 –ø—Ä–æ–±–µ–ª–æ–≤
    } // 6 –ø—Ä–æ–±–µ–ª–æ–≤ –¥–ª—è –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–∏ case
    default: // 6 –ø—Ä–æ–±–µ–ª–æ–≤
      console.warn( // 8 –ø—Ä–æ–±–µ–ª–æ–≤
        "[UserEventHandler] Received unhandled eventType: " +
            genericEventData.eventType +
            " in topic " +
            USER_EVENTS_TOPIC +
            "."
      );
        // break; // –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è default, –µ—Å–ª–∏ –æ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π
    }
  }
);


// ----- FILE: A:\Progects\Progress Quest Universal\progressquest-backend\functions\src\types\api.types.ts -----
import {
  UserDocument,
  AppSettings,
  PomodoroSettings,
  TaskStatusType,
  TaskPriorityType,
  CalendarApproachParams,
  GtdApproachParams,
  EisenhowerApproachParams,
  FrogApproachParams,
  PomodoroSessionType,
  ChallengeScopeType,
  ChallengeRewardType,
  ChallengePeriodType,
  ChallengeEventType,
} from "./firestore.types";

// --- –û–±—â–∏–µ –¢–∏–ø—ã –û—Ç–≤–µ—Ç–æ–≤ ---
export interface SuccessResponse {
  success: boolean;
  message?: string;
  id?: string;
}

// --- 7.1. –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è, –°–µ—Å—Å–∏—è –∏ –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ---
export interface SendPasswordResetEmailPayload {
  email: string;
}

export interface RegisterFcmTokenPayload {
    token: string;
    platform: "android" | "web";
    deviceName?: string;
}

export interface UnregisterFcmTokenPayload {
    token: string;
}

// --- 7.2. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ü—Ä–æ—Ñ–∏–ª–µ–º –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
export interface GetUserProfileResponse {
  userProfile: UserDocument;
}

export interface UpdateUserProfilePayload {
  displayName?: string;
  avatarUrl?: string | null;
}

export interface UpdateUserProfileResponse extends SuccessResponse {
  updatedProfile: UserDocument;
}

// –ò—Å–ø–æ–ª—å–∑—É–µ–º Partial –¥–ª—è —á–∞—Å—Ç–∏—á–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
export type UpdateUserAppSettingsPayload = Partial<AppSettings>;

export interface UpdateUserAppSettingsResponse extends SuccessResponse {
  appSettings: AppSettings;
}

export type UpdateUserPomodoroSettingsPayload = Partial<PomodoroSettings>;

export interface UpdateUserPomodoroSettingsResponse extends SuccessResponse {
  pomodoroSettings: PomodoroSettings;
}

export interface UpdateUserActiveItemsPayload {
  workspaceId?: string | null;
  viewId?: string | null;
}

export interface UpdateUserActiveItemsResponse extends SuccessResponse {
  activeItems: {
    workspaceId?: string | null;
    viewId?: string | null;
  };
}

// --- 7.3. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ö–æ–º–∞–Ω–¥–∞–º–∏ ---
export interface CreateTeamPayload {
  name: string;
  description?: string | null;
  logoUrl?: string | null;
  defaultMemberRole?: "admin" | "editor" | "member" | "viewer";
}
export interface TeamClientDto {
  id: string;
  name: string;
  description: string | null;
  ownerUid: string;
  logoUrl: string | null;
  createdAt: string; // ISO Timestamp
  updatedAt: string; // ISO Timestamp
  settings: {[key: string]: any} | null;
  defaultMemberRole: "admin" | "editor" | "member" | "viewer";
}
export interface CreateTeamResponse {
  team: TeamClientDto;
}
export interface GetUserTeamsResponse {
  teams: {
    teamId: string;
    teamName: string;
    userTeamRole: "owner" | "admin" | "editor" | "member" | "viewer";
  }[];
}
export interface GetTeamDetailsPayload {
  teamId: string;
}
export interface TeamMemberClientDto {
  uid: string;
  displayName: string;
  avatarUrl: string | null;
  role: "owner" | "admin" | "editor" | "member" | "viewer";
  joinedAt: string; // ISO Timestamp
}
export interface GetTeamDetailsResponse {
  team: TeamClientDto;
  members?: TeamMemberClientDto[];
}
export interface UpdateTeamPayload {
  teamId: string;
  name?: string;
  description?: string | null;
  logoUrl?: string | null;
  settings?: {[key: string]: any} | null;
  defaultMemberRole?: string;
}
export interface UpdateTeamResponse extends SuccessResponse {
  updatedTeam: TeamClientDto;
}
export interface DeleteTeamPayload {
  teamId: string;
}
export interface AddTeamMemberPayload {
  teamId: string;
  userEmailOrUid: string;
  role: "admin" | "editor" | "member" | "viewer";
}
export interface AddTeamMemberResponse extends SuccessResponse {
  member: TeamMemberClientDto;
}
export interface UpdateTeamMemberRolePayload {
  teamId: string;
  memberUid: string;
  newRole: "admin" | "editor" | "member" | "viewer";
}
export interface UpdateTeamMemberRoleResponse extends SuccessResponse {
  updatedMember: TeamMemberClientDto;
}
export interface RemoveTeamMemberPayload {
  teamId: string;
  memberUid: string;
}

// --- 7.4. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –†–∞–±–æ—á–∏–º–∏ –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞–º–∏ ---
export interface CreateWorkspacePayload {
  name: string;
  description?: string | null;
  isPersonal: boolean;
  teamId?: string | null;
  activeApproach?: string;
  defaultTags?: string[];
  settings?: {[key: string]: any};
}
export interface WorkspaceClientDto {
  id: string;
  name: string;
  description: string | null;
  ownerUid: string;
  isPersonal: boolean;
  teamId: string | null;
  createdAt: string; // ISO Timestamp
  updatedAt: string; // ISO Timestamp
  activeApproach: string;
  defaultTags: string[];
  settings: {[key: string]: any};
  currentUserWorkspaceRole?:
    | "owner"
    | "admin"
    | "manager"
    | "editor"
    | "member"
    | "viewer"
    | null;
}
export interface CreateWorkspaceResponse {
  workspace: WorkspaceClientDto;
}
export interface GetUserWorkspacesResponse {
  workspaces: WorkspaceClientDto[];
}
export interface GetWorkspaceDetailsPayload {
  workspaceId: string;
}
export interface WorkspaceMemberClientDto {
  uid: string;
  displayName: string;
  avatarUrl: string | null;
  workspaceRole:
    | "owner"
    | "admin"
    | "manager"
    | "editor"
    | "member"
    | "viewer";
  addedAt: string; // ISO Timestamp
}
export interface GetWorkspaceDetailsResponse {
  workspace: WorkspaceClientDto;
  members?: WorkspaceMemberClientDto[];
}
export interface UpdateWorkspacePayload {
  workspaceId: string;
  name?: string;
  description?: string | null;
  activeApproach?: string;
  defaultTags?: string[];
  settings?: {[key: string]: any};
}
export interface UpdateWorkspaceResponse extends SuccessResponse {
  updatedWorkspace: WorkspaceClientDto;
}
export interface DeleteWorkspacePayload {
  workspaceId: string;
}

// --- 7.5. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ó–∞–¥–∞—á–∞–º–∏ ---
export interface TaskApproachParamsClientDto {
  calendar?: CalendarApproachParams;
  gtd?: GtdApproachParams;
  eisenhower?: EisenhowerApproachParams;
  frog?: FrogApproachParams;
}
export interface CreateTaskPayload {
  workspaceId: string;
  title: string;
  description?: string | null;
  dueDate?: string | number | null;
  priority?: TaskPriorityType;
  assigneeUid?: string | null;
  tags?: string[];
  approachParams?: TaskApproachParamsClientDto | null;
  pomodoroEstimatedMinutes?: number | null;
}
export interface TaskClientDto {
  id: string;
  title: string;
  description: string | null;
  status: TaskStatusType;
  priority: TaskPriorityType;
  dueDate: string | null; // ISO Timestamp
  createdAt: string; // ISO Timestamp
  updatedAt: string; // ISO Timestamp
  completedAt: string | null; // ISO Timestamp
  creatorUid: string;
  assigneeUid: string | null;
  workspaceId: string;
  tags: string[];
  pomodoroEstimatedCycles: number | null;
  pomodoroEstimatedMinutes: number | null;
  approachParams: TaskApproachParamsClientDto | null;
  orderInList: number;
}
export interface CreateTaskResponse {
  task: TaskClientDto;
}
export interface GetTasksPayload {
  viewId?: string | null;
  workspaceId?: string;
  filters?: ViewFiltersClientDto | null;
  sortBy?: string;
  sortDirection?: "asc" | "desc";
}
export interface GetTasksResponse {
  tasks: TaskClientDto[];
}
export interface GetTaskDetailsPayload {
  taskId: string;
}
export interface SubtaskClientDto {
  id: string;
  title: string;
  completed: boolean;
  order: number;
  createdAt: string; // ISO Timestamp
}
export interface CommentClientDto {
  id: string;
  authorUid: string;
  authorName: string;
  authorAvatarUrl: string | null;
  text: string;
  createdAt: string; // ISO
  updatedAt: string | null; // ISO
}
export interface GetTaskDetailsResponse {
  task: TaskClientDto;
  subtasks?: SubtaskClientDto[];
  comments?: CommentClientDto[];
}
export interface UpdateTaskPayload {
  taskId: string;
  title?: string;
  description?: string | null;
  status?: TaskStatusType;
  priority?: TaskPriorityType;
  dueDate?: string | number | null;
  assigneeUid?: string | null;
  tags?: string[];
  approachParams?: TaskApproachParamsClientDto | null;
  pomodoroEstimatedMinutes?: number | null;
}
export interface UpdateTaskResponse extends SuccessResponse {
  updatedTask: TaskClientDto;
}
export interface DeleteTaskPayload {
  taskId: string;
}
export interface CreateCommentPayload {
  taskId: string;
  text: string;
}
export interface CreateCommentResponse {
  comment: CommentClientDto;
}

// --- 7.6. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Pomodoro-—Å–µ—Å—Å–∏—è–º–∏ ---
export interface StartPomodoroPhasePayload {
  taskId: string;
  workspaceId: string;
  sessionType: PomodoroSessionType;
  plannedDurationSeconds: number;
  phaseNumberInCycle?: number;
  totalFocusSessionIndex?: number;
}
export interface StartPomodoroPhaseResponse {
  sessionId: string;
}
export interface CompletePomodoroPhasePayload {
  sessionId: string;
  actualDurationSeconds: number;
  interruptions: number;
  completed: boolean;
}

// --- 7.7. –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ---
export interface GamificationProfileClientDto {
  level: number;
  experience: number;
  coins: number;
  maxExperienceForLevel: number;
  currentStreak: number;
  lastClaimedDate: string;
  maxStreak: number;
  selectedPlantId: string | null;
  lastPomodoroCompletionTime: string | null;
  lastTaskCompletionTime: string | null;
}
export interface GetGamificationProfileResponse {
  profile: GamificationProfileClientDto;
}

export interface RewardClientDto {
  type: ChallengeRewardType;
  value: string;
  badgeName?: string | null;
  badgeImageUrl?: string | null;
}

// --- –ó–Ω–∞—á–∫–∏ ---
export interface BadgeDefinitionClientDto {
    id: string;
    name: string;
    description: string;
    imageUrl: string;
    criteria: string;
    rewardXp?: number;
    rewardCoins?: number;
    isHidden?: boolean;
}

export interface GetAllBadgeDefinitionsResponseDto {
    badges: BadgeDefinitionClientDto[];
}

export interface EarnedBadgeClientDto {
  badgeDefinitionId: string;
  earnedAt: string; // ISO
  name: string;
  imageUrl: string;
  criteria: string;
}
export interface GetBadgesResponse {
  badges: EarnedBadgeClientDto[];
}

export interface CreateCustomChallengePayload {
  name: string;
  description: string;
  period: ChallengePeriodType;
  type: ChallengeEventType;
  targetValue: number;
  reward: {
    type: ChallengeRewardType;
    value: string;
    badgeName?: string | null;
    badgeImageUrl?: string | null;
  };
  conditionJson?: string | null;
}
export interface ChallengeDefinitionClientDto {
  id: string;
  name: string;
  description: string;
  creatorUid: string | "system";
  scope: ChallengeScopeType;
  targetEntityId: string | null;
  isPublicTemplate: boolean;
  reward: {
    type: ChallengeRewardType;
    value: string;
    badgeName?: string | null;
    badgeImageUrl?: string | null;
  };
  period: ChallengePeriodType;
  type: ChallengeEventType;
  targetValue: number;
  conditionJson: string | null;
  isActiveSystemChallenge?: boolean;
  createdAt: string;
  updatedAt: string;
  currentUserProgress?: {
    progress: {[key: string]: number} | number;
    isCompleted: boolean;
  };
}

export interface CreateChallengeResponse {
  challenge: ChallengeDefinitionClientDto;
}

export interface GetChallengesResponse {
  challenges: ChallengeDefinitionClientDto[];
}

export interface UpdateCustomChallengePayload
  extends Partial<Omit<CreateCustomChallengePayload, "type">> {
  challengeDefId: string;
}

export interface DeleteChallengePayload {
  challengeDefId: string;
}

// –ù–æ–≤—ã–µ DTO –¥–ª—è —Å–∞–¥–∞ –∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã
export interface ClaimDailyRewardResponseDto extends SuccessResponse {
  rewardReceived: RewardClientDto;
  newStreak: number;
  newXp: number;
  newCoins: number;
}

// --- –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Å–∞–¥ ---
export interface VirtualPlantClientDto {
    id: string;
    plantType: string;
    growthStage: number;
    growthPoints: number;
    lastWateredAt: string; // ISO
    createdAt: string; // ISO
}

export interface GetVirtualGardenResponse {
    plants: VirtualPlantClientDto[];
    selectedPlantId: string | null;
}

export interface SelectPlantRequestPayload {
    plantInstanceId: string;
}

export interface WaterPlantRequestPayload {
  plantInstanceId?: string | null;
}

export interface WaterPlantResponseDto extends SuccessResponse {
  updatedPlants: VirtualPlantClientDto[];
  growthPointsAdded?: { [plantInstanceId: string]: number };
}

// --- –ú–∞–≥–∞–∑–∏–Ω ---
export interface StoreItemClientDto {
    id: string;
    name: string;
    description: string;
    costInCoins: number;
    category: string;
    itemValue: string;
    imageUrl: string;
    isAvailable: boolean;
}

export interface GetStoreItemsResponse {
    items: StoreItemClientDto[];
}

export interface PurchaseStoreItemPayload {
    itemId: string;
}

export interface PurchaseStoreItemResponse extends SuccessResponse {
  remainingCoins: number;
  itemReceived: StoreItemClientDto;
}

// --- 7.8. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ "–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è–º–∏" ---
export interface DateRangeFilterClientDto {
  start?: string | number | null;
  end?: string | number | null;
  type: "due" | "created" | "completed";
}
export interface ViewFiltersClientDto {
  status?: TaskStatusType[];
  priority?: TaskPriorityType[];
  tagsInclude?: string[];
  tagsExclude?: string[];
  dateRange?: DateRangeFilterClientDto | null;
  assignee?: "me" | "unassigned" | string | null;
}
export interface CreateUserViewPayload {
  name: string;
  workspaceIds: string[];
  filters?: ViewFiltersClientDto | null;
  sortBy?: string;
  sortDirection?: "asc" | "desc";
  isDefault?: boolean;
}
export interface UserViewClientDto {
  id: string;
  uid: string;
  name: string;
  workspaceIds: string[];
  filters: ViewFiltersClientDto | null;
  sortBy: string | null;
  sortDirection: "asc" | "desc" | null;
  isDefault: boolean;
  createdAt: string; // ISO
  updatedAt: string; // ISO
}
export interface CreateUserViewResponse {
  view: UserViewClientDto;
}
export interface GetUserViewsResponse {
  views: UserViewClientDto[];
}
export interface GetUserViewDetailsPayload {
  viewId: string;
}
export interface GetUserViewDetailsResponse {
  view: UserViewClientDto;
}
export interface UpdateUserViewPayload extends Partial<CreateUserViewPayload> {
  viewId: string;
}
export interface UpdateUserViewResponse extends SuccessResponse {
  updatedView: UserViewClientDto;
}
export interface DeleteUserViewPayload {
  viewId: string;
}
export interface SetDefaultViewPayload {
  viewId: string;
}
export interface GetAggregatedTasksFromViewPayload {
  viewId: string;
  dateFilter?: "today" | "this_week" | "this_month" | null;
}

export interface UpdateTaskStatusPayload {
  taskId: string;
  newStatus: TaskStatusType;
  workspaceId: string;
}


// --- –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –û–ø–µ—Ä–∞—Ü–∏–∏ ---
interface GuestTaskDto {
  localId: string;
  title: string;
  description?: string | null;
  priority: TaskPriorityType;
  dueDate?: string | number | null;
  pomodoroEstimatedMinutes?: number | null;
  tags?: string[];
}

interface GuestWorkspaceDto {
  localId: string;
  name: string;
  description?: string | null;
  activeApproach: string;
  tasks: GuestTaskDto[];
}

export interface MigrateGuestDataPayload {
  workspaces: GuestWorkspaceDto[];
}

export interface MigrateGuestDataResponse extends SuccessResponse {
  idMappings: {
    workspaces: Record<string, string>;
    tasks: Record<string, string>;
  };
}


// --- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ---
export interface GetTaskStatisticsPayload {
  taskId: string;
}

export interface TaskStatisticsClientDto {
  completionTime: string | null; // ISO 8601
  timeSpentSeconds: number;
  totalPomodoroFocusSeconds: number;
  completedPomodoroFocusSessions: number;
  totalPomodoroInterrupts: number;
  wasCompletedOnce: boolean;
  firstCompletionTime: string | null;
  updatedAt: string; // ISO 8601
}

export interface GetTaskStatisticsResponse {
  statistics: TaskStatisticsClientDto;
}

export interface GetGamificationHistoryPayload {
  limit?: number;
  startAfterEntryId?: string | null;
}

export interface GamificationHistoryEntryClientDto {
  id: string;
  timestamp: string; // ISO 8601
  eventType: string;
  xpChange: number;
  coinsChange: number;
  relatedEntityCloudId: string | null;
  relatedEntityType: "task" | "challenge" | "badge" | "plant" | null;
  description: string | null;
}

export interface GetGamificationHistoryResponse {
  history: GamificationHistoryEntryClientDto[];
  nextPageToken: string | null;
}

export interface StatsTrendRequestPayload {
  startDate: string;
  endDate: string;
}


export interface DateValuePointClientDto {
  date: string; // YYYY-MM-DD
  value: number;
}

export interface DayOfWeekValuePointClientDto {
  dayOfWeek: number; // 1 (–ü–Ω) - 7 (–í—Å)
  value: number;
}

export interface StatsPeriodSummaryClientDto {
  startDate: string; // YYYY-MM-DD
  endDate: string; // YYYY-MM-DD
  taskCompletionTrend?: DateValuePointClientDto[];
  pomodoroFocusTrend?: DateValuePointClientDto[];
  xpGainTrend?: DateValuePointClientDto[];
  coinGainTrend?: DateValuePointClientDto[];
  tasksCompletedByDayOfWeek?: DayOfWeekValuePointClientDto[];
  totalTasksCompletedInPeriod?: number;
  totalPomodoroMinutesInPeriod?: number;
  averageDailyPomodoroMinutes?: number;
  totalXpGainedInPeriod?: number;
  totalCoinsGainedInPeriod?: number;
  mostProductiveDayInPeriod?: string | null;
  averageTasksPerDayInPeriod?: number;
}

export interface GetGlobalStatisticsResponse {
    statistics: {
        userId: string;
        totalPersonalWorkspacesCreated: number;
        totalTeamWorkspacesMemberOf: number;
        totalTasksCreated: number;
        totalTasksCompleted: number;
        totalPomodoroFocusMinutes: number;
        totalTimeSpentMinutesOverall: number;
        lastActive: string; // ISO
        registrationDate: string; // ISO
    };
}

/**
 * Payload –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –ø–æ–¥–∑–∞–¥–∞—á–∏.
 */
export interface CreateSubtaskPayload {
  parentTaskId: string;
  title: string;
  order?: number;
}

/**
 * Payload –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–∑–∞–¥–∞—á–∏.
 */
export interface UpdateSubtaskPayload {
  parentTaskId: string;
  subtaskId: string;
  title?: string;
  completed?: boolean;
  order?: number;
}

/**
 * Payload –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–∑–∞–¥–∞—á–∏.
 */
export interface DeleteSubtaskPayload {
  parentTaskId: string;
  subtaskId: string;
}


// === DTO –¥–ª—è –î–µ–ª—å—Ç–∞-–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ó–∞–¥–∞—á ===

/**
 * Payload –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ –∑–∞–¥–∞—á–∞–º.
 */
export interface GetTaskChangesPayload {
  since: string;
  workspaceIds: string[];
}

/**
 * DTO –æ—Ç–≤–µ—Ç–∞ —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –ø–æ –∑–∞–¥–∞—á–∞–º.
 */
export interface GetTaskChangesResponse {
  updatedTasks: TaskClientDto[];
  deletedTaskCloudIds: string[];
  serverTimestamp: string;
}


// ----- FILE: A:\Progects\Progress Quest Universal\progressquest-backend\functions\src\types\events.types.ts -----
import {
  TaskDocument,
  TaskStatusType,
  PomodoroSessionType,
  ChallengeScopeType,
  ChallengeRewardType,
  TeamMemberDocument,
  WorkspaceMemberDocument,
  GamificationHistoryEventType,
  WorkspaceDocument,
  TeamDocument,
  UserDocument,
} from "./firestore.types";

export interface BaseEvent {
  eventType: string;
  eventTimestamp: string;
  traceId?: string; // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–ª—è —Å–∫–≤–æ–∑–Ω–æ–π —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
}

// --- 1. User Events (–¢–æ–ø–∏–∫: user-events) ---
export interface UserCreatedEventData {
  userId: string;
  email?: string | null;
  displayName?: string | null;
}
export interface UserCreatedEvent extends BaseEvent {
  eventType: "USER_CREATED";
  data: UserCreatedEventData;
}

export interface UserProfileUpdatedEventData {
  userId: string;
  updatedFields: Array<keyof UserDocument>;
}
export interface UserProfileUpdatedEvent extends BaseEvent {
  eventType: "USER_PROFILE_UPDATED";
  data: UserProfileUpdatedEventData;
}

export interface UserDeletedEventData {
  userId: string;
}
export interface UserDeletedEvent extends BaseEvent {
  eventType: "USER_DELETED";
  data: UserDeletedEventData;
}

// --- 2. Team Events (–¢–æ–ø–∏–∫: team-events) ---
export interface TeamEventBaseData {
  teamId: string;
}

export interface TeamCreatedEventData extends TeamEventBaseData {
  ownerUid: string;
  teamName: string;
}
export interface TeamCreatedEvent extends BaseEvent {
  eventType: "TEAM_CREATED";
  data: TeamCreatedEventData;
}

export interface TeamUpdatedEventData extends TeamEventBaseData {
  updatedFields: Array<keyof TeamDocument>;
}
export interface TeamUpdatedEvent extends BaseEvent {
  eventType: "TEAM_UPDATED";
  data: TeamUpdatedEventData;
}

export type TeamDeletedEventData = TeamEventBaseData;
export interface TeamDeletedEvent extends BaseEvent {
  eventType: "TEAM_DELETED";
  data: TeamDeletedEventData;
}

export interface TeamMemberAddedEventData extends TeamEventBaseData {
  userId: string;
  userTeamRole: TeamMemberDocument["role"];
  addedByUid: string;
}
export interface TeamMemberAddedEvent extends BaseEvent {
  eventType: "TEAM_MEMBER_ADDED";
  data: TeamMemberAddedEventData;
}

export interface TeamMemberRemovedEventData extends TeamEventBaseData {
  userId: string;
  removedByUid: string;
}
export interface TeamMemberRemovedEvent extends BaseEvent {
  eventType: "TEAM_MEMBER_REMOVED";
  data: TeamMemberRemovedEventData;
}

export interface TeamMemberRoleUpdatedEventData extends TeamEventBaseData {
  userId: string;
  newTeamRole: TeamMemberDocument["role"];
  oldTeamRole: TeamMemberDocument["role"];
  updatedByUid: string;
}
export interface TeamMemberRoleUpdatedEvent extends BaseEvent {
  eventType: "TEAM_MEMBER_ROLE_UPDATED";
  data: TeamMemberRoleUpdatedEventData;
}

// --- 3. Workspace Events (–¢–æ–ø–∏–∫: workspace-events) ---
export interface WorkspaceEventBaseData {
  workspaceId: string;
}

export interface WorkspaceCreatedEventData extends WorkspaceEventBaseData {
  ownerUid: string;
  teamId: string | null;
  isPersonal: boolean;
  workspaceName: string;
}
export interface WorkspaceCreatedEvent extends BaseEvent {
  eventType: "WORKSPACE_CREATED";
  data: WorkspaceCreatedEventData;
}

export interface WorkspaceUpdatedEventData extends WorkspaceEventBaseData {
  updatedFields: Array<keyof WorkspaceDocument>;
  updatedByUid: string;
}
export interface WorkspaceUpdatedEvent extends BaseEvent {
  eventType: "WORKSPACE_UPDATED";
  data: WorkspaceUpdatedEventData;
}

export interface WorkspaceDeletedEventData extends WorkspaceEventBaseData {
  teamId: string | null;
  deletedByUid: string;
}
export interface WorkspaceDeletedEvent extends BaseEvent {
  eventType: "WORKSPACE_DELETED";
  data: WorkspaceDeletedEventData;
}

export interface WorkspaceMemberAddedEventData extends WorkspaceEventBaseData {
  userId: string;
  workspaceRole: WorkspaceMemberDocument["workspaceRole"];
  teamId: string | null;
  addedByUid: string;
}
export interface WorkspaceMemberAddedEvent extends BaseEvent {
  eventType: "WORKSPACE_MEMBER_ADDED";
  data: WorkspaceMemberAddedEventData;
}

// --- 4. Task Events (–¢–æ–ø–∏–∫: task-events) ---
export interface TaskEventBaseData {
  taskId: string;
  workspaceId: string;
}

export interface TaskCreatedEventData extends TaskEventBaseData {
  creatorUid: string;
  assigneeUid: string | null;
  title: string;
}
export interface TaskCreatedEvent extends BaseEvent {
  eventType: "TASK_CREATED";
  data: TaskCreatedEventData;
}

export interface TaskUpdatedEventData extends TaskEventBaseData {
  updaterUid: string;
  changedFields: Partial<TaskDocument>;
  previousValues?: Partial<TaskDocument>;
}
export interface TaskUpdatedEvent extends BaseEvent {
  eventType: "TASK_UPDATED";
  data: TaskUpdatedEventData;
}

export interface TaskStatusUpdatedEventData {
  taskId: string;
  workspaceId: string;
  userId: string;
  newStatus: TaskStatusType;
  oldStatus?: TaskStatusType;
  completedAt?: string;
  taskData?: Partial<
    Pick<TaskDocument, "title" | "assigneeUid" | "creatorUid">
  >;
}
export interface TaskStatusUpdatedEventMessage extends BaseEvent {
  eventType: "TASK_STATUS_UPDATED";
  data: TaskStatusUpdatedEventData;
}

export interface TaskDeletedEventData extends TaskEventBaseData {
  deleterUid: string;
}
export interface TaskDeletedEvent extends BaseEvent {
  eventType: "TASK_DELETED";
  data: TaskDeletedEventData;
}

export interface TaskAssignedEventData extends TaskEventBaseData {
  newAssigneeUid: string | null;
  oldAssigneeUid: string | null;
  assignerUid: string;
}
export interface TaskAssignedEvent extends BaseEvent {
  eventType: "TASK_ASSIGNED";
  data: TaskAssignedEventData;
}

export interface TaskCommentAddedEventData extends TaskEventBaseData {
  commentId: string;
  authorUid: string;
  text: string;
}
export interface TaskCommentAddedEvent extends BaseEvent {
  eventType: "TASK_COMMENT_ADDED";
  data: TaskCommentAddedEventData;
}

// --- 5. Pomodoro Events (–¢–æ–ø–∏–∫: pomodoro-events) ---
export interface PomodoroPhaseStartedEventData {
  sessionId: string;
  userId: string;
  taskId: string;
  workspaceId: string;
  phaseType: PomodoroSessionType;
  plannedDurationSeconds: number;
  phaseNumberInCycle: number;
  totalFocusSessionIndex: number;
  startTime: string;
}
export interface PomodoroPhaseStartedEvent extends BaseEvent {
  eventType: "POMODORO_PHASE_STARTED";
  data: PomodoroPhaseStartedEventData;
}

export interface PomodoroPhaseCompletedEventData {
  sessionId: string;
  userId: string;
  taskId: string;
  workspaceId: string;
  phaseType: PomodoroSessionType;
  plannedDurationSeconds: number;
  actualDurationSeconds: number;
  interruptions: number;
  completed: boolean;
  phaseStartTime: string;
  completionTime: string;
}
export interface PomodoroPhaseCompletedEventMessage extends BaseEvent {
  eventType: "POMODORO_PHASE_COMPLETED";
  data: PomodoroPhaseCompletedEventData;
}

// --- 6. Gamification Events (–¢–æ–ø–∏–∫: gamification-events, –µ—Å–ª–∏ –Ω—É–∂–µ–Ω) ---
export interface PointsAwardedEventData {
  userId: string;
  xpAmount?: number;
  coinsAmount?: number;
  reason: GamificationHistoryEventType;
  relatedEntityId?: string | null;
  relatedEntityType?: string | null;
}
export interface PointsAwardedEvent extends BaseEvent {
  eventType: "POINTS_AWARDED";
  data: PointsAwardedEventData;
}

export interface LevelUpEventData {
  userId: string;
  newLevel: number;
  oldLevel: number;
}
export interface LevelUpEvent extends BaseEvent {
  eventType: "LEVEL_UP";
  data: LevelUpEventData;
}

export interface BadgeEarnedEventData {
  userId: string;
  badgeDefinitionId: string;
  badgeName: string;
}
export interface BadgeEarnedEvent extends BaseEvent {
  eventType: "BADGE_EARNED";
  data: BadgeEarnedEventData;
}

export interface ChallengeProgressUpdateData {
  challengeDefinitionId: string;
  progress: {[key: string]: number} | number;
  isCompleted: boolean;
}
export interface ChallengeProgressUpdatedEventData {
  userId: string;
  challenge: ChallengeProgressUpdateData;
  scope: ChallengeScopeType;
  targetEntityId?: string | null;
}
export interface ChallengeProgressUpdatedEvent extends BaseEvent {
  eventType: "CHALLENGE_PROGRESS_UPDATED";
  data: ChallengeProgressUpdatedEventData;
}

export interface ChallengeCompletedEventData {
  userId: string;
  challengeDefinitionId: string;
  challengeName: string;
  scope: ChallengeScopeType;
  targetEntityId?: string | null;
  rewardApplied?: {type: ChallengeRewardType; value: string};
}
export interface ChallengeCompletedEvent extends BaseEvent {
  eventType: "CHALLENGE_COMPLETED";
  data: ChallengeCompletedEventData;
}

export interface PlantGrownStageUpEventData {
  userId: string;
  plantInstanceId: string;
  newStage: number;
  plantType: string;
}
export interface PlantGrownStageUpEvent extends BaseEvent {
  eventType: "PLANT_GROWN_STAGE_UP";
  data: PlantGrownStageUpEventData;
}


// ----- FILE: A:\Progects\Progress Quest Universal\progressquest-backend\functions\src\types\firestore.types.ts -----
import {FieldValue, Timestamp} from "firebase-admin/firestore";

export interface AppSettings {
  theme: "SYSTEM" | "LIGHT" | "DARK";
  dynamicColorEnabled: boolean;
  notificationsEnabled: boolean;
  taskNotifications?: boolean;
  pomodoroNotifications?: boolean;
  gamificationNotifications?: boolean;
}

export interface PomodoroSettings {
  focusDurationMinutes: number;
  shortBreakMinutes: number;
  longBreakMinutes: number;
  intervalBeforeLongBreak: number;
  autoStartFocus?: boolean;
  autoStartBreak?: boolean;
  focusSoundUri: string | null;
  breakSoundUri: string | null;
  vibrationEnabled: boolean;
}

export interface TeamMembershipEntry {
  teamId: string;
  teamName: string;
  userTeamRole: "owner" | "admin" | "editor" | "member" | "viewer";
}

export interface UserDocument {
  uid: string;
  email: string;
  displayName: string;
  avatarUrl: string | null;
  createdAt: Timestamp | FieldValue;
  lastLoginAt: Timestamp | FieldValue;
  personalWorkspaceId: string;
  activeItems: {
    workspaceId?: string | null;
    viewId?: string | null;
  };
  defaultViewId: string | null;
  appSettings: AppSettings;
  pomodoroSettings: PomodoroSettings;
  teamMemberships?: TeamMembershipEntry[];
}

export interface TeamDocument {
  name: string;
  description: string | null;
  ownerUid: string;
  logoUrl: string | null;
  createdAt: Timestamp | FieldValue;
  updatedAt: Timestamp | FieldValue;
  settings: {[key: string]: any} | null;
  defaultMemberRole: "admin" | "editor" | "member" | "viewer";
}

export interface TeamMemberDocument {
  uid: string;
  displayName: string;
  avatarUrl: string | null;
  role: "owner" | "admin" | "editor" | "member" | "viewer";
  joinedAt: Timestamp | FieldValue;
}

export interface WorkspaceDocument {
  name: string;
  description: string | null;
  ownerUid: string;
  isPersonal: boolean;
  teamId: string | null;
  createdAt: Timestamp | FieldValue;
  updatedAt: Timestamp | FieldValue;
  activeApproach: string;
  defaultTags: string[];
  settings: {
    allowMembersToCreateTasks?: boolean;
    taskVisibility?: "all_visible" | "assigned_only";
    pomodoroOverrides?: PomodoroSettings | null;
    [key: string]: any;
  };
  lastClientSyncTimestamp: Timestamp | null;
  syncStatus: "synced" | "pending_upload" | "pending_download" |
              "error" | null;
}

export interface WorkspaceMemberDocument {
  uid: string;
  displayName: string;
  avatarUrl: string | null;
  workspaceRole: "owner" | "admin" | "manager" | "editor" |
                 "member" | "viewer";
  addedAt: Timestamp | FieldValue;
}

export type TaskStatusType = "TODO" | "IN_PROGRESS" | "DONE";
export type TaskPriorityType = "LOW" | "MEDIUM" | "HIGH" | "CRITICAL";
export type FrogDifficultyType = "EASY" | "MEDIUM" | "HARD";

export interface CalendarApproachParams {
  eventId: string | null;
  isAllDay: boolean;
  recurrenceRule: string | null;
}
export interface GtdApproachParams {
  context: string | null;
  nextAction: boolean;
  projectLink: string | null;
  waitingFor: string | null;
}
export interface EisenhowerApproachParams {
  urgency: number;
  importance: number;
}
export interface FrogApproachParams {
  isFrog: boolean;
  difficulty: FrogDifficultyType;
}

export interface TaskDocument {
  title: string;
  description: string | null;
  status: TaskStatusType;
  priority: TaskPriorityType;
  dueDate: Timestamp | null;
  createdAt: Timestamp | FieldValue;
  updatedAt: Timestamp | FieldValue;
  completedAt: Timestamp | null;
  creatorUid: string;
  assigneeUid: string | null;
  workspaceId: string;
  tags: string[];
  pomodoroEstimatedCycles: number | null;
  pomodoroEstimatedMinutes: number | null;
  approachParams: {
    calendar?: CalendarApproachParams;
    gtd?: GtdApproachParams;
    eisenhower?: EisenhowerApproachParams;
    frog?: FrogApproachParams;
  } | null;
  orderInList: number;
  lastSyncClientTimestamp: Timestamp | null;
  localId: string | null;
}

export interface SubtaskDocument {
  title: string;
  completed: boolean;
  order: number;
  createdAt: Timestamp | FieldValue;
}

export interface CommentDocument {
  authorUid: string;
  authorName: string;
  authorAvatarUrl: string | null;
  text: string;
  createdAt: Timestamp | FieldValue;
  updatedAt: Timestamp | FieldValue | null;
}

export type PomodoroSessionType = "FOCUS" | "SHORT_BREAK" | "LONG_BREAK";

export interface PomodoroSessionDocument {
  userId: string;
  taskId: string;
  workspaceId: string;
  startTime: Timestamp | FieldValue;
  sessionType: PomodoroSessionType;
  plannedDurationSeconds: number;
  actualDurationSeconds: number;
  interruptions: number;
  completed: boolean;
  phaseNumberInCycle: number;
  totalFocusSessionIndex: number;
  updatedAt: Timestamp | FieldValue;
}

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ñ–∏–ª—å –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * –ü—É—Ç—å: /gamificationProfiles/{userUID}
 */
export interface GamificationProfileDocument {
  level: number;
  experience: number;
  coins: number;
  maxExperienceForLevel: number;
  currentStreak: number;
  lastClaimedDate: Timestamp;
  maxStreak: number;
  selectedPlantInstanceId: string | null; // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–∑–º–µ–Ω–µ–Ω
  lastPomodoroCompletionTime: Timestamp | null;
  lastTaskCompletionTime: Timestamp | null;
}

/**
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞—á–∫–∞.
 * –ü—É—Ç—å: /badgeDefinitions/{badgeDefId}
 */
export interface BadgeDefinitionDocument {
    name: string;
    description: string;
    imageUrl: string;
    criteriaText: string;
    rewardXp: number;
    rewardCoins: number;
    isHidden: boolean;
}

/**
 * –î–æ–∫—É–º–µ–Ω—Ç –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–Ω–∞—á–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
 * –ü—É—Ç—å: /gamificationProfiles/{userUID}/earnedBadges/{badgeDefId}
 */
export interface EarnedBadgeDocument {
  badgeDefinitionId: string;
  earnedAt: Timestamp;
  name: string;
  imageUrl: string;
  criteria: string;
}

// –ü–µ—Ä–≤–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ ChallengeDefinitionDocument —É–¥–∞–ª–µ–Ω–æ

/**
 * –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —á–µ–ª–ª–µ–Ω–¥–∂—É.
 * –ü—É—Ç—å: /gamificationProfiles/{userUID}/challengeProgress/{challengeDefId}
 */
export interface ChallengeProgressDocument {
  challengeDefinitionId: string;
  progress: {[key: string]: number} | number;
  isCompleted: boolean;
  lastUpdated: Timestamp | FieldValue;
  completedAt: Timestamp | null;
}

/**
 * –î–æ–∫—É–º–µ–Ω—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è –≤ —Å–∞–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * –ü—É—Ç—å: /gamificationProfiles/{userUID}/virtualGarden/{plantInstanceId}
 */
export interface VirtualPlantDocument {
  plantType: string;
  growthStage: number;
  growthPoints: number;
  lastWateredAt: Timestamp;
  createdAt: Timestamp | FieldValue;
}

/**
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ.
 * –ü—É—Ç—å: /storeItems/{itemId}
 */
export interface StoreItemDocument {
    name: string;
    description: string;
    costInCoins: number;
    category: "PLANT_SEED" | "PLANT_FOOD" | "COSMETIC";
    itemValue: string;
    imageUrl: string;
    isAvailable: boolean;
}
export interface TaskStatisticsDocument {
  completionTime: Timestamp | null;
  timeSpentSeconds: number;
  totalPomodoroFocusSeconds: number;
  completedPomodoroFocusSessions: number;
  totalPomodoroInterrupts: number;
  wasCompletedOnce: boolean;
  firstCompletionTime: Timestamp | null;
  updatedAt: Timestamp | FieldValue;
}

export interface GlobalStatisticsDocument {
  userId: string;
  totalPersonalWorkspacesCreated: number;
  totalTeamWorkspacesMemberOf: number;
  totalTasksCreated: number;
  totalTasksCompleted: number;
  totalPomodoroFocusMinutes: number;
  totalTimeSpentMinutesOverall: number;
  lastActive: Timestamp | FieldValue;
  registrationDate: Timestamp;
}

export type GamificationHistoryEventType =
  | "TASK_COMPLETED" | "POMODORO_FOCUS_PHASE" | "DAILY_REWARD_CLAIMED"
  | "CHALLENGE_COMPLETED" | "BADGE_EARNED" | "PLANT_WATERED" | "LEVEL_UP"
  | "CUSTOM_CHALLENGE_COMPLETED";

export interface GamificationHistoryEntryDocument {
  userId: string;
  timestamp: Timestamp | FieldValue;
  eventType: GamificationHistoryEventType;
  xpChange: number;
  coinsChange: number;
  relatedEntityId: string | null;
  relatedEntityType: "task" | "challenge" | "badge" | "plant" | null;
  description: string | null;
}

export interface DateRangeFilter {
  start: Timestamp | null;
  end: Timestamp | null;
  type: "due" | "created" | "completed";
}

export interface UserViewDocument {
  uid: string;
  name: string;
  workspaceIds: string[];
  filters: {
    status?: TaskStatusType[];
    priority?: TaskPriorityType[];
    tagsInclude?: string[];
    tagsExclude?: string[];
    dateRange?: DateRangeFilter | null;
    assignee?: "me" | "unassigned" | string | null;
  } | null;
  sortBy: string;
  sortDirection: "asc" | "desc";
  isDefault: boolean;
  createdAt: Timestamp | FieldValue;
  updatedAt: Timestamp | FieldValue;
}

export type ChallengeScopeType = "personal" | "team" | "workspace";
export type ChallengeRewardType = "XP" | "COINS" | "BADGE_ID" | "TEXT";
export type ChallengePeriodType = "ONCE" | "DAILY" | "WEEKLY" | "MONTHLY";
export type ChallengeEventType =
  | "TASK_COMPLETION_COUNT" | "POMODORO_FOCUS_MINUTES" | "LOGIN_STREAK"
  | "POMODORO_SESSION_COUNT"
  | "CUSTOM_EVENT" | "BADGE_COUNT" | "PLANT_MAX_STAGE"
  | "LEVEL_REACHED" | "RESOURCE_ACCUMULATED";

/**
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–µ–ª–ª–µ–Ω–¥–∂–∞.
 * –ü—É—Ç—å: /challengeDefinitions/{challengeDefId}
 */
export interface ChallengeDefinitionDocument { // –≠—Ç–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–µ—Ç—Å—è
  name: string;
  description: string;
  creatorUid: string | "system";
  scope: ChallengeScopeType;
  targetEntityId: string | null;
  isPublicTemplate: boolean;
  reward: {
    type: ChallengeRewardType;
    value: string;
    badgeName?: string | null;
    badgeImageUrl?: string | null;
  };
  period: ChallengePeriodType;
  type: ChallengeEventType;
  targetValue: number;
  conditionJson: string | null;
  isActiveSystemChallenge?: boolean;
  createdAt: Timestamp | FieldValue;
  updatedAt: Timestamp | FieldValue;
}

export interface ActiveItems {
  workspaceId?: string | null;
  viewId?: string | null;
}

// –ù–æ–≤–∞—è —Å—É—â–Ω–æ—Å—Ç—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è FCM —Ç–æ–∫–µ–Ω–æ–≤
export interface FcmTokenDocument {
    token: string;
    platform: "android" | "web" | "unknown";
    createdAt: Timestamp;
    lastUsedAt: Timestamp;
}


export interface DeletedEntityDocument {
  entityType: "task" | "subtask" | "workspace" | "view" | "team";
  deletedAt: Timestamp | FieldValue;
  userId?: string | null;
  workspaceId?: string | null;
  teamId?: string | null;
}


// ----- FILE: A:\Progects\Progress Quest Universal\progressquest-backend\functions\src\types\index.ts -----
export * from "./firestore.types";
export * from "./api.types";
export * from "./events.types";


// ----- FILE: A:\Progects\Progress Quest Universal\progressquest-backend\functions\src\utils\index.ts -----
import {HttpsError, CallableRequest} from "firebase-functions/v2/https";
import {
  getFirestore,
  DocumentReference,
  Firestore,
} from "firebase-admin/firestore";
import {
  WORKSPACES_COLLECTION,
  TEAMS_COLLECTION,
} from "../config";
import {
  WorkspaceDocument,
  WorkspaceMemberDocument,
  TeamMemberDocument,
} from "../types/firestore.types";

const db: Firestore = getFirestore();

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ CallableFunction.
 * @param {object|undefined} auth - –û–±—ä–µ–∫—Ç auth –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ Firebase Functions.
 * @return {string} UID –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * @throws {HttpsError} –ö–æ–¥ "unauthenticated", –µ—Å–ª–∏ –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω.
 */
export function assertAuthenticated(
  auth: CallableRequest["auth"] | undefined
): string {
  if (!auth || !auth.uid) {
    console.warn(
      "[AuthUtil] Authentication check failed: No auth context or UID."
    );
    throw new HttpsError(
      "unauthenticated",
      "–ó–∞–ø—Ä–æ—Å —Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
    );
  }
  return auth.uid;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ä–∞–±–æ—á–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ.
 * @param {string} workspaceId - ID —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞.
 * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * @return {Promise<string | null>} –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ null.
 */
export async function getUserRoleInWorkspace(
  workspaceId: string,
  userId: string
): Promise<WorkspaceMemberDocument["workspaceRole"] | null> {
  if (!workspaceId || !userId) {
    console.warn(
      "[AuthUtil] getUserRoleInWorkspace: workspaceId or userId is empty."
    );
    return null;
  }
  try {
    const memberRef = db
      .collection(WORKSPACES_COLLECTION)
      .doc(workspaceId)
      .collection("members")
      .doc(userId) as DocumentReference<WorkspaceMemberDocument>;
    const memberDoc = await memberRef.get();
    if (memberDoc.exists) {
      return memberDoc.data()?.workspaceRole || null;
    }
    console.log(
      "[AuthUtil] User " + // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
        userId +
        " not found in members of workspace " +
        workspaceId +
        "."
    );
    return null;
  } catch (error) {
    console.error(
      "[AuthUtil] Error fetching role for user " + // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
        userId +
        " in ws " +
        workspaceId +
        ":",
      error
    );
    return null;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–∞–±–æ—á–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ.
 * @param {string} workspaceId - ID —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞.
 * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * @param {Array<string>} requiredRoles - –ú–∞—Å—Å–∏–≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Ä–æ–ª–µ–π.
 * @return {Promise<string>} –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞.
 * @throws {HttpsError} –ï—Å–ª–∏ –ø—Ä–∞–≤–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.
 */
export async function assertWorkspaceRole(
  workspaceId: string,
  userId: string,
  requiredRoles: Array<WorkspaceMemberDocument["workspaceRole"]>
): Promise<WorkspaceMemberDocument["workspaceRole"]> {
  const userRole = await getUserRoleInWorkspace(workspaceId, userId);
  if (!userRole || !requiredRoles.includes(userRole)) {
    console.warn(
      "[AuthUtil] Permission denied for user " + // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
        userId +
        " in ws " +
        workspaceId +
        ". Required: " +
        requiredRoles.join("|") +
        ", Has: " +
        (userRole || "none") +
        "."
    );
    throw new HttpsError(
      "permission-denied",
      "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è " +
        "–≤ –¥–∞–Ω–Ω–æ–º —Ä–∞–±–æ—á–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ."
    );
  }
  return userRole;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –ª–∏—á–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞.
 * @param {string} workspaceId - ID —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞.
 * @param {string} userId - ID —Ç–µ–∫—É—â–µ–≥–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * @return {Promise<void>} –ó–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è —É—Å–ø–µ—à–Ω–æ, –µ—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞.
 * @throws {HttpsError} –ï—Å–ª–∏ Workspace –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.
 */
export async function assertPersonalWorkspaceOwner(
  workspaceId: string,
  userId: string
): Promise<void> {
  if (!workspaceId || !userId) {
    throw new HttpsError(
      "invalid-argument",
      "WorkspaceId –∏ UserId –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã."
    );
  }
  const workspaceRef = db
    .collection(WORKSPACES_COLLECTION)
    .doc(workspaceId) as DocumentReference<WorkspaceDocument>;
  try {
    const workspaceDoc = await workspaceRef.get();
    if (!workspaceDoc.exists) {
      console.warn(
        "[AuthUtil] Workspace " + workspaceId + " not found." // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
      );
      throw new HttpsError(
        "not-found",
        "–†–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
      );
    }
    const wsData = workspaceDoc.data();
    if (!wsData || !wsData.isPersonal || wsData.ownerUid !== userId) {
      console.warn(
        "[AuthUtil] Permission denied for user " + // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
          userId +
          " on personal ws " +
          workspaceId +
          ". IsPersonal: " +
          wsData?.isPersonal +
          ", Owner: " +
          wsData?.ownerUid +
          "."
      );
      throw new HttpsError(
        "permission-denied",
        "–î–µ–π—Å—Ç–≤–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞."
      );
    }
  } catch (error) {
    console.error(
      "[AuthUtil] Error in assertPersonalWorkspaceOwner for ws " + // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
        workspaceId +
        ":",
      error
    );
    if (error instanceof HttpsError) {
      throw error;
    }
    throw new HttpsError(
      "internal",
      "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ."
    );
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ.
 * @param {string} teamId - ID –∫–æ–º–∞–Ω–¥—ã.
 * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * @return {Promise<string | null>} –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ null.
 */
export async function getUserRoleInTeam(
  teamId: string,
  userId: string
): Promise<TeamMemberDocument["role"] | null> {
  if (!teamId || !userId) {
    console.warn("[AuthUtil] getUserRoleInTeam: teamId or userId is empty.");
    return null;
  }
  try {
    const memberRef = db
      .collection(TEAMS_COLLECTION)
      .doc(teamId)
      .collection("members")
      .doc(userId) as DocumentReference<TeamMemberDocument>;
    const memberDoc = await memberRef.get();
    if (memberDoc.exists) {
      return memberDoc.data()?.role || null;
    }
    console.log(
      "[AuthUtil] User " + // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
        userId +
        " not found in members of team " +
        teamId +
        "."
    );
    return null;
  } catch (error) {
    console.error(
      "[AuthUtil] Error fetching role for user " + // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
        userId +
        " in team " +
        teamId +
        ":",
      error
    );
    return null;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–º–∞–Ω–¥–µ.
 * @param {string} teamId - ID –∫–æ–º–∞–Ω–¥—ã.
 * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * @param {Array<string>} requiredRoles - –ú–∞—Å—Å–∏–≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Ä–æ–ª–µ–π.
 * @return {Promise<string>} –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞.
 * @throws {HttpsError} –ï—Å–ª–∏ –ø—Ä–∞–≤–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.
 */
export async function assertTeamRole(
  teamId: string,
  userId: string,
  requiredRoles: Array<TeamMemberDocument["role"]>
): Promise<TeamMemberDocument["role"]> {
  const userRole = await getUserRoleInTeam(teamId, userId);
  if (!userRole || !requiredRoles.includes(userRole)) {
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨ (—Å—Ç—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –±—ã–ª–∞ –ø—Ä–∏–º–µ—Ä–Ω–æ 153-–π)
    console.warn(
      "[AuthUtil] Permission denied for user " +
        userId +
        " in team " +
        teamId +
        ". Required: " +
        requiredRoles.join("|") +
        ", Has: " +
        (userRole || "none") +
        "."
    );
    throw new HttpsError(
      "permission-denied",
      "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –≤ –∫–æ–º–∞–Ω–¥–µ."
    );
  }
  return userRole;
}




--- package.json ---

{
  "name": "progressquest-web",
  "version": "1.0.0",
  "private": true,
  "type": "module",
  "description": "ProgressQuest Universal - Web App",
  "scripts": {
    "dev": "vite",
    "build": "tsc && vite build",
    "preview": "vite preview",
    "lint": "eslint src --ext ts,tsx --report-unused-disable-directives --max-warnings 0",
    "lint:fix": "eslint src --ext ts,tsx --fix",
    "type-check": "tsc --noEmit",
    "serve": "firebase serve --only hosting",
    "deploy": "npm run build && firebase deploy --only hosting",
    "emulators": "firebase emulators:start --project=demo-test",
    "emulators:ui": "firebase emulators:start --only functions,firestore,auth,storage --project=demo-test",
    "dev:emulator": "concurrently \"firebase emulators:start --project=demo-test\" \"npm run dev\""
  },
  "dependencies": {
    "@hookform/resolvers": "^3.3.2",
    "@radix-ui/react-avatar": "^1.0.4",
    "@radix-ui/react-checkbox": "^1.0.4",
    "@radix-ui/react-dialog": "^1.1.14",
    "@radix-ui/react-dropdown-menu": "^2.0.6",
    "@radix-ui/react-label": "^2.1.7",
    "@radix-ui/react-popover": "^1.0.7",
    "@radix-ui/react-progress": "^1.0.3",
    "@radix-ui/react-select": "^2.2.5",
    "@radix-ui/react-separator": "^1.0.3",
    "@radix-ui/react-slider": "^1.1.2",
    "@radix-ui/react-slot": "^1.2.3",
    "@radix-ui/react-switch": "^1.0.3",
    "@radix-ui/react-tabs": "^1.0.4",
    "@radix-ui/react-tooltip": "^1.0.7",
    "@tailwindcss/container-queries": "^0.1.1",
    "@tanstack/react-query": "^5.12.2",
    "@tanstack/react-query-devtools": "^5.13.3",
    "@types/react-beautiful-dnd": "^13.1.8",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "^0.2.0",
    "date-fns": "^2.30.0",
    "firebase": "^10.7.1",
    "framer-motion": "^10.16.16",
    "immer": "^10.0.3",
    "lucide-react": "^0.294.0",
    "react": "^18.2.0",
    "react-beautiful-dnd": "^13.1.1",
    "react-day-picker": "^8.9.1",
    "react-dom": "^18.2.0",
    "react-hook-form": "^7.48.2",
    "react-router-dom": "^6.20.1",
    "recharts": "^2.8.0",
    "sonner": "^1.2.4",
    "tailwind-merge": "^2.6.0",
    "tailwindcss-animate": "^1.0.7",
    "vaul": "^0.7.9",
    "zod": "^3.22.4",
    "zustand": "^4.4.7"
  },
  "devDependencies": {
    "@tailwindcss/aspect-ratio": "^0.4.2",
    "@tailwindcss/forms": "^0.5.7",
    "@tailwindcss/typography": "^0.5.10",
    "@types/react": "^18.2.37",
    "@types/react-dom": "^18.2.15",
    "@typescript-eslint/eslint-plugin": "^6.10.0",
    "@typescript-eslint/parser": "^6.10.0",
    "@vitejs/plugin-react-swc": "^3.5.0",
    "autoprefixer": "^10.4.16",
    "eslint": "^8.53.0",
    "eslint-plugin-react-hooks": "^4.6.0",
    "eslint-plugin-react-refresh": "^0.4.4",
    "firebase-tools": "^12.9.1",
    "postcss": "^8.4.32",
    "tailwindcss": "^3.3.5",
    "typescript": "^5.2.2",
    "vite": "^5.0.0"
  },
  "engines": {
    "node": ">=18.0.0"
  }
}


--- postcss.config.js ---

export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}


--- QUICK_FIX.md ---

# –ë–´–°–¢–†–û–ï –†–ï–®–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ ERR_CONNECTION_REFUSED

## –ü—Ä–æ–±–ª–µ–º–∞
–í–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Firebase Functions —ç–º—É–ª—è—Ç–æ—Ä—É, –Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –æ—à–∏–±–∫—É:
```
POST http://localhost:5001/progress-quest-universal/us-central1/getUserWorkspaces net::ERR_CONNECTION_REFUSED
```

## –ü—Ä–∏—á–∏–Ω–∞
Firebase —ç–º—É–ª—è—Ç–æ—Ä—ã –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã –∏–ª–∏ –ø—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.

## –†–ï–®–ï–ù–ò–ï

### –®–∞–≥ 1: –û—Ç–∫—Ä–æ–π—Ç–µ –æ–±—ã—á–Ω—É—é –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É (cmd)
1. –ù–∞–∂–º–∏—Ç–µ Win + R
2. –í–≤–µ–¥–∏—Ç–µ `cmd` –∏ –Ω–∞–∂–º–∏—Ç–µ Enter
3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞:
   ```
   cd "A:\Progects\Progress Quest Universal\ProgressQuestWeb"
   ```

### –®–∞–≥ 2: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
```bash
npm install
cd functions
npm install
cd ..
```

### –®–∞–≥ 3: –ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç–º—É–ª—è—Ç–æ—Ä—ã
```bash
npx firebase emulators:start --project=demo-test
```

### –®–∞–≥ 4: –í –Ω–æ–≤–æ–º –æ–∫–Ω–µ cmd –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
```bash
npm run dev
```

## –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ batch —Ñ–∞–π–ª

1. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫
2. –ù–∞–π–¥–∏—Ç–µ —Ñ–∞–π–ª `start-dev.bat` –≤ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
3. –î–≤–∞–∂–¥—ã –∫–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –Ω–µ–≥–æ

## –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã

1. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:4000 - Firebase Emulators UI
2. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:5173 - –≤–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
3. –í –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –¥–æ–ª–∂–Ω–æ –ø–æ—è–≤–∏—Ç—å—Å—è: "‚úÖ Functions emulator connected"

## –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç

–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
1. **–ü–æ—Ä—Ç –∑–∞–Ω—è—Ç** - –∑–∞–∫—Ä–æ–π—Ç–µ –¥—Ä—É–≥–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–µ –ø–æ—Ä—Ç—ã 5001, 4000, 5173
2. **Firewall** - —Ä–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –ø–æ—Ä—Ç–∞–º
3. **Antivirus** - –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç–µ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ

## –§–∞–π–ª—ã –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω—ã:
- ‚úÖ `.env` - —Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π VITE_USE_FIREBASE_EMULATORS=true
- ‚úÖ `.firebaserc` - —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –ø—Ä–æ–µ–∫—Ç–∞
- ‚úÖ `functions/` - –ø–∞–ø–∫–∞ —Å Cloud Functions
- ‚úÖ `functions/package.json` - –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Functions
- ‚úÖ `functions/src/index.ts` - –∫–æ–¥ Functions

–í—Å–µ —ç—Ç–∏ —Ñ–∞–π–ª—ã —É–∂–µ —Å–æ–∑–¥–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!


--- README.md ---

# ProgressQuest Universal - Web Application

–ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏.

## üåü –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏

- **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏** - –°–æ–∑–¥–∞–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á
- **–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤** - –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º
- **Pomodoro —Ç–∞–π–º–µ—Ä** - –¢–µ—Ö–Ω–∏–∫–∞ Pomodoro –¥–ª—è —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∫–∏
- **–ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è** - XP, —É—Ä–æ–≤–Ω–∏, –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ —Å—Ç—Ä–∏–∫–∏
- **–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Å–∞–¥** - –í—ã—Ä–∞—â–∏–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏–π –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á
- **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞** - –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
- **–¢–µ–º–Ω–∞—è/—Å–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞** - –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º
- **–†–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è** - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
- **–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω** - –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö

## üõ† –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å—Ç–µ–∫

### Frontend
- **React 18** - UI –±–∏–±–ª–∏–æ—Ç–µ–∫–∞
- **TypeScript** - –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JavaScript
- **Vite** - –°–±–æ—Ä—â–∏–∫ –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
- **Tailwind CSS** - CSS —Ñ—Ä–µ–π–º–≤–æ—Ä–∫
- **Radix UI** - –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞

### State Management
- **Zustand** - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
- **React Query** - –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
- **Immer** - –ò–º–º—É—Ç–∞–±–µ–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

### Backend & Database
- **Firebase** - Backend-as-a-Service
  - Authentication - –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  - Firestore - NoSQL –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
  - Cloud Functions - –°–µ—Ä–≤–µ—Ä–Ω–∞—è –ª–æ–≥–∏–∫–∞
  - Storage - –•—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
  - Hosting - –•–æ—Å—Ç–∏–Ω–≥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

### Development Tools
- **ESLint** - –õ–∏–Ω—Ç–µ—Ä JavaScript/TypeScript
- **Prettier** - –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –∫–æ–¥–∞
- **Husky** - Git hooks

## üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç

### –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è

- Node.js 18.0.0 –∏–ª–∏ –≤—ã—à–µ
- npm –∏–ª–∏ yarn
- Firebase –∞–∫–∫–∞—É–Ω—Ç

### –£—Å—Ç–∞–Ω–æ–≤–∫–∞

1. **–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è**
```bash
git clone https://github.com/your-username/progressquest-universal.git
cd progressquest-universal
```

2. **–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π**
```bash
npm install
```

3. **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Firebase**

   a. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –≤ [Firebase Console](https://console.firebase.google.com/)
   
   b. –í–∫–ª—é—á–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —Å–µ—Ä–≤–∏—Å—ã:
   - Authentication (Email/Password, Google)
   - Firestore Database
   - Storage
   - Hosting

   c. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Firebase –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–µ–∫—Ç–∞

4. **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è**

–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª `.env.local` –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞:

```env
VITE_FIREBASE_API_KEY=your_api_key_here
VITE_FIREBASE_AUTH_DOMAIN=your_project.firebaseapp.com
VITE_FIREBASE_PROJECT_ID=your_project_id
VITE_FIREBASE_STORAGE_BUCKET=your_project.appspot.com
VITE_FIREBASE_MESSAGING_SENDER_ID=123456789
VITE_FIREBASE_APP_ID=1:123456789:web:abcdefghijklmnop

VITE_APP_NAME=ProgressQuest Universal
VITE_APP_VERSION=1.0.0
VITE_APP_ENVIRONMENT=development

VITE_ENABLE_ANALYTICS=true
VITE_ENABLE_NOTIFICATIONS=true
VITE_ENABLE_GARDEN=true
VITE_ENABLE_COLLABORATION=true
```

5. **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Firestore –ø—Ä–∞–≤–∏–ª –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏**

–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ `firestore.rules` –≤ Firebase Console > Firestore Database > Rules

6. **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤ Firestore**

–ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ `firestore.indexes.json` –≤ Firebase Console –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –∏–Ω–¥–µ–∫—Å—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø–µ—Ä–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö

### –ó–∞–ø—É—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞

```bash
# –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
npm run dev

# –°–±–æ—Ä–∫–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
npm run build

# –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–¥–∞–∫—à–µ–Ω —Å–±–æ—Ä–∫–∏
npm run preview

# –õ–∏–Ω—Ç–∏–Ω–≥
npm run lint

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤
npm run type-check
```

## üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞

```
src/
‚îú‚îÄ‚îÄ components/          # React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
‚îÇ   ‚îú‚îÄ‚îÄ ui/             # –ë–∞–∑–æ–≤—ã–µ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
‚îÇ   ‚îú‚îÄ‚îÄ Layout.tsx      # –û—Å–Ω–æ–≤–Ω–æ–π –º–∞–∫–µ—Ç
‚îÇ   ‚îî‚îÄ‚îÄ ProtectedRoute.tsx
‚îú‚îÄ‚îÄ pages/              # –°—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
‚îÇ   ‚îú‚îÄ‚îÄ LandingPage.tsx
‚îÇ   ‚îú‚îÄ‚îÄ DashboardPage.tsx
‚îÇ   ‚îú‚îÄ‚îÄ TasksPage.tsx
‚îÇ   ‚îî‚îÄ‚îÄ ...
‚îú‚îÄ‚îÄ contexts/           # React –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã
‚îÇ   ‚îú‚îÄ‚îÄ AuthContext.tsx
‚îÇ   ‚îî‚îÄ‚îÄ ThemeContext.tsx
‚îú‚îÄ‚îÄ stores/             # Zustand —Å—Ç–µ–π—Ç –º–µ–Ω–µ–¥–∂–µ—Ä—ã
‚îÇ   ‚îú‚îÄ‚îÄ appStore.ts
‚îÇ   ‚îî‚îÄ‚îÄ pomodoroStore.ts
‚îú‚îÄ‚îÄ hooks/              # –ö–∞—Å—Ç–æ–º–Ω—ã–µ React —Ö—É–∫–∏
‚îÇ   ‚îú‚îÄ‚îÄ useTasks.ts
‚îÇ   ‚îî‚îÄ‚îÄ ...
‚îú‚îÄ‚îÄ services/           # API —Å–µ—Ä–≤–∏—Å—ã
‚îÇ   ‚îú‚îÄ‚îÄ firebase.ts
‚îÇ   ‚îú‚îÄ‚îÄ userService.ts
‚îÇ   ‚îú‚îÄ‚îÄ taskService.ts
‚îÇ   ‚îî‚îÄ‚îÄ ...
‚îú‚îÄ‚îÄ utils/              # –£—Ç–∏–ª–∏—Ç—ã
‚îÇ   ‚îú‚îÄ‚îÄ helpers.ts
‚îÇ   ‚îî‚îÄ‚îÄ dateTime.ts
‚îú‚îÄ‚îÄ types/              # TypeScript —Ç–∏–ø—ã
‚îÇ   ‚îî‚îÄ‚îÄ index.ts
‚îú‚îÄ‚îÄ constants/          # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
‚îÇ   ‚îî‚îÄ‚îÄ index.ts
‚îî‚îÄ‚îÄ lib/                # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫
    ‚îî‚îÄ‚îÄ firebase.ts
```

## üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è

### Firebase

1. **Authentication Providers**
   - Email/Password
   - Google Sign-in

2. **Firestore Collections**
   - `users` - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
   - `workspaces` - –†–∞–±–æ—á–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
   - `projects` - –ü—Ä–æ–µ–∫—Ç—ã
   - `tasks` - –ó–∞–¥–∞—á–∏
   - `pomodoroSessions` - Pomodoro —Å–µ—Å—Å–∏–∏
   - `userAchievements` - –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   - `gardenPlants` - –†–∞—Å—Ç–µ–Ω–∏—è —Å–∞–¥–∞
   - `notifications` - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

3. **Storage Structure**
   ```
   /users/{userId}/
   ‚îú‚îÄ‚îÄ avatar.jpg
   ‚îî‚îÄ‚îÄ attachments/
       ‚îî‚îÄ‚îÄ {taskId}/
   ```

### Environment Variables

| –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è | –û–ø–∏—Å–∞–Ω–∏–µ | –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è |
|------------|----------|--------------|
| `VITE_FIREBASE_API_KEY` | Firebase API –∫–ª—é—á | ‚úÖ |
| `VITE_FIREBASE_AUTH_DOMAIN` | Firebase Auth –¥–æ–º–µ–Ω | ‚úÖ |
| `VITE_FIREBASE_PROJECT_ID` | Firebase Project ID | ‚úÖ |
| `VITE_FIREBASE_STORAGE_BUCKET` | Firebase Storage bucket | ‚úÖ |
| `VITE_FIREBASE_MESSAGING_SENDER_ID` | Firebase Messaging ID | ‚úÖ |
| `VITE_FIREBASE_APP_ID` | Firebase App ID | ‚úÖ |
| `VITE_ENABLE_ANALYTICS` | –í–∫–ª—é—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É | ‚ùå |
| `VITE_ENABLE_GARDEN` | –í–∫–ª—é—á–∏—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Å–∞–¥ | ‚ùå |

## üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ

### Firebase Hosting

1. **–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Firebase CLI**
```bash
npm install -g firebase-tools
```

2. **–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è**
```bash
firebase login
```

3. **–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞**
```bash
firebase init
```

4. **–°–±–æ—Ä–∫–∞ –∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ**
```bash
npm run build
firebase deploy
```

### –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã

- **Vercel**: –ü–æ–¥–∫–ª—é—á–∏—Ç–µ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
- **Netlify**: Drag & drop –ø–∞–ø–∫–∏ `dist`
- **GitHub Pages**: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ GitHub Actions

## üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

```bash
# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
npm run test

# –ü–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏
npm run test:coverage

# E2E —Ç–µ—Å—Ç—ã
npm run test:e2e
```

## üìä –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å

- **Lighthouse Score**: 90+
- **Bundle Size**: ~500KB gzipped
- **First Contentful Paint**: <1.5s
- **Time to Interactive**: <3s

## üîê –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å

- HTTPS Only
- Firebase Security Rules
- Input Sanitization
- XSS Protection
- CSRF Protection

## ü§ù –í–∫–ª–∞–¥ –≤ –ø—Ä–æ–µ–∫—Ç

1. Fork –ø—Ä–æ–µ–∫—Ç–∞
2. –°–æ–∑–¥–∞–π—Ç–µ feature –≤–µ—Ç–∫—É (`git checkout -b feature/amazing-feature`)
3. Commit –∏–∑–º–µ–Ω–µ–Ω–∏—è (`git commit -m 'Add amazing feature'`)
4. Push –≤ –≤–µ—Ç–∫—É (`git push origin feature/amazing-feature`)
5. –°–æ–∑–¥–∞–π—Ç–µ Pull Request

## üìù –õ–∏—Ü–µ–Ω–∑–∏—è

–≠—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç –ª–∏—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω –ø–æ–¥ MIT License - —Å–º. —Ñ–∞–π–ª [LICENSE](LICENSE) –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.

## üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞

- üìß Email: support@progressquest.com
- üí¨ Discord: [ProgressQuest Community](https://discord.gg/progressquest)
- üìñ Wiki: [Project Wiki](https://github.com/your-username/progressquest-universal/wiki)

## üó∫ Roadmap

### v1.1.0
- [ ] –ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (React Native)
- [ ] –ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
- [ ] –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏

### v1.2.0
- [ ] AI-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
- [ ] –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
- [ ] –¢–µ–º–ø–ª–µ–π—Ç—ã –ø—Ä–æ–µ–∫—Ç–æ–≤

### v2.0.0
- [ ] –ë–µ–ª—ã–µ –ª–µ–π–±–ª—ã
- [ ] Enterprise —Ñ—É–Ω–∫—Ü–∏–∏
- [ ] API –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π

## üôè –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏

- [React](https://reactjs.org/) - UI –±–∏–±–ª–∏–æ—Ç–µ–∫–∞
- [Firebase](https://firebase.google.com/) - Backend –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞
- [Tailwind CSS](https://tailwindcss.com/) - CSS —Ñ—Ä–µ–π–º–≤–æ—Ä–∫
- [Radix UI](https://www.radix-ui.com/) - UI –ø—Ä–∏–º–∏—Ç–∏–≤—ã


--- start-dev.bat ---

@echo off
echo Starting ProgressQuest Universal Development Environment
echo.

echo [1/3] Installing dependencies...
call npm install

echo [2/3] Installing Firebase Functions dependencies...
cd functions
call npm install
cd ..

echo [3/3] Starting development servers...
start "Firebase Emulators" cmd /k "npx firebase emulators:start --project=demo-test"
timeout /t 5 /nobreak
start "Vite Dev Server" cmd /k "npm run dev"

echo.
echo Development environment started!
echo - Firebase Emulators UI: http://localhost:4000
echo - Web App: http://localhost:5173
echo.
pause


--- start-emulators.bat ---

@echo off
echo Installing Firebase Functions dependencies...
cd functions
call npm install
cd ..

echo Starting Firebase emulators with demo project...
call npx firebase emulators:start --project=demo-test

pause


--- start-emulators.ps1 ---

Write-Host "Installing Firebase Functions dependencies..." -ForegroundColor Green
Set-Location functions
npm install
Set-Location ..

Write-Host "Starting Firebase emulators with demo project..." -ForegroundColor Green
npx firebase emulators:start --project=demo-test

Read-Host "Press Enter to exit"


--- storage.rules ---

rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // –ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    match /avatars/{userId}/{allPaths=**} {
      allow read: if true; // –ê–≤–∞—Ç–∞—Ä—ã –º–æ–∂–Ω–æ —á–∏—Ç–∞—Ç—å –≤—Å–µ–º
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // –ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Ñ–∞–π–ª–æ–≤ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤
    match /workspaces/{workspaceId}/{allPaths=**} {
      allow read, write: if request.auth != null && (
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —á–ª–µ–Ω–æ–º workspace
        exists(/databases/(default)/documents/workspace_members/$(workspaceId + '_' + request.auth.uid))
      );
    }
    
    // –ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Ñ–∞–π–ª–æ–≤ –∑–∞–¥–∞—á
    match /tasks/{taskId}/{allPaths=**} {
      allow read, write: if request.auth != null;
    }
    
    // –ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
    match /temp/{userId}/{allPaths=**} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å—ë –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    // –í–ù–ò–ú–ê–ù–ò–ï: –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ!
    match /{allPaths=**} {
      allow read, write: if request.auth != null;
    }
  }
}


--- tailwind.config.js ---

/** @type {import('tailwindcss').Config} */
module.exports = {
  darkMode: ["class"],
  content: [
    "./pages/**/*.{ts,tsx}",
    "./components/**/*.{ts,tsx}",
    "./app/**/*.{ts,tsx}",
    "./src/**/*.{ts,tsx}",
  ],
  theme: {
  	container: {
  		center: true,
  		padding: '2rem',
  		screens: {
  			'2xl': '1400px'
  		}
  	},
  	extend: {
  		colors: {
  			border: 'hsl(var(--border))',
  			input: 'hsl(var(--input))',
  			ring: 'hsl(var(--ring))',
  			background: 'hsl(var(--background))',
  			foreground: 'hsl(var(--foreground))',
  			primary: {
  				DEFAULT: 'hsl(var(--primary))',
  				foreground: 'hsl(var(--primary-foreground))'
  			},
  			secondary: {
  				DEFAULT: 'hsl(var(--secondary))',
  				foreground: 'hsl(var(--secondary-foreground))'
  			},
  			destructive: {
  				DEFAULT: 'hsl(var(--destructive))',
  				foreground: 'hsl(var(--destructive-foreground))'
  			},
  			muted: {
  				DEFAULT: 'hsl(var(--muted))',
  				foreground: 'hsl(var(--muted-foreground))'
  			},
  			accent: {
  				DEFAULT: 'hsl(var(--accent))',
  				foreground: 'hsl(var(--accent-foreground))'
  			},
  			popover: {
  				DEFAULT: 'hsl(var(--popover))',
  				foreground: 'hsl(var(--popover-foreground))'
  			},
  			card: {
  				DEFAULT: 'hsl(var(--card))',
  				foreground: 'hsl(var(--card-foreground))'
  			},
  			chart: {
  				'1': 'hsl(var(--chart-1))',
  				'2': 'hsl(var(--chart-2))',
  				'3': 'hsl(var(--chart-3))',
  				'4': 'hsl(var(--chart-4))',
  				'5': 'hsl(var(--chart-5))',
  				'1': 'hsl(var(--chart-1))',
  				'2': 'hsl(var(--chart-2))',
  				'3': 'hsl(var(--chart-3))',
  				'4': 'hsl(var(--chart-4))',
  				'5': 'hsl(var(--chart-5))'
  			}
  		},
  		borderRadius: {
  			lg: 'var(--radius)',
  			md: 'calc(var(--radius) - 2px)',
  			sm: 'calc(var(--radius) - 4px)'
  		},
  		fontFamily: {
  			sans: [
  				'Inter',
  				'-apple-system',
  				'BlinkMacSystemFont',
  				'Segoe UI',
  				'Roboto',
  				'Oxygen',
  				'Ubuntu',
  				'Cantarell',
  				'sans-serif'
  			]
  		},
  		animation: {
  			'accordion-down': 'accordion-down 0.2s ease-out',
  			'accordion-up': 'accordion-up 0.2s ease-out',
  			'fade-in': 'fade-in 0.3s ease-out',
  			'slide-in': 'slide-in 0.3s ease-out',
  			'slide-up': 'slide-up 0.3s ease-out',
  			'bounce-subtle': 'bounce-subtle 2s infinite',
  			'pulse-subtle': 'pulse-subtle 2s infinite',
  			'rotate-slow': 'rotate-slow 3s linear infinite',
  			'shimmer': 'shimmer 2s linear infinite'
  		},
  		keyframes: {
  			'accordion-down': {
  				from: {
  					height: '0'
  				},
  				to: {
  					height: 'var(--radix-accordion-content-height)'
  				}
  			},
  			'accordion-up': {
  				from: {
  					height: 'var(--radix-accordion-content-height)'
  				},
  				to: {
  					height: '0'
  				}
  			},
  			'fade-in': {
  				'0%': {
  					opacity: '0',
  					transform: 'translateY(10px)'
  				},
  				'100%': {
  					opacity: '1',
  					transform: 'translateY(0)'
  				}
  			},
  			'slide-in': {
  				'0%': {
  					transform: 'translateX(-100%)'
  				},
  				'100%': {
  					transform: 'translateX(0)'
  				}
  			},
  			'slide-up': {
  				'0%': {
  					transform: 'translateY(100%)'
  				},
  				'100%': {
  					transform: 'translateY(0)'
  				}
  			},
  			'bounce-subtle': {
  				'0%, 100%': {
  					transform: 'translateY(0)'
  				},
  				'50%': {
  					transform: 'translateY(-5px)'
  				}
  			},
  			'pulse-subtle': {
  				'0%, 100%': {
  					opacity: '1'
  				},
  				'50%': {
  					opacity: '0.8'
  				}
  			},
  			'rotate-slow': {
  				'0%': {
  					transform: 'rotate(0deg)'
  				},
  				'100%': {
  					transform: 'rotate(360deg)'
  				}
  			},
  			'shimmer': {
  				'0%': {
  					transform: 'translateX(-100%)'
  				},
  				'100%': {
  					transform: 'translateX(100%)'
  				}
  			}
  		},
  		spacing: {
  			'18': '4.5rem',
  			'88': '22rem',
  			'120': '30rem'
  		},
  		maxWidth: {
  			'8xl': '88rem',
  			'9xl': '96rem'
  		},
  		backdropBlur: {
  			xs: '2px'
  		},
  		boxShadow: {
  			'inner-lg': 'inset 0 2px 4px 0 rgba(0, 0, 0, 0.1)',
  			glow: '0 0 20px rgba(139, 92, 246, 0.3)',
  			'glow-lg': '0 0 30px rgba(139, 92, 246, 0.4)'
  		},
  		screens: {
  			xs: '475px',
  			'3xl': '1920px'
  		},
  		gridTemplateColumns: {
  			'auto-fit': 'repeat(auto-fit, minmax(0, 1fr))',
  			'auto-fill': 'repeat(auto-fill, minmax(0, 1fr))'
  		},
  		aspectRatio: {
  			'4/3': '4 / 3',
  			'3/2': '3 / 2',
  			'2/3': '2 / 3',
  			'9/16': '9 / 16'
  		}
  	}
  },
  plugins: [
    require("tailwindcss-animate"),
    require("@tailwindcss/typography"),
    require("@tailwindcss/forms"),
    require("@tailwindcss/aspect-ratio"),
    require("@tailwindcss/container-queries"),
  ],
}


--- test-emulators.cmd ---

@echo off
echo Testing Firebase emulators...
echo.
echo Current directory: %CD%
echo.
echo Starting emulators...
npx firebase emulators:start --project=demo-test


--- tsconfig.json ---

{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,

    /* Path mapping */
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["src"],
  "references": [{ "path": "./tsconfig.node.json" }]
}


--- tsconfig.node.json ---

{
  "compilerOptions": {
    "composite": true,
    "skipLibCheck": true,
    "module": "ESNext",
    "moduleResolution": "bundler",
    "allowSyntheticDefaultImports": true
  },
  "include": ["vite.config.ts"]
}


--- vite.config.ts ---

import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react-swc'
import path from 'path'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      '@': path.resolve(__dirname, './src'),
    },
  },
  build: {
    outDir: 'dist',
    sourcemap: true,
    rollupOptions: {
      output: {
        manualChunks: {
          vendor: ['react', 'react-dom'],
          firebase: ['firebase/app', 'firebase/auth', 'firebase/firestore', 'firebase/functions'],
          ui: ['@radix-ui/react-dialog', '@radix-ui/react-dropdown-menu', '@radix-ui/react-tabs'],
        },
      },
    },
  },
  server: {
    port: 3000,
    open: true,
  },
  preview: {
    port: 3000,
  },
})


--- functions/package.json ---

{
  "name": "functions",
  "scripts": {
    "lint": "eslint --ext .js,.ts .",
    "build": "tsc",
    "build:watch": "tsc --watch",
    "serve": "npm run build && firebase emulators:start --only functions",
    "shell": "npm run build && firebase functions:shell",
    "start": "npm run shell",
    "deploy": "firebase deploy --only functions",
    "logs": "firebase functions:log"
  },
  "engines": {
    "node": "18"
  },
  "main": "lib/index.js",
  "dependencies": {
    "firebase-admin": "^11.8.0",
    "firebase-functions": "^4.3.1"
  },
  "devDependencies": {
    "@typescript-eslint/eslint-plugin": "^5.12.0",
    "@typescript-eslint/parser": "^5.12.0",
    "eslint": "^8.9.0",
    "eslint-config-google": "^0.14.0",
    "eslint-plugin-import": "^2.25.4",
    "typescript": "^4.9.0"
  },
  "private": true
}


--- functions/tsconfig.json ---

{
  "compilerOptions": {
    "module": "commonjs",
    "noImplicitReturns": true,
    "noUnusedLocals": true,
    "outDir": "lib",
    "sourceMap": true,
    "strict": true,
    "target": "es2017"
  },
  "compileOnSave": true,
  "include": [
    "src"
  ]
}


--- functions/src/index.ts ---

import * as functions from "firebase-functions";
import * as admin from "firebase-admin";

// Initialize Firebase Admin
admin.initializeApp();

// –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
interface CreateWorkspacePayload {
  name: string;
  description?: string | null;
  isPersonal: boolean;
  teamId?: string | null;
  activeApproach?: string;
  defaultTags?: string[];
  settings?: { [key: string]: any };
}

interface UpdateWorkspacePayload {
  workspaceId: string;
  name?: string;
  description?: string | null;
  activeApproach?: string;
  defaultTags?: string[];
  settings?: { [key: string]: any };
}

interface WorkspaceClientDto {
  id: string;
  name: string;
  description: string | null;
  ownerUid: string;
  isPersonal: boolean;
  teamId: string | null;
  createdAt: string;
  updatedAt: string;
  activeApproach: string;
  defaultTags: string[];
  settings: { [key: string]: any };
  currentUserWorkspaceRole?: 'owner' | 'admin' | 'manager' | 'editor' | 'member' | 'viewer' | null;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
export const createWorkspace = functions.https.onCall(
  async (data: CreateWorkspacePayload, context) => {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    if (!context.auth) {
      throw new functions.https.HttpsError('unauthenticated', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
    }

    const uid = context.auth.uid;
    const db = admin.firestore();

    try {
      const workspaceRef = db.collection('workspaces').doc();
      const now = admin.firestore.Timestamp.now();

      const workspaceData = {
        id: workspaceRef.id,
        name: data.name,
        description: data.description || null,
        ownerUid: uid,
        isPersonal: data.isPersonal,
        teamId: data.teamId || null,
        createdAt: now,
        updatedAt: now,
        activeApproach: data.activeApproach || 'default',
        defaultTags: data.defaultTags || [],
        settings: data.settings || {},
      };

      await workspaceRef.set(workspaceData);

      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é workspace_members
      await db.collection('workspace_members').add({
        workspaceId: workspaceRef.id,
        userId: uid,
        role: 'owner',
        joinedAt: now,
      });

      const workspace: WorkspaceClientDto = {
        ...workspaceData,
        createdAt: workspaceData.createdAt.toDate().toISOString(),
        updatedAt: workspaceData.updatedAt.toDate().toISOString(),
        currentUserWorkspaceRole: 'owner',
      };

      return { workspace };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è workspace:', error);
      throw new functions.https.HttpsError('internal', '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞');
    }
  }
);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const getUserWorkspaces = functions.https.onCall(
  async (data, context) => {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    if (!context.auth) {
      throw new functions.https.HttpsError('unauthenticated', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
    }

    const uid = context.auth.uid;
    const db = admin.firestore();

    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ workspace_members –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const membershipSnapshot = await db
        .collection('workspace_members')
        .where('userId', '==', uid)
        .get();

      if (membershipSnapshot.empty) {
        return { workspaces: [] };
      }

      // –ü–æ–ª—É—á–∞–µ–º ID –≤—Å–µ—Ö —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const workspaceIds = membershipSnapshot.docs.map(doc => doc.data().workspaceId);
      const membershipByWorkspace = new Map();
      
      membershipSnapshot.docs.forEach(doc => {
        const data = doc.data();
        membershipByWorkspace.set(data.workspaceId, data);
      });

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤
      const workspacePromises = workspaceIds.map(id => 
        db.collection('workspaces').doc(id).get()
      );
      
      const workspaceSnapshots = await Promise.all(workspacePromises);
      
      const workspaces: WorkspaceClientDto[] = workspaceSnapshots
        .filter(snapshot => snapshot.exists)
        .map(snapshot => {
          const data = snapshot.data()!;
          const membership = membershipByWorkspace.get(snapshot.id);
          
          return {
            id: snapshot.id,
            name: data.name,
            description: data.description,
            ownerUid: data.ownerUid,
            isPersonal: data.isPersonal,
            teamId: data.teamId,
            createdAt: data.createdAt.toDate().toISOString(),
            updatedAt: data.updatedAt.toDate().toISOString(),
            activeApproach: data.activeApproach,
            defaultTags: data.defaultTags || [],
            settings: data.settings || {},
            currentUserWorkspaceRole: membership?.role || null,
          };
        });

      return { workspaces };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è workspaces:', error);
      throw new functions.https.HttpsError('internal', '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤');
    }
  }
);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
export const getWorkspaceDetails = functions.https.onCall(
  async (data: { workspaceId: string }, context) => {
    if (!context.auth) {
      throw new functions.https.HttpsError('unauthenticated', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
    }

    const uid = context.auth.uid;
    const { workspaceId } = data;
    const db = admin.firestore();

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ workspace
      const membershipSnapshot = await db
        .collection('workspace_members')
        .where('workspaceId', '==', workspaceId)
        .where('userId', '==', uid)
        .limit(1)
        .get();

      if (membershipSnapshot.empty) {
        throw new functions.https.HttpsError('permission-denied', '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞–±–æ—á–µ–º—É –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤—É');
      }

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ workspace
      const workspaceDoc = await db.collection('workspaces').doc(workspaceId).get();
      
      if (!workspaceDoc.exists) {
        throw new functions.https.HttpsError('not-found', '–†–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      }

      const workspaceData = workspaceDoc.data()!;
      const membership = membershipSnapshot.docs[0].data();

      const workspace: WorkspaceClientDto = {
        id: workspaceDoc.id,
        name: workspaceData.name,
        description: workspaceData.description,
        ownerUid: workspaceData.ownerUid,
        isPersonal: workspaceData.isPersonal,
        teamId: workspaceData.teamId,
        createdAt: workspaceData.createdAt.toDate().toISOString(),
        updatedAt: workspaceData.updatedAt.toDate().toISOString(),
        activeApproach: workspaceData.activeApproach,
        defaultTags: workspaceData.defaultTags || [],
        settings: workspaceData.settings || {},
        currentUserWorkspaceRole: membership.role,
      };

      return { workspace };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π workspace:', error);
      if (error instanceof functions.https.HttpsError) {
        throw error;
      }
      throw new functions.https.HttpsError('internal', '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞');
    }
  }
);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
export const updateWorkspace = functions.https.onCall(
  async (data: UpdateWorkspacePayload, context) => {
    if (!context.auth) {
      throw new functions.https.HttpsError('unauthenticated', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
    }

    const uid = context.auth.uid;
    const { workspaceId, ...updateData } = data;
    const db = admin.firestore();

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–ª–∞–¥–µ–ª–µ—Ü –∏–ª–∏ –∞–¥–º–∏–Ω)
      const membershipSnapshot = await db
        .collection('workspace_members')
        .where('workspaceId', '==', workspaceId)
        .where('userId', '==', uid)
        .limit(1)
        .get();

      if (membershipSnapshot.empty) {
        throw new functions.https.HttpsError('permission-denied', '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞–±–æ—á–µ–º—É –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤—É');
      }

      const membership = membershipSnapshot.docs[0].data();
      if (!['owner', 'admin'].includes(membership.role)) {
        throw new functions.https.HttpsError('permission-denied', '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞');
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º workspace
      const workspaceRef = db.collection('workspaces').doc(workspaceId);
      const updatePayload = {
        ...updateData,
        updatedAt: admin.firestore.Timestamp.now(),
      };

      await workspaceRef.update(updatePayload);

      // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      const updatedDoc = await workspaceRef.get();
      const updatedData = updatedDoc.data()!;

      const updatedWorkspace: WorkspaceClientDto = {
        id: updatedDoc.id,
        name: updatedData.name,
        description: updatedData.description,
        ownerUid: updatedData.ownerUid,
        isPersonal: updatedData.isPersonal,
        teamId: updatedData.teamId,
        createdAt: updatedData.createdAt.toDate().toISOString(),
        updatedAt: updatedData.updatedAt.toDate().toISOString(),
        activeApproach: updatedData.activeApproach,
        defaultTags: updatedData.defaultTags || [],
        settings: updatedData.settings || {},
        currentUserWorkspaceRole: membership.role,
      };

      return { success: true, updatedWorkspace };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è workspace:', error);
      if (error instanceof functions.https.HttpsError) {
        throw error;
      }
      throw new functions.https.HttpsError('internal', '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞');
    }
  }
);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
export const deleteWorkspace = functions.https.onCall(
  async (data: { workspaceId: string }, context) => {
    if (!context.auth) {
      throw new functions.https.HttpsError('unauthenticated', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
    }

    const uid = context.auth.uid;
    const { workspaceId } = data;
    const db = admin.firestore();

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –≤–ª–∞–¥–µ–ª–µ—Ü workspace
      const workspaceDoc = await db.collection('workspaces').doc(workspaceId).get();
      
      if (!workspaceDoc.exists) {
        throw new functions.https.HttpsError('not-found', '–†–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      }

      const workspaceData = workspaceDoc.data()!;
      if (workspaceData.ownerUid !== uid) {
        throw new functions.https.HttpsError('permission-denied', '–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å —Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ');
      }

      // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —á–ª–µ–Ω—Å—Ç–≤–∞
      const membershipSnapshot = await db
        .collection('workspace_members')
        .where('workspaceId', '==', workspaceId)
        .get();

      const batch = db.batch();
      membershipSnapshot.docs.forEach(doc => {
        batch.delete(doc.ref);
      });

      // –£–¥–∞–ª—è–µ–º —Å–∞–º workspace
      batch.delete(workspaceDoc.ref);

      await batch.commit();

      return { success: true, message: '–†–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ' };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è workspace:', error);
      if (error instanceof functions.https.HttpsError) {
        throw error;
      }
      throw new functions.https.HttpsError('internal', '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞');
    }
  }
);


--- src/App.tsx ---

import { BrowserRouter as Router, Routes, Route } from 'react-router-dom'
import { QueryClient, QueryClientProvider } from '@tanstack/react-query'
import { ReactQueryDevtools } from '@tanstack/react-query-devtools'
import { Toaster } from 'sonner'
import { AuthProvider } from '@/contexts/AuthContext'
import { ThemeProvider } from '@/contexts/ThemeContext'
import { ProtectedRoute } from '@/components/ProtectedRoute'
import { Layout } from '@/components/Layout'

import { AuthRedirector } from '@/components/AuthRedirector'
import LandingPage from '@/pages/LandingPage'
import { LoginPage } from '@/pages/LoginPage'
import { RegisterPage } from '@/pages/RegisterPage'
import { DashboardPage } from '@/pages/DashboardPage'
import { TasksPage } from '@/pages/TasksPage'
import { WorkspacesPage } from '@/pages/WorkspacePage'
import { ProjectsPage } from '@/pages/ProjectsPage'
import { GardenPage } from '@/pages/GardenPage'
import { AnalyticsPage } from '@/pages/AnalyticsPage'
import { SettingsPage } from '@/pages/SettingsPage'
import { ProfilePage } from '@/pages/ProfilePage'
import { NotFoundPage } from '@/pages/NotFoundPage'

// Create a client
const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      staleTime: 5 * 60 * 1000, // 5 minutes
      retry: (failureCount, error: any) => {
        if (error?.status === 404) return false
        return failureCount < 3
      },
    },
  },
})

function App() {
  return (
    <QueryClientProvider client={queryClient}>
      <ThemeProvider>
        <AuthProvider>
          <Router future={{
            v7_startTransition: true,
            v7_relativeSplatPath: true
          }}>
            <div className="min-h-screen bg-background text-foreground">
              <Routes>
                {/* Public routes */}
                <Route path="/" element={<LandingPage />} />
                <Route path="/dashboard" element={<AuthRedirector />} />
                <Route path="/login" element={<LoginPage />} />
                <Route path="/register" element={<RegisterPage />} />
                
                {/* Protected routes */}
                <Route
                  path="/app/*"
                  element={
                    <ProtectedRoute>
                      <Layout>
                        <Routes>
                          <Route index element={<DashboardPage />} />
                          <Route path="tasks" element={<TasksPage />} />
                          <Route path="workspaces" element={<WorkspacesPage />} />
                          <Route path="projects" element={<ProjectsPage />} />
                          <Route path="garden" element={<GardenPage />} />
                          <Route path="analytics" element={<AnalyticsPage />} />
                          <Route path="settings" element={<SettingsPage />} />
                          <Route path="profile" element={<ProfilePage />} />
                        </Routes>
                      </Layout>
                    </ProtectedRoute>
                  }
                />
                
                {/* 404 route */}
                <Route path="*" element={<NotFoundPage />} />
              </Routes>
              
              <Toaster 
                position="top-right"
                toastOptions={{
                  className: 'bg-background border-border text-foreground',
                }}
              />
            </div>
          </Router>
        </AuthProvider>
      </ThemeProvider>
      <ReactQueryDevtools initialIsOpen={false} />
    </QueryClientProvider>
  )
}

export default App


--- src/index.css ---

@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
    --radius: 0.5rem;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
  }

  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

/* Custom scrollbar */
::-webkit-scrollbar {
  width: 6px;
  height: 6px;
}

::-webkit-scrollbar-track {
  @apply bg-muted;
}

::-webkit-scrollbar-thumb {
  @apply bg-muted-foreground/30 rounded-full;
}

::-webkit-scrollbar-thumb:hover {
  @apply bg-muted-foreground/50;
}

/* Custom animations */
@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes slideIn {
  from {
    transform: translateX(-100%);
  }
  to {
    transform: translateX(0);
  }
}

@keyframes pulse-subtle {
  0%, 100% {
    opacity: 1;
  }
  50% {
    opacity: 0.8;
  }
}

.animate-fadeIn {
  animation: fadeIn 0.3s ease-out;
}

.animate-slideIn {
  animation: slideIn 0.3s ease-out;
}

.animate-pulse-subtle {
  animation: pulse-subtle 2s infinite;
}

/* Glassmorphism effect */
.glass {
  @apply bg-white/10 backdrop-blur-lg border border-white/20;
}

.glass-dark {
  @apply bg-black/10 backdrop-blur-lg border border-black/20;
}

/* Task card hover effects */
.task-card {
  @apply transition-all duration-200 hover:shadow-md hover:scale-[1.02];
}

/* Sidebar transition */
.sidebar-transition {
  @apply transition-all duration-300 ease-in-out;
}

/* Focus ring for accessibility */
.focus-ring {
  @apply focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2;
}

/* Loading spinner */
.spinner {
  @apply animate-spin rounded-full border-2 border-current border-t-transparent;
}

/* Custom button variants */
.btn-gradient {
  @apply bg-gradient-to-r from-primary to-primary/80 hover:from-primary/90 hover:to-primary/70 text-primary-foreground;
}

/* Calendar custom styles */
.rdp {
  --rdp-cell-size: 40px;
  --rdp-accent-color: hsl(var(--primary));
  --rdp-background-color: hsl(var(--muted));
}

/* Drag and drop styles */
.dragging {
  @apply opacity-50 transform rotate-3;
}

.drop-zone {
  @apply bg-primary/10 border-2 border-dashed border-primary;
}

/* Pomodoro timer styles */
.timer-circle {
  transform-origin: center;
  transform: rotate(-90deg);
}

/* Achievement badge styles */
.achievement-badge {
  @apply bg-gradient-to-br from-yellow-400 to-orange-500 text-white shadow-lg;
}

/* Garden plant animations */
.plant-grow {
  animation: plantGrow 2s ease-out;
}

@keyframes plantGrow {
  0% {
    transform: scale(0) rotate(-10deg);
    opacity: 0;
  }
  50% {
    transform: scale(1.1) rotate(5deg);
    opacity: 0.8;
  }
  100% {
    transform: scale(1) rotate(0deg);
    opacity: 1;
  }
}

/* Team collaboration indicators */
.collaboration-indicator {
  animation: pulse 2s infinite;
}

/* Stats dashboard charts */
.chart-container {
  @apply p-4 bg-card rounded-lg border shadow-sm;
}

/* Mobile responsive adjustments */
@media (max-width: 768px) {
  .mobile-optimized {
    @apply text-sm p-2;
  }
  
  .mobile-sidebar {
    @apply fixed inset-0 z-50 bg-background/80 backdrop-blur-sm;
  }
}

/* Line clamp utilities */
.line-clamp-1 {
  overflow: hidden;
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: 1;
}

.line-clamp-2 {
  overflow: hidden;
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: 2;
}

.line-clamp-3 {
  overflow: hidden;
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: 3;
}

/* Print styles */
@media print {
  .no-print {
    display: none !important;
  }
  
  .print-optimize {
    @apply text-black bg-white;
  }
}


--- src/main.tsx ---

import React from 'react'
import ReactDOM from 'react-dom/client'
import { initializeApp } from './services/firebase'
import App from './App'
import './index.css'

// Initialize Firebase
initializeApp()

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
)


--- src/vite-env.d.ts ---

/// <reference types="vite/client" />

interface ImportMetaEnv {
  readonly VITE_FIREBASE_API_KEY: string
  readonly VITE_FIREBASE_AUTH_DOMAIN: string
  readonly VITE_FIREBASE_PROJECT_ID: string
  readonly VITE_FIREBASE_STORAGE_BUCKET: string
  readonly VITE_FIREBASE_MESSAGING_SENDER_ID: string
  readonly VITE_FIREBASE_APP_ID: string
  readonly VITE_APP_NAME: string
  readonly VITE_APP_VERSION: string
  readonly VITE_APP_ENVIRONMENT: string
  readonly VITE_API_BASE_URL: string
  readonly VITE_API_TIMEOUT: string
  readonly VITE_GOOGLE_ANALYTICS_ID: string
  readonly VITE_ENABLE_ANALYTICS: string
  readonly VITE_ENABLE_NOTIFICATIONS: string
  readonly VITE_ENABLE_GARDEN: string
  readonly VITE_ENABLE_COLLABORATION: string
  readonly VITE_SUPPORT_EMAIL: string
  readonly VITE_FEEDBACK_URL: string
}

interface ImportMeta {
  readonly env: ImportMetaEnv
}


--- src/components/AuthRedirector.tsx ---

import { useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '@/contexts/AuthContext';
import { Loader2 } from 'lucide-react';

export function AuthRedirector() {
  const { isAuthenticated, loading } = useAuth();
  const navigate = useNavigate();

  useEffect(() => {
    if (!loading) {
      if (isAuthenticated) {
        navigate('/app');
      } else {
        navigate('/login');
      }
    }
  }, [isAuthenticated, loading, navigate]);

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="flex flex-col items-center space-y-4">
          <Loader2 className="h-8 w-8 animate-spin text-indigo-600" />
          <p className="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞...</p>
        </div>
      </div>
    );
  }

  return null;
}


--- src/components/CreateTaskModal.tsx ---

import React, { useState } from 'react';
import { toast } from 'sonner';

interface CreateTaskModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSubmit: (taskData: TaskData) => void;
}

interface TaskData {
  title: string;
  description: string;
  priority: 'low' | 'medium' | 'high';
  category: string;
  dueDate: string;
  estimatedTime: number;
}

export const CreateTaskModal: React.FC<CreateTaskModalProps> = ({
  isOpen,
  onClose,
  onSubmit,
}) => {
  const [formData, setFormData] = useState<TaskData>({
    title: '',
    description: '',
    priority: 'medium',
    category: '',
    dueDate: '',
    estimatedTime: 25,
  });

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!formData.title.trim()) {
      toast.error('–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
      return;
    }

    onSubmit(formData);
    
    // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
    setFormData({
      title: '',
      description: '',
      priority: 'medium',
      category: '',
      dueDate: '',
      estimatedTime: 25,
    });
    
    onClose();
    toast.success('–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
  };

  const handleChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>
  ) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: name === 'estimatedTime' ? parseInt(value) || 0 : value,
    }));
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 z-50 overflow-y-auto">
      <div className="flex items-center justify-center min-h-screen px-4 pt-4 pb-20 text-center sm:block sm:p-0">
        {/* Overlay */}
        <div
          className="fixed inset-0 transition-opacity bg-black bg-opacity-50"
          onClick={onClose}
        />

        {/* Modal */}
        <div className="inline-block w-full max-w-md p-6 my-8 overflow-hidden text-left align-middle transition-all transform bg-white shadow-xl rounded-lg border border-gray-200">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-lg font-semibold text-slate-800">
              –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
            </h3>
            <button
              onClick={onClose}
              className="text-slate-400 hover:text-slate-600 transition-colors"
            >
              ‚úï
            </button>
          </div>

          <form onSubmit={handleSubmit} className="space-y-4">
            {/* –ù–∞–∑–≤–∞–Ω–∏–µ */}
            <div>
              <label className="block text-sm font-medium text-slate-700 mb-1">
                –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ *
              </label>
              <input
                type="text"
                name="title"
                value={formData.title}
                onChange={handleChange}
                className="w-full px-3 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white text-slate-900 placeholder:text-slate-500"
                placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏..."
                required
              />
            </div>

            {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
            <div>
              <label className="block text-sm font-medium text-slate-700 mb-1">
                –û–ø–∏—Å–∞–Ω–∏–µ
              </label>
              <textarea
                name="description"
                value={formData.description}
                onChange={handleChange}
                rows={3}
                className="w-full px-3 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white text-slate-900 placeholder:text-slate-500"
                placeholder="–î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏..."
              />
            </div>

            {/* –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏ –ö–∞—Ç–µ–≥–æ—Ä–∏—è */}
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-slate-700 mb-1">
                  –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                </label>
                <select
                  name="priority"
                  value={formData.priority}
                  onChange={handleChange}
                  className="w-full px-3 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white text-slate-900"
                >
                  <option value="low">üü¢ –ù–∏–∑–∫–∏–π</option>
                  <option value="medium">üü° –°—Ä–µ–¥–Ω–∏–π</option>
                  <option value="high">üî¥ –í—ã—Å–æ–∫–∏–π</option>
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-slate-700 mb-1">
                  –í—Ä–µ–º—è (–º–∏–Ω)
                </label>
                <input
                  type="number"
                  name="estimatedTime"
                  value={formData.estimatedTime}
                  onChange={handleChange}
                  min="5"
                  max="480"
                  className="w-full px-3 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white text-slate-900"
                />
              </div>
            </div>

            {/* –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏ –î–∞—Ç–∞ */}
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-slate-700 mb-1">
                  –ö–∞—Ç–µ–≥–æ—Ä–∏—è
                </label>
                <input
                  type="text"
                  name="category"
                  value={formData.category}
                  onChange={handleChange}
                  className="w-full px-3 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white text-slate-900 placeholder:text-slate-500"
                  placeholder="–†–∞–±–æ—Ç–∞, –õ–∏—á–Ω–æ–µ..."
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-slate-700 mb-1">
                  –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                </label>
                <input
                  type="date"
                  name="dueDate"
                  value={formData.dueDate}
                  onChange={handleChange}
                  className="w-full px-3 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white text-slate-900"
                />
              </div>
            </div>

            {/* –ö–Ω–æ–ø–∫–∏ */}
            <div className="flex space-x-3 pt-4">
              <button
                type="button"
                onClick={onClose}
                className="flex-1 px-4 py-2 text-sm font-medium text-slate-700 bg-slate-100 border border-slate-300 rounded-md hover:bg-slate-200 transition-colors"
              >
                –û—Ç–º–µ–Ω–∞
              </button>
              <button
                type="submit"
                className="flex-1 px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors"
              >
                –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
};


--- src/components/DemoBanner.tsx ---

import { shouldUseMockServices } from '@/lib/mockFirebase'

export const DemoBanner = () => {
  if (!shouldUseMockServices()) {
    return null
  }

  return (
    <div className="bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700 p-4 mb-4">
      <div className="flex items-center">
        <div className="text-yellow-500 mr-3">
          <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
            <path
              fillRule="evenodd"
              d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z"
              clipRule="evenodd"
            />
          </svg>
        </div>
        <div className="flex-1">
          <p className="text-sm font-medium">
            üî• –î–µ–º–æ —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω
          </p>
          <p className="text-xs mt-1">
            –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Firebase –≤ —Ñ–∞–π–ª–µ .env.local –¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏. 
            –°–µ–π—á–∞—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏.
          </p>
        </div>
      </div>
    </div>
  )
}


--- src/components/Layout.tsx ---

import React, { useState } from 'react'
import { Link, useLocation, useNavigate } from 'react-router-dom'
import { useAuth } from '@/contexts/AuthContext'
import { useAppStore } from '@/stores/appStore'
import { usePomodoroStore } from '@/stores/pomodoroStore'
import { cn } from '@/utils/helpers'
import { ROUTES } from '@/constants'
import { DemoBanner } from './DemoBanner'
import { CreateTaskModal } from './CreateTaskModal'
import { WorkspaceSwitcher } from './WorkspaceSwitcher'

interface LayoutProps {
  children: React.ReactNode
}

const navigation = [
  { name: '–ü–∞–Ω–µ–ª—å', href: ROUTES.DASHBOARD, icon: 'üìä' },
  { name: '–ó–∞–¥–∞—á–∏', href: ROUTES.TASKS, icon: '‚úÖ' },
  { name: '–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞', href: ROUTES.WORKSPACES, icon: 'üè¢' },
  { name: '–ü—Ä–æ–µ–∫—Ç—ã', href: ROUTES.PROJECTS, icon: 'üìÅ' },
  { name: '–°–∞–¥', href: ROUTES.GARDEN, icon: 'üå±' },
  { name: '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞', href: ROUTES.ANALYTICS, icon: 'üìà' },
  { name: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏', href: ROUTES.SETTINGS, icon: '‚öôÔ∏è' },
]

export const Layout: React.FC<LayoutProps> = ({ children }) => {
  const location = useLocation()
  // const navigate = useNavigate() // TODO: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
  const { currentUser, logout } = useAuth()
  const { sidebarOpen, setSidebarOpen } = useAppStore()
  const { status, timeRemaining, sessionType, pauseTimer, resumeTimer, stopTimer } = usePomodoroStore()
  const [isCreateTaskModalOpen, setIsCreateTaskModalOpen] = useState(false)

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60)
    const secs = seconds % 60
    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`
  }

  const handleLogout = async () => {
    try {
      await logout()
    } catch (error) {
      console.error('Logout error:', error)
    }
  }

  const handleCreateTask = (taskData: any) => {
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
    console.log('–°–æ–∑–¥–∞—ë—Ç—Å—è –∑–∞–¥–∞—á–∞:', taskData)
    // TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å backend/Firebase
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Sidebar */}
      <div className={cn(
        'fixed inset-y-0 left-0 z-50 w-64 bg-white shadow-lg transform transition-transform duration-200 ease-in-out',
        sidebarOpen ? 'translate-x-0' : '-translate-x-full'
      )}>
        <div className="flex flex-col h-full">
          {/* Logo */}
          <div className="flex items-center justify-between h-16 px-6 border-b">
            <h1 className="text-xl font-bold text-gray-900">ProgressQuest</h1>
            <button
              onClick={() => setSidebarOpen(false)}
              className="p-2 rounded-md text-gray-400 hover:text-gray-600 hover:bg-gray-100 lg:hidden"
            >
              ‚úï
            </button>
          </div>

          {/* Pomodoro Timer */}
          {status !== 'idle' && (
            <div className="px-6 py-4 border-b bg-gradient-to-r from-blue-50 to-purple-50">
              <div className="text-center">
                <div className="text-xs font-medium text-gray-600 uppercase tracking-wide mb-1">
                  {sessionType === 'work' ? '–†–∞–±–æ—Ç–∞' : sessionType === 'short_break' ? '–ö–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤' : '–î–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤'}
                </div>
                <div className="text-2xl font-bold text-gray-900 mb-2">
                  {formatTime(timeRemaining)}
                </div>
                <div className="flex justify-center space-x-2">
                  {status === 'running' ? (
                    <button
                      onClick={pauseTimer}
                      className="px-3 py-1 text-xs bg-yellow-500 text-white rounded hover:bg-yellow-600"
                    >
                      –ü–∞—É–∑–∞
                    </button>
                  ) : (
                    <button
                      onClick={resumeTimer}
                      className="px-3 py-1 text-xs bg-green-500 text-white rounded hover:bg-green-600"
                    >
                      –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
                    </button>
                  )}
                  <button
                    onClick={stopTimer}
                    className="px-3 py-1 text-xs bg-red-500 text-white rounded hover:bg-red-600"
                  >
                    –°—Ç–æ–ø
                  </button>
                </div>
              </div>
            </div>
          )}

          {/* Navigation */}
          <nav className="flex-1 px-6 py-4 space-y-2">
            {navigation.map((item) => {
              const isActive = location.pathname === item.href ||
                (item.href !== ROUTES.DASHBOARD && location.pathname.startsWith(item.href))
              
              return (
                <Link
                  key={item.name}
                  to={item.href}
                  className={cn(
                    'flex items-center px-3 py-2 text-sm font-medium rounded-md transition-colors',
                    isActive
                      ? 'bg-blue-100 text-blue-700'
                      : 'text-gray-600 hover:text-gray-900 hover:bg-gray-100'
                  )}
                >
                  <span className="mr-3 text-lg">{item.icon}</span>
                  {item.name}
                </Link>
              )
            })}
          </nav>

          {/* User Menu */}
          <div className="px-6 py-4 border-t">
            <div className="flex items-center">
              <div className="flex-shrink-0">
                {currentUser?.photoURL ? (
                  <img
                    className="h-8 w-8 rounded-full"
                    src={currentUser.photoURL}
                    alt={currentUser.displayName || ''}
                  />
                ) : (
                  <div className="h-8 w-8 rounded-full bg-gray-300 flex items-center justify-center">
                    <span className="text-sm text-gray-600">üë§</span>
                  </div>
                )}
              </div>
              <div className="ml-3 flex-1">
                <p className="text-sm font-medium text-gray-900">
                  {currentUser?.displayName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}
                </p>
                <div className="flex space-x-2 mt-1">
                  <Link
                    to={ROUTES.PROFILE}
                    className="text-xs text-blue-600 hover:text-blue-800"
                  >
                    –ü—Ä–æ—Ñ–∏–ª—å
                  </Link>
                  <button
                    onClick={handleLogout}
                    className="text-xs text-red-600 hover:text-red-800"
                  >
                    –í—ã–π—Ç–∏
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Main content */}
      <div className={cn(
        'transition-all duration-200 ease-in-out',
        sidebarOpen ? 'lg:pl-64' : ''
      )}>
        {/* Top bar */}
        <div className="bg-white shadow-sm border-b h-16 flex items-center justify-between px-6">
          <button
            onClick={() => setSidebarOpen(!sidebarOpen)}
            className="p-2 rounded-md text-gray-400 hover:text-gray-600 hover:bg-gray-100"
          >
            ‚ò∞
          </button>
          
          <div className="flex items-center space-x-4">
            {/* Workspace Switcher */}
            <WorkspaceSwitcher className="w-64" compact={false} />
            
            {/* Quick actions */}
            <button
              onClick={() => setIsCreateTaskModalOpen(true)}
              className="px-3 py-2 text-sm bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"
            >
              + –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞
            </button>
          </div>
        </div>

        {/* Page content */}
        <main className="flex-1">
          <div className="p-6">
            <DemoBanner />
            {children}
          </div>
        </main>
      </div>

      {/* Overlay for mobile */}
      {sidebarOpen && (
        <div
          className="fixed inset-0 z-40 bg-black bg-opacity-50 lg:hidden"
          onClick={() => setSidebarOpen(false)}
        />
      )}

      {/* Create Task Modal */}
      <CreateTaskModal
        isOpen={isCreateTaskModalOpen}
        onClose={() => setIsCreateTaskModalOpen(false)}
        onSubmit={handleCreateTask}
      />
    </div>
  )
}


--- src/components/ProtectedRoute.tsx ---

import React from 'react'
import { Navigate, useLocation } from 'react-router-dom'
import { useAuth } from '@/contexts/AuthContext'

interface ProtectedRouteProps {
  children: React.ReactNode
}

export const ProtectedRoute: React.FC<ProtectedRouteProps> = ({ children }) => {
  const { currentUser, loading } = useAuth()
  // const location = useLocation() // TODO: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600"></div>
      </div>
    )
  }

  if (!currentUser) {
    // Redirect them to the home page instead of login page
    return <Navigate to="/" replace />
  }

  return <>{children}</>
}



--- src/components/WorkspaceCard.tsx ---

import React, { useState } from 'react'
import { WorkspaceClientDto } from '@/services/workspaceService'
import { useAppStore } from '@/stores/appStore'
import { formatDistanceToNow } from 'date-fns'
import { ru } from 'date-fns/locale'

interface WorkspaceCardProps {
  workspace: WorkspaceClientDto
  onEdit?: (workspace: WorkspaceClientDto) => void
  onDelete?: (workspaceId: string) => void
  onSelect?: (workspace: WorkspaceClientDto) => void
  isSelected?: boolean
  showActions?: boolean
  variant?: 'default' | 'compact' | 'detailed'
}

export const WorkspaceCard: React.FC<WorkspaceCardProps> = ({
  workspace,
  onEdit,
  onDelete,
  onSelect,
  isSelected = false,
  showActions = true,
  variant = 'default',
}) => {
  const [showDropdown, setShowDropdown] = useState(false)
  const { setCurrentWorkspace } = useAppStore()

  const handleSelect = () => {
    if (onSelect) {
      onSelect(workspace)
    } else {
      setCurrentWorkspace(workspace as any) // TODO: –ù—É–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ —Ç–∏–ø—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
    }
  }

  const handleEdit = (e: React.MouseEvent) => {
    e.stopPropagation()
    setShowDropdown(false)
    onEdit?.(workspace)
  }

  const handleDelete = (e: React.MouseEvent) => {
    e.stopPropagation()
    setShowDropdown(false)
    if (window.confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ "${workspace.name}"?`)) {
      onDelete?.(workspace.id)
    }
  }

  const getApproachIcon = (approach: string) => {
    switch (approach) {
      case 'CALENDAR': return 'üìÖ'
      case 'GTD': return '‚ö°'
      case 'KANBAN': return 'üìã'
      case 'EISENHOWER': return 'üéØ'
      default: return 'üìã'
    }
  }

  const getApproachLabel = (approach: string) => {
    switch (approach) {
      case 'CALENDAR': return '–ö–∞–ª–µ–Ω–¥–∞—Ä—å'
      case 'GTD': return 'GTD'
      case 'KANBAN': return '–ö–∞–Ω–±–∞–Ω'
      case 'EISENHOWER': return '–≠–π–∑–µ–Ω—Ö–∞—É—ç—Ä'
      default: return '–ö–∞–Ω–±–∞–Ω'
    }
  }

  const getRoleLabel = (role?: string) => {
    switch (role) {
      case 'owner': return '–í–ª–∞–¥–µ–ª–µ—Ü'
      case 'admin': return '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
      case 'manager': return '–ú–µ–Ω–µ–¥–∂–µ—Ä'
      case 'editor': return '–†–µ–¥–∞–∫—Ç–æ—Ä'
      case 'member': return '–£—á–∞—Å—Ç–Ω–∏–∫'
      case 'viewer': return '–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å'
      default: return '–£—á–∞—Å—Ç–Ω–∏–∫'
    }
  }

  const baseClasses = `
    relative bg-white rounded-lg border border-slate-200 shadow-sm hover:shadow-lg 
    transition-all duration-200 cursor-pointer group
    ${isSelected ? 'ring-2 ring-blue-500 border-blue-500' : 'hover:border-slate-300'}
  `

  const compactClasses = 'p-3'
  const defaultClasses = 'p-4'
  const detailedClasses = 'p-6'

  const cardClasses = `
    ${baseClasses} 
    ${variant === 'compact' ? compactClasses : variant === 'detailed' ? detailedClasses : defaultClasses}
  `

  return (
    <div className={cardClasses} onClick={handleSelect}>
      {/* Header */}
      <div className="flex items-start justify-between mb-3">
        <div className="flex items-start space-x-3 flex-1 min-w-0">
          {/* Type Icon */}
          <div className="flex-shrink-0 mt-1">
            <span className="text-lg">
              {workspace.isPersonal ? 'üë§' : 'üë•'}
            </span>
          </div>

          {/* Content */}
          <div className="flex-1 min-w-0">
            <h3 className="text-lg font-semibold text-slate-900 truncate">
              {workspace.name}
            </h3>
            
            {workspace.description && variant !== 'compact' && (
              <p className="text-sm text-slate-600 mt-1 line-clamp-2">
                {workspace.description}
              </p>
            )}

            {/* Metadata */}
            <div className="flex items-center space-x-4 mt-2 text-xs text-slate-500">
              <span className="flex items-center">
                {getApproachIcon(workspace.activeApproach)}
                <span className="ml-1">{getApproachLabel(workspace.activeApproach)}</span>
              </span>
              
              {workspace.currentUserWorkspaceRole && (
                <span className="px-2 py-1 bg-slate-100 rounded-full">
                  {getRoleLabel(workspace.currentUserWorkspaceRole)}
                </span>
              )}
              
              {variant === 'detailed' && (
                <span>
                  –û–±–Ω–æ–≤–ª–µ–Ω–æ {formatDistanceToNow(new Date(workspace.updatedAt), { 
                    addSuffix: true,
                    locale: ru 
                  })}
                </span>
              )}
            </div>
          </div>
        </div>

        {/* Actions */}
        {showActions && (
          <div className="relative flex-shrink-0">
            <button
              onClick={(e) => {
                e.stopPropagation()
                setShowDropdown(!showDropdown)
              }}
              className="p-1 text-slate-400 hover:text-slate-600 opacity-0 group-hover:opacity-100 transition-opacity"
            >
              <span className="block w-5 h-5 text-center">‚ãÆ</span>
            </button>

            {showDropdown && (
              <div className="absolute right-0 top-full mt-1 w-48 bg-white rounded-md shadow-lg border border-slate-200 z-10">
                <div className="py-1">
                  {onEdit && (
                    <button
                      onClick={handleEdit}
                      className="block w-full text-left px-4 py-2 text-sm text-slate-700 hover:bg-slate-50"
                    >
                      ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                    </button>
                  )}
                  
                  <button
                    onClick={handleSelect}
                    className="block w-full text-left px-4 py-2 text-sm text-slate-700 hover:bg-slate-50"
                  >
                    üéØ –í—ã–±—Ä–∞—Ç—å –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω–æ–µ
                  </button>
                  
                  {onDelete && workspace.currentUserWorkspaceRole === 'owner' && (
                    <>
                      <div className="border-t border-slate-200 my-1" />
                      <button
                        onClick={handleDelete}
                        className="block w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-red-50"
                      >
                        üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                      </button>
                    </>
                  )}
                </div>
              </div>
            )}
          </div>
        )}
      </div>

      {/* Tags */}
      {workspace.defaultTags && workspace.defaultTags.length > 0 && variant !== 'compact' && (
        <div className="flex flex-wrap gap-1 mt-3">
          {workspace.defaultTags.slice(0, 3).map((tag) => (
            <span
              key={tag}
              className="inline-block px-2 py-1 text-xs bg-blue-100 text-blue-700 rounded-full"
            >
              {tag}
            </span>
          ))}
          {workspace.defaultTags.length > 3 && (
            <span className="inline-block px-2 py-1 text-xs bg-slate-100 text-slate-600 rounded-full">
              +{workspace.defaultTags.length - 3}
            </span>
          )}
        </div>
      )}

      {/* Footer for detailed variant */}
      {variant === 'detailed' && (
        <div className="flex items-center justify-between mt-4 pt-3 border-t border-slate-100">
          <div className="flex items-center space-x-4 text-xs text-slate-500">
            <span>
              –°–æ–∑–¥–∞–Ω–æ {formatDistanceToNow(new Date(workspace.createdAt), { 
                addSuffix: true,
                locale: ru 
              })}
            </span>
          </div>
          
          <div className="flex items-center space-x-2">
            {workspace.isPersonal ? (
              <span className="text-xs text-slate-500">–õ–∏—á–Ω–æ–µ</span>
            ) : (
              <span className="text-xs text-slate-500">–ö–æ–º–∞–Ω–¥–Ω–æ–µ</span>
            )}
          </div>
        </div>
      )}

      {/* Click overlay to close dropdown */}
      {showDropdown && (
        <div
          className="fixed inset-0 z-5"
          onClick={(e) => {
            e.stopPropagation()
            setShowDropdown(false)
          }}
        />
      )}
    </div>
  )
}


--- src/components/WorkspaceModal.tsx ---

import React, { useState, useEffect } from 'react'
import { toast } from 'sonner'
import { WorkspaceClientDto, CreateWorkspacePayload } from '@/services/workspaceService'

interface WorkspaceModalProps {
  isOpen: boolean
  onClose: () => void
  onSubmit: (workspaceData: CreateWorkspacePayload) => void
  workspace?: WorkspaceClientDto | null
  mode: 'create' | 'edit'
}

interface WorkspaceFormData {
  name: string
  description: string
  isPersonal: boolean
  activeApproach: string
  defaultTags: string[]
  settings: {
    allowMembersToCreateTasks: boolean
    taskVisibility: string
  }
}

const APPROACH_OPTIONS = [
  { value: 'CALENDAR', label: 'üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å', description: '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ø–æ –¥–∞—Ç–∞–º' },
  { value: 'GTD', label: '‚ö° GTD', description: 'Getting Things Done' },
  { value: 'KANBAN', label: 'üìã –ö–∞–Ω–±–∞–Ω', description: '–î–æ—Å–∫–∏ —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏' },
  { value: 'EISENHOWER', label: 'üéØ –≠–π–∑–µ–Ω—Ö–∞—É—ç—Ä', description: '–ú–∞—Ç—Ä–∏—Ü–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤' },
]

const TASK_VISIBILITY_OPTIONS = [
  { value: 'all_visible', label: '–í—Å–µ –≤–∏–¥—è—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏' },
  { value: 'assigned_only', label: '–¢–æ–ª—å–∫–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏' },
  { value: 'owner_and_assigned', label: '–í–ª–∞–¥–µ–ª–µ—Ü –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ' },
]

export const WorkspaceModal: React.FC<WorkspaceModalProps> = ({
  isOpen,
  onClose,
  onSubmit,
  workspace,
  mode,
}) => {
  const [formData, setFormData] = useState<WorkspaceFormData>({
    name: '',
    description: '',
    isPersonal: true,
    activeApproach: 'CALENDAR',
    defaultTags: [],
    settings: {
      allowMembersToCreateTasks: true,
      taskVisibility: 'all_visible',
    },
  })

  const [tagInput, setTagInput] = useState('')
  const [isSubmitting, setIsSubmitting] = useState(false)

  // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ workspace –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    if (mode === 'edit' && workspace) {
      setFormData({
        name: workspace.name,
        description: workspace.description || '',
        isPersonal: workspace.isPersonal,
        activeApproach: workspace.activeApproach,
        defaultTags: workspace.defaultTags || [],
        settings: {
          allowMembersToCreateTasks: workspace.settings?.allowMembersToCreateTasks ?? true,
          taskVisibility: workspace.settings?.taskVisibility || 'all_visible',
        },
      })
    } else if (mode === 'create') {
      // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ workspace
      setFormData({
        name: '',
        description: '',
        isPersonal: true,
        activeApproach: 'CALENDAR',
        defaultTags: [],
        settings: {
          allowMembersToCreateTasks: true,
          taskVisibility: 'all_visible',
        },
      })
    }
  }, [mode, workspace, isOpen])

  const handleInputChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>
  ) => {
    const { name, value, type } = e.target
    
    if (type === 'checkbox') {
      const checked = (e.target as HTMLInputElement).checked
      if (name.startsWith('settings.')) {
        const settingKey = name.replace('settings.', '')
        setFormData(prev => ({
          ...prev,
          settings: {
            ...prev.settings,
            [settingKey]: checked,
          },
        }))
      } else {
        setFormData(prev => ({
          ...prev,
          [name]: checked,
        }))
      }
    } else if (name.startsWith('settings.')) {
      const settingKey = name.replace('settings.', '')
      setFormData(prev => ({
        ...prev,
        settings: {
          ...prev.settings,
          [settingKey]: value,
        },
      }))
    } else {
      setFormData(prev => ({
        ...prev,
        [name]: value,
      }))
    }
  }

  const addTag = () => {
    const tag = tagInput.trim()
    if (tag && !formData.defaultTags.includes(tag)) {
      setFormData(prev => ({
        ...prev,
        defaultTags: [...prev.defaultTags, tag],
      }))
      setTagInput('')
    }
  }

  const removeTag = (tagToRemove: string) => {
    setFormData(prev => ({
      ...prev,
      defaultTags: prev.defaultTags.filter(tag => tag !== tagToRemove),
    }))
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    
    if (!formData.name.trim()) {
      toast.error('–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ')
      return
    }

    setIsSubmitting(true)

    try {
      const payload: CreateWorkspacePayload = {
        name: formData.name.trim(),
        description: formData.description.trim() || null,
        isPersonal: formData.isPersonal,
        activeApproach: formData.activeApproach,
        defaultTags: formData.defaultTags,
        settings: formData.settings,
      }

      await onSubmit(payload)
      onClose()
      
      toast.success(
        mode === 'create' 
          ? '–†–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–æ!' 
          : '–†–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!'
      )
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞:', error)
      toast.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏')
    } finally {
      setIsSubmitting(false)
    }
  }

  if (!isOpen) return null

  return (
    <div className="fixed inset-0 z-50 overflow-y-auto">
      <div className="flex items-center justify-center min-h-screen px-4 pt-4 pb-20 text-center sm:block sm:p-0">
        {/* Overlay */}
        <div
          className="fixed inset-0 transition-opacity bg-black bg-opacity-50"
          onClick={onClose}
        />

        {/* Modal */}
        <div className="inline-block w-full max-w-2xl p-6 my-8 overflow-hidden text-left align-middle transition-all transform bg-white shadow-xl rounded-lg border border-gray-200">
          <div className="flex items-center justify-between mb-6">
            <h3 className="text-xl font-semibold text-slate-800">
              {mode === 'create' ? '–°–æ–∑–¥–∞—Ç—å —Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ' : '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ'}
            </h3>
            <button
              onClick={onClose}
              className="text-slate-400 hover:text-slate-600 transition-colors"
            >
              ‚úï
            </button>
          </div>

          <form onSubmit={handleSubmit} className="space-y-6">
            {/* –ù–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ */}
            <div className="grid grid-cols-1 gap-4">
              <div>
                <label className="block text-sm font-medium text-slate-700 mb-2">
                  –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ *
                </label>
                <input
                  type="text"
                  name="name"
                  value={formData.name}
                  onChange={handleInputChange}
                  className="w-full px-3 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white text-slate-900"
                  placeholder="–ú–æ–π –ø—Ä–æ–µ–∫—Ç, –†–∞–±–æ—Ç–∞, –õ–∏—á–Ω–æ–µ..."
                  required
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-slate-700 mb-2">
                  –û–ø–∏—Å–∞–Ω–∏–µ
                </label>
                <textarea
                  name="description"
                  value={formData.description}
                  onChange={handleInputChange}
                  rows={3}
                  className="w-full px-3 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white text-slate-900"
                  placeholder="–ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞..."
                />
              </div>
            </div>

            {/* –¢–∏–ø –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ */}
            <div>
              <label className="block text-sm font-medium text-slate-700 mb-2">
                –¢–∏–ø –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
              </label>
              <div className="flex space-x-4">
                <label className="flex items-center">
                  <input
                    type="radio"
                    name="isPersonal"
                    checked={formData.isPersonal}
                    onChange={() => setFormData(prev => ({ ...prev, isPersonal: true }))}
                    className="mr-2 text-blue-600"
                  />
                  <span className="text-sm text-slate-700">
                    üë§ –õ–∏—á–Ω–æ–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –º–µ–Ω—è)
                  </span>
                </label>
                <label className="flex items-center">
                  <input
                    type="radio"
                    name="isPersonal"
                    checked={!formData.isPersonal}
                    onChange={() => setFormData(prev => ({ ...prev, isPersonal: false }))}
                    className="mr-2 text-blue-600"
                  />
                  <span className="text-sm text-slate-700">
                    üë• –ö–æ–º–∞–Ω–¥–Ω–æ–µ (—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏)
                  </span>
                </label>
              </div>
            </div>

            {/* –ü–æ–¥—Ö–æ–¥ –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ */}
            <div>
              <label className="block text-sm font-medium text-slate-700 mb-2">
                –ü–æ–¥—Ö–æ–¥ –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞—á
              </label>
              <div className="grid grid-cols-2 gap-3">
                {APPROACH_OPTIONS.map((option) => (
                  <label
                    key={option.value}
                    className={`flex items-center p-3 border rounded-lg cursor-pointer transition-colors ${
                      formData.activeApproach === option.value
                        ? 'border-blue-500 bg-blue-50 text-blue-700'
                        : 'border-slate-300 hover:bg-slate-50'
                    }`}
                  >
                    <input
                      type="radio"
                      name="activeApproach"
                      value={option.value}
                      checked={formData.activeApproach === option.value}
                      onChange={handleInputChange}
                      className="sr-only"
                    />
                    <div>
                      <div className="font-medium">{option.label}</div>
                      <div className="text-xs text-slate-500">{option.description}</div>
                    </div>
                  </label>
                ))}
              </div>
            </div>

            {/* –¢–µ–≥–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é */}
            <div>
              <label className="block text-sm font-medium text-slate-700 mb-2">
                –¢–µ–≥–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
              </label>
              <div className="flex space-x-2 mb-2">
                <input
                  type="text"
                  value={tagInput}
                  onChange={(e) => setTagInput(e.target.value)}
                  onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), addTag())}
                  className="flex-1 px-3 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white text-slate-900"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥ –∏ –Ω–∞–∂–º–∏—Ç–µ Enter"
                />
                <button
                  type="button"
                  onClick={addTag}
                  className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"
                >
                  –î–æ–±–∞–≤–∏—Ç—å
                </button>
              </div>
              {formData.defaultTags.length > 0 && (
                <div className="flex flex-wrap gap-2">
                  {formData.defaultTags.map((tag) => (
                    <span
                      key={tag}
                      className="inline-flex items-center px-2 py-1 text-xs bg-blue-100 text-blue-800 rounded-full"
                    >
                      {tag}
                      <button
                        type="button"
                        onClick={() => removeTag(tag)}
                        className="ml-1 text-blue-600 hover:text-blue-800"
                      >
                        √ó
                      </button>
                    </span>
                  ))}
                </div>
              )}
            </div>

            {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ */}
            {!formData.isPersonal && (
              <div>
                <h4 className="text-sm font-medium text-slate-700 mb-3">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥—ã</h4>
                <div className="space-y-3">
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      name="settings.allowMembersToCreateTasks"
                      checked={formData.settings.allowMembersToCreateTasks}
                      onChange={handleInputChange}
                      className="mr-2 text-blue-600"
                    />
                    <span className="text-sm text-slate-700">
                      –†–∞–∑—Ä–µ—à–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞—á–∏
                    </span>
                  </label>

                  <div>
                    <label className="block text-sm font-medium text-slate-700 mb-1">
                      –í–∏–¥–∏–º–æ—Å—Ç—å –∑–∞–¥–∞—á
                    </label>
                    <select
                      name="settings.taskVisibility"
                      value={formData.settings.taskVisibility}
                      onChange={handleInputChange}
                      className="w-full px-3 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white text-slate-900"
                    >
                      {TASK_VISIBILITY_OPTIONS.map((option) => (
                        <option key={option.value} value={option.value}>
                          {option.label}
                        </option>
                      ))}
                    </select>
                  </div>
                </div>
              </div>
            )}

            {/* –ö–Ω–æ–ø–∫–∏ */}
            <div className="flex space-x-3 pt-4 border-t">
              <button
                type="button"
                onClick={onClose}
                disabled={isSubmitting}
                className="flex-1 px-4 py-2 text-sm font-medium text-slate-700 bg-slate-100 border border-slate-300 rounded-md hover:bg-slate-200 transition-colors disabled:opacity-50"
              >
                –û—Ç–º–µ–Ω–∞
              </button>
              <button
                type="submit"
                disabled={isSubmitting || !formData.name.trim()}
                className="flex-1 px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {isSubmitting 
                  ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' 
                  : mode === 'create' 
                    ? '–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ'
                    : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è'
                }
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  )
}


--- src/components/WorkspaceSwitcher.tsx ---

import React, { useState, useRef, useEffect } from 'react'
import { Link } from 'react-router-dom'
import { useWorkspaces } from '@/hooks/useWorkspaces'
import { useWorkspaceStore } from '@/stores/workspaceStore'
import { WorkspaceClientDto } from '@/services/workspaceService'
import { ROUTES } from '@/constants'

interface WorkspaceSwitcherProps {
  className?: string
  compact?: boolean
}

export const WorkspaceSwitcher: React.FC<WorkspaceSwitcherProps> = ({
  className = '',
  compact = false
}) => {
  const [isOpen, setIsOpen] = useState(false)
  const [, setSelectedWorkspaceId] = useState<string | null>(null)
  const dropdownRef = useRef<HTMLDivElement>(null)

  const { currentWorkspace, setCurrentWorkspace } = useWorkspaceStore()
  const { data: workspacesData, isLoading } = useWorkspaces()

  const workspaces = workspacesData?.workspaces || []
  const activeWorkspace = currentWorkspace || workspaces.find(ws => ws.isPersonal)

  // –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥—Ä–æ–ø–¥–∞—É–Ω –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
        setIsOpen(false)
      }
    }

    document.addEventListener('mousedown', handleClickOutside)
    return () => document.removeEventListener('mousedown', handleClickOutside)
  }, [])

  const handleWorkspaceSelect = (workspace: WorkspaceClientDto) => {
    setCurrentWorkspace(workspace as any) // TODO: –ø—Ä–∏–≤–µ—Å—Ç–∏ —Ç–∏–ø—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
    setSelectedWorkspaceId(workspace.id)
    setIsOpen(false)
  }

  const getWorkspaceIcon = (workspace: WorkspaceClientDto) => {
    return workspace.isPersonal ? 'üë§' : 'üë•'
  }

  const getApproachIcon = (approach: string) => {
    switch (approach) {
      case 'CALENDAR': return 'üìÖ'
      case 'GTD': return '‚ö°'
      case 'KANBAN': return 'üìã'
      case 'EISENHOWER': return 'üéØ'
      default: return 'üìã'
    }
  }

  if (isLoading) {
    return (
      <div className={`${className} animate-pulse`}>
        <div className="h-10 bg-slate-200 rounded"></div>
      </div>
    )
  }

  if (workspaces.length === 0) {
    return (
      <div className={className}>
        <Link
          to={ROUTES.WORKSPACES}
          className="flex items-center w-full px-3 py-2 text-sm bg-blue-50 text-blue-700 rounded-lg hover:bg-blue-100 transition-colors"
        >
          <span className="mr-2">‚ûï</span>
          {compact ? '–°–æ–∑–¥–∞—Ç—å' : '–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ'}
        </Link>
      </div>
    )
  }

  return (
    <div className={`relative ${className}`} ref={dropdownRef}>
      {/* Current Workspace Button */}
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="flex items-center justify-between w-full px-3 py-2 text-left bg-white border border-slate-200 rounded-lg hover:bg-slate-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
      >
        <div className="flex items-center min-w-0 flex-1">
          <span className="mr-2 text-lg flex-shrink-0">
            {activeWorkspace ? getWorkspaceIcon(activeWorkspace) : 'üè¢'}
          </span>
          <div className="min-w-0 flex-1">
            <div className="font-medium text-slate-900 truncate">
              {activeWorkspace?.name || '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ'}
            </div>
            {!compact && activeWorkspace && (
              <div className="text-xs text-slate-500 truncate">
                {getApproachIcon(activeWorkspace.activeApproach)} 
                {activeWorkspace.isPersonal ? ' –õ–∏—á–Ω–æ–µ' : ' –ö–æ–º–∞–Ω–¥–Ω–æ–µ'}
              </div>
            )}
          </div>
        </div>
        <span className={`ml-2 transition-transform ${isOpen ? 'rotate-180' : ''}`}>
          ‚ñº
        </span>
      </button>

      {/* Dropdown */}
      {isOpen && (
        <div className="absolute z-50 w-full mt-1 bg-white border border-slate-200 rounded-lg shadow-lg max-h-80 overflow-y-auto">
          {/* Personal Workspaces */}
          <div className="p-2">
            <div className="text-xs font-medium text-slate-500 uppercase tracking-wide px-2 py-1">
              –õ–∏—á–Ω—ã–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
            </div>
            {workspaces
              .filter(ws => ws.isPersonal)
              .map((workspace) => (
                <button
                  key={workspace.id}
                  onClick={() => handleWorkspaceSelect(workspace)}
                  className={`flex items-center w-full px-2 py-2 text-sm rounded-md transition-colors ${
                    workspace.id === activeWorkspace?.id
                      ? 'bg-blue-100 text-blue-700'
                      : 'text-slate-700 hover:bg-slate-100'
                  }`}
                >
                  <span className="mr-2">{getWorkspaceIcon(workspace)}</span>
                  <div className="flex-1 min-w-0">
                    <div className="font-medium truncate">{workspace.name}</div>
                    {!compact && (
                      <div className="text-xs text-slate-500 truncate">
                        {getApproachIcon(workspace.activeApproach)} {workspace.activeApproach}
                      </div>
                    )}
                  </div>
                  {workspace.id === activeWorkspace?.id && (
                    <span className="ml-2 text-blue-600">‚úì</span>
                  )}
                </button>
              ))}
          </div>

          {/* Team Workspaces */}
          {workspaces.some(ws => !ws.isPersonal) && (
            <div className="border-t border-slate-200 p-2">
              <div className="text-xs font-medium text-slate-500 uppercase tracking-wide px-2 py-1">
                –ö–æ–º–∞–Ω–¥–Ω—ã–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
              </div>
              {workspaces
                .filter(ws => !ws.isPersonal)
                .map((workspace) => (
                  <button
                    key={workspace.id}
                    onClick={() => handleWorkspaceSelect(workspace)}
                    className={`flex items-center w-full px-2 py-2 text-sm rounded-md transition-colors ${
                      workspace.id === activeWorkspace?.id
                        ? 'bg-blue-100 text-blue-700'
                        : 'text-slate-700 hover:bg-slate-100'
                    }`}
                  >
                    <span className="mr-2">{getWorkspaceIcon(workspace)}</span>
                    <div className="flex-1 min-w-0">
                      <div className="font-medium truncate">{workspace.name}</div>
                      {!compact && (
                        <div className="text-xs text-slate-500 truncate">
                          {getApproachIcon(workspace.activeApproach)} {workspace.activeApproach}
                          {workspace.currentUserWorkspaceRole && (
                            <span className="ml-1">
                              ({workspace.currentUserWorkspaceRole === 'owner' ? '–í–ª–∞–¥–µ–ª–µ—Ü' : '–£—á–∞—Å—Ç–Ω–∏–∫'})
                            </span>
                          )}
                        </div>
                      )}
                    </div>
                    {workspace.id === activeWorkspace?.id && (
                      <span className="ml-2 text-blue-600">‚úì</span>
                    )}
                  </button>
                ))}
            </div>
          )}

          {/* Actions */}
          <div className="border-t border-slate-200 p-2">
            <Link
              to={ROUTES.WORKSPACES}
              onClick={() => setIsOpen(false)}
              className="flex items-center w-full px-2 py-2 text-sm text-blue-600 hover:bg-blue-50 rounded-md transition-colors"
            >
              <span className="mr-2">‚öôÔ∏è</span>
              –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞–º–∏
            </Link>
            <Link
              to={`${ROUTES.WORKSPACES}?create=true`}
              onClick={() => setIsOpen(false)}
              className="flex items-center w-full px-2 py-2 text-sm text-green-600 hover:bg-green-50 rounded-md transition-colors"
            >
              <span className="mr-2">‚ûï</span>
              –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ
            </Link>
          </div>
        </div>
      )}
    </div>
  )
}


--- src/components/ui/button.tsx ---

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline:
          "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }


--- src/components/ui/card.tsx ---

import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-xl border bg-card text-card-foreground shadow",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("font-semibold leading-none tracking-tight", className)}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }


--- src/components/ui/dialog.tsx ---

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogTrigger,
  DialogClose,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}


--- src/components/ui/input.tsx ---

import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }


--- src/components/ui/label.tsx ---

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }


--- src/components/ui/select.tsx ---

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("px-2 py-1.5 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute right-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>
    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}


--- src/constants/index.ts ---

// Application constants
export const APP_NAME = 'ProgressQuest Universal'
export const APP_VERSION = '1.0.0'

// Routes
export const ROUTES = {
  HOME: '/',
  LOGIN: '/login',
  REGISTER: '/register',
  DASHBOARD: '/app',
  TASKS: '/app/tasks',
  WORKSPACES: '/app/workspaces',
  PROJECTS: '/app/projects',
  GARDEN: '/app/garden',
  ANALYTICS: '/app/analytics',
  SETTINGS: '/app/settings',
  PROFILE: '/app/profile',
} as const

// Local Storage Keys
export const STORAGE_KEYS = {
  THEME: 'theme',
  USER_PREFERENCES: 'user_preferences',
  POMODORO_SETTINGS: 'pomodoro_settings',
  LAST_WORKSPACE: 'last_workspace',
} as const

// API Configuration
export const API_CONFIG = {
  TIMEOUT: 30000,
  RETRY_ATTEMPTS: 3,
  RETRY_DELAY: 1000,
} as const

// Pagination
export const PAGINATION = {
  DEFAULT_PAGE_SIZE: 20,
  MAX_PAGE_SIZE: 100,
} as const

// Validation
export const VALIDATION = {
  MIN_PASSWORD_LENGTH: 6,
  MAX_TASK_TITLE_LENGTH: 100,
  MAX_TASK_DESCRIPTION_LENGTH: 1000,
  MAX_PROJECT_NAME_LENGTH: 50,
  MAX_WORKSPACE_NAME_LENGTH: 50,
} as const

// Pomodoro Timer
export const POMODORO = {
  DEFAULT_WORK_DURATION: 25 * 60, // 25 minutes in seconds
  DEFAULT_SHORT_BREAK: 5 * 60,   // 5 minutes in seconds
  DEFAULT_LONG_BREAK: 15 * 60,   // 15 minutes in seconds
  DEFAULT_LONG_BREAK_INTERVAL: 4, // Every 4 pomodoros
} as const

// XP and Levels
export const GAMIFICATION = {
  XP_PER_TASK: 10,
  XP_PER_POMODORO: 5,
  XP_BONUS_STREAK: 5,
  BASE_XP_FOR_LEVEL: 100,
  XP_MULTIPLIER: 1.5,
} as const

// Theme Colors
export const THEME_COLORS = {
  LIGHT: 'light',
  DARK: 'dark',
  SYSTEM: 'system',
} as const

// Task Status Colors
export const STATUS_COLORS = {
  todo: 'bg-gray-100 text-gray-800',
  in_progress: 'bg-blue-100 text-blue-800',
  review: 'bg-purple-100 text-purple-800',
  done: 'bg-green-100 text-green-800',
  cancelled: 'bg-red-100 text-red-800',
} as const

// Priority Colors
export const PRIORITY_COLORS = {
  low: 'bg-green-100 text-green-800',
  medium: 'bg-yellow-100 text-yellow-800',
  high: 'bg-orange-100 text-orange-800',
  urgent: 'bg-red-100 text-red-800',
} as const

// Garden Plant Categories
export const PLANT_CATEGORIES = {
  FLOWERS: 'flowers',
  TREES: 'trees',
  HERBS: 'herbs',
  MUSHROOMS: 'mushrooms',
} as const

// Achievement Categories
export const ACHIEVEMENT_CATEGORIES = {
  TASKS: 'tasks',
  POMODORO: 'pomodoro',
  STREAK: 'streak',
  SOCIAL: 'social',
  GARDEN: 'garden',
} as const

// Notification Types
export const NOTIFICATION_TYPES = {
  TASK_REMINDER: 'task_reminder',
  POMODORO_BREAK: 'pomodoro_break',
  ACHIEVEMENT: 'achievement',
  INVITATION: 'invitation',
  MENTION: 'mention',
  SYSTEM: 'system',
} as const

// Error Messages
export const ERROR_MESSAGES = {
  NETWORK_ERROR: '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.',
  UNAUTHORIZED: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.',
  NOT_FOUND: '–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π —Ä–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.',
  VALIDATION_ERROR: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö.',
  UNKNOWN_ERROR: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.',
} as const

// Success Messages
export const SUCCESS_MESSAGES = {
  TASK_CREATED: '–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞',
  TASK_UPDATED: '–ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞',
  TASK_DELETED: '–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞',
  PROJECT_CREATED: '–ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω',
  PROJECT_UPDATED: '–ü—Ä–æ–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω',
  SETTINGS_SAVED: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã',
  PROFILE_UPDATED: '–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω',
} as const


--- src/contexts/AuthContext.tsx ---

import { createContext, useContext, useEffect, useState, ReactNode } from 'react'
import {
  User,
  signInWithEmailAndPassword,
  createUserWithEmailAndPassword,
  signOut,
  onAuthStateChanged,
  updateProfile,
  sendEmailVerification,
  sendPasswordResetEmail,
  signInWithPopup,
  updatePassword,
  EmailAuthProvider,
  reauthenticateWithCredential,
} from 'firebase/auth'
import { auth, googleProvider } from '@/lib/firebase' // Import googleProvider
import { toast } from 'sonner'

interface AuthContextType {
  currentUser: User | null
  login: (email: string, password: string) => Promise<void>
  register: (email: string, password: string, displayName: string) => Promise<void>
  logout: () => Promise<void>
  loginWithGoogle: () => Promise<void>
  resetPassword: (email: string) => Promise<void>
  updateUserProfile: (displayName: string) => Promise<void>
  changePassword: (currentPassword: string, newPassword: string) => Promise<void>
  loading: boolean
  isAuthenticated: boolean
}

const AuthContext = createContext<AuthContextType | undefined>(undefined)

export function useAuth() {
  const context = useContext(AuthContext)
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider')
  }
  return context
}

interface AuthProviderProps {
  children: ReactNode
}

export function AuthProvider({ children }: AuthProviderProps) {
  const [currentUser, setCurrentUser] = useState<User | null>(null)
  const [loading, setLoading] = useState(true)

  const login = async (email: string, password: string) => {
    try {
      await signInWithEmailAndPassword(auth, email, password)
      toast.success('–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É!')
    } catch (error: any) {
      console.error('Login error:', error)
      switch (error.code) {
        case 'auth/user-not-found':
          toast.error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω')
          break
        case 'auth/wrong-password':
          toast.error('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å')
          break
        case 'auth/invalid-email':
          toast.error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email')
          break
        case 'auth/too-many-requests':
          toast.error('–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')
          break
        case 'auth/network-request-failed':
          toast.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ')
          break
        default:
          toast.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ' + error.message)
      }
      throw error
    }
  }

  const register = async (email: string, password: string, displayName: string) => {
    try {
      const result = await createUserWithEmailAndPassword(auth, email, password)
      await updateProfile(result.user, { displayName })
      await sendEmailVerification(result.user)
      toast.success('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ email –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.')
    } catch (error: any) {
      console.error('Registration error:', error)
      switch (error.code) {
        case 'auth/email-already-in-use':
          toast.error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
          break
        case 'auth/weak-password':
          toast.error('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤')
          break
        case 'auth/invalid-email':
          toast.error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email')
          break
        case 'auth/network-request-failed':
          toast.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ')
          break
        default:
          toast.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ' + error.message)
      }
      throw error
    }
  }

  const logout = async () => {
    try {
      await signOut(auth)
      toast.success('–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã')
    } catch (error: any) {
      console.error('Logout error:', error)
      toast.error('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã')
      throw error
    }
  }

  const loginWithGoogle = async () => {
    try {
      await signInWithPopup(auth, googleProvider) // Use imported googleProvider
      toast.success('–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ Google!')
    } catch (error: any) {
      console.error('Google login error:', error)
      if (error.code === 'auth/popup-closed-by-user' || error.code === 'auth/cancelled-popup-request') {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã–ª –æ–∫–Ω–æ - –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        return
      } else if (error.code === 'auth/network-request-failed') {
        toast.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ')
      } else {
        toast.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Google: ' + error.message)
      }
      throw error
    }
  }

  const resetPassword = async (email: string) => {
    try {
      await sendPasswordResetEmail(auth, email)
      toast.success('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Å–±—Ä–æ—Å—É –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ email')
    } catch (error: any) {
      console.error('Password reset error:', error)
      switch (error.code) {
        case 'auth/user-not-found':
          toast.error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω')
          break
        case 'auth/invalid-email':
          toast.error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email')
          break
        case 'auth/network-request-failed':
          toast.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ')
          break
        default:
          toast.error('–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è: ' + error.message)
      }
      throw error
    }
  }

  const updateUserProfile = async (displayName: string) => {
    try {
      if (currentUser) {
        await updateProfile(currentUser, { displayName })
        toast.success('–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω')
      }
    } catch (error: any) {
      console.error('Profile update error:', error)
      if (error.code === 'auth/network-request-failed') {
        toast.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ')
      } else {
        toast.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: ' + error.message)
      }
      throw error
    }
  }

  const changePassword = async (currentPassword: string, newPassword: string) => {
    try {
      if (currentUser && currentUser.email) {
        const credential = EmailAuthProvider.credential(currentUser.email, currentPassword)
        await reauthenticateWithCredential(currentUser, credential)
        await updatePassword(currentUser, newPassword)
        toast.success('–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω')
      }
    } catch (error: any) {
      console.error('Password change error:', error)
      switch (error.code) {
        case 'auth/wrong-password':
          toast.error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å')
          break
        case 'auth/weak-password':
          toast.error('–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤')
          break
        case 'auth/network-request-failed':
          toast.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ')
          break
        default:
          toast.error('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è: ' + error.message)
      }
      throw error
    }
  }

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, (user) => {
      setCurrentUser(user)
      setLoading(false)
    })

    return unsubscribe
  }, [])

  const value: AuthContextType = {
    currentUser,
    login,
    register,
    logout,
    loginWithGoogle,
    resetPassword,
    updateUserProfile,
    changePassword,
    loading,
    isAuthenticated: !!currentUser,
  }

  return (
    <AuthContext.Provider value={value}>
      {!loading && children}
    </AuthContext.Provider>
  )
}



--- src/contexts/ThemeContext.tsx ---

import { createContext, useContext, useEffect, useState, ReactNode } from 'react'

type Theme = 'light' | 'dark' | 'system'

interface ThemeContextType {
  theme: Theme
  setTheme: (theme: Theme) => void
  resolvedTheme: 'light' | 'dark'
}

const ThemeContext = createContext<ThemeContextType | undefined>(undefined)

export function useTheme() {
  const context = useContext(ThemeContext)
  if (context === undefined) {
    throw new Error('useTheme must be used within a ThemeProvider')
  }
  return context
}

interface ThemeProviderProps {
  children: ReactNode
  defaultTheme?: Theme
}

export function ThemeProvider({ children, defaultTheme = 'system' }: ThemeProviderProps) {
  const [theme, setTheme] = useState<Theme>(() => {
    if (typeof window !== 'undefined') {
      return (localStorage.getItem('theme') as Theme) || defaultTheme
    }
    return defaultTheme
  })

  const [resolvedTheme, setResolvedTheme] = useState<'light' | 'dark'>(() => {
    if (typeof window !== 'undefined') {
      if (theme === 'system') {
        return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'
      }
      return theme === 'dark' ? 'dark' : 'light'
    }
    return 'light'
  })

  useEffect(() => {
    const root = window.document.documentElement

    if (theme === 'system') {
      const systemTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'
      setResolvedTheme(systemTheme)
      root.classList.remove('light', 'dark')
      root.classList.add(systemTheme)
    } else {
      setResolvedTheme(theme === 'dark' ? 'dark' : 'light')
      root.classList.remove('light', 'dark')
      root.classList.add(theme)
    }
  }, [theme])

  useEffect(() => {
    localStorage.setItem('theme', theme)
  }, [theme])

  useEffect(() => {
    if (theme === 'system') {
      const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)')
      
      const handleChange = (e: MediaQueryListEvent) => {
        const systemTheme = e.matches ? 'dark' : 'light'
        setResolvedTheme(systemTheme)
        const root = window.document.documentElement
        root.classList.remove('light', 'dark')
        root.classList.add(systemTheme)
      }

      mediaQuery.addEventListener('change', handleChange)
      return () => mediaQuery.removeEventListener('change', handleChange)
    }
  }, [theme])

  const value: ThemeContextType = {
    theme,
    setTheme,
    resolvedTheme,
  }

  return (
    <ThemeContext.Provider value={value}>
      {children}
    </ThemeContext.Provider>
  )
}


--- src/hooks/useTasks.ts ---

import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'
import { TaskService, TaskFilters, TaskCreateData } from '@/services/taskService'
import { UserService } from '@/services/userService'
import { Task, TaskStatus } from '@/types'
import { toast } from 'sonner'
import { SUCCESS_MESSAGES, GAMIFICATION } from '@/constants'

// Query keys
export const TASK_KEYS = {
  all: ['tasks'] as const,
  lists: () => [...TASK_KEYS.all, 'list'] as const,
  list: (filters: TaskFilters) => [...TASK_KEYS.lists(), filters] as const,
  details: () => [...TASK_KEYS.all, 'detail'] as const,
  detail: (id: string) => [...TASK_KEYS.details(), id] as const,
  stats: (userId: string) => [...TASK_KEYS.all, 'stats', userId] as const,
}

// Get tasks with filters
export function useTasks(filters: TaskFilters = {}, pageSize: number = 20) {
  return useQuery({
    queryKey: TASK_KEYS.list(filters),
    queryFn: () => TaskService.getTasks(filters, pageSize),
    staleTime: 5 * 60 * 1000, // 5 minutes
  })
}

// Get single task
export function useTask(taskId: string) {
  return useQuery({
    queryKey: TASK_KEYS.detail(taskId),
    queryFn: () => TaskService.getTask(taskId),
    enabled: !!taskId,
  })
}

// Get task statistics
export function useTaskStats(userId: string, workspaceId?: string) {
  return useQuery({
    queryKey: TASK_KEYS.stats(userId),
    queryFn: () => TaskService.getTasksStats(userId, workspaceId),
    enabled: !!userId,
    staleTime: 2 * 60 * 1000, // 2 minutes
  })
}

// Create task mutation
export function useCreateTask() {
  const queryClient = useQueryClient()

  return useMutation({
    mutationFn: ({ userId, taskData }: { userId: string; taskData: TaskCreateData }) =>
      TaskService.createTask(userId, taskData),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: TASK_KEYS.lists() })
      queryClient.invalidateQueries({ queryKey: TASK_KEYS.all })
      toast.success(SUCCESS_MESSAGES.TASK_CREATED)
    },
    onError: (error: Error) => {
      toast.error(error.message)
    },
  })
}

// Update task mutation
export function useUpdateTask() {
  const queryClient = useQueryClient()

  return useMutation({
    mutationFn: ({ taskId, updates }: { taskId: string; updates: Partial<Task> }) =>
      TaskService.updateTask(taskId, updates),
    onSuccess: (_, variables) => {
      queryClient.invalidateQueries({ queryKey: TASK_KEYS.detail(variables.taskId) })
      queryClient.invalidateQueries({ queryKey: TASK_KEYS.lists() })
      toast.success(SUCCESS_MESSAGES.TASK_UPDATED)
    },
    onError: (error: Error) => {
      toast.error(error.message)
    },
  })
}

// Update task status with XP reward
export function useUpdateTaskStatus() {
  const queryClient = useQueryClient()

  return useMutation({
    mutationFn: async ({ 
      taskId, 
      status, 
      userId 
    }: { 
      taskId: string; 
      status: TaskStatus; 
      userId: string 
    }) => {
      await TaskService.updateTaskStatus(taskId, status)
      
      // Award XP for completing tasks
      if (status === 'done') {
        await UserService.addXP(userId, GAMIFICATION.XP_PER_TASK)
        await UserService.incrementTaskCount(userId)
      }
    },
    onSuccess: (_, variables) => {
      queryClient.invalidateQueries({ queryKey: TASK_KEYS.detail(variables.taskId) })
      queryClient.invalidateQueries({ queryKey: TASK_KEYS.lists() })
      queryClient.invalidateQueries({ queryKey: TASK_KEYS.stats(variables.userId) })
      
      if (variables.status === 'done') {
        toast.success('–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! +' + GAMIFICATION.XP_PER_TASK + ' XP')
      } else {
        toast.success(SUCCESS_MESSAGES.TASK_UPDATED)
      }
    },
    onError: (error: Error) => {
      toast.error(error.message)
    },
  })
}

// Delete task mutation
export function useDeleteTask() {
  const queryClient = useQueryClient()

  return useMutation({
    mutationFn: TaskService.deleteTask,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: TASK_KEYS.lists() })
      toast.success(SUCCESS_MESSAGES.TASK_DELETED)
    },
    onError: (error: Error) => {
      toast.error(error.message)
    },
  })
}

// Archive task mutation
export function useArchiveTask() {
  const queryClient = useQueryClient()

  return useMutation({
    mutationFn: ({ taskId, isArchived }: { taskId: string; isArchived: boolean }) =>
      TaskService.archiveTask(taskId, isArchived),
    onSuccess: (_, variables) => {
      queryClient.invalidateQueries({ queryKey: TASK_KEYS.detail(variables.taskId) })
      queryClient.invalidateQueries({ queryKey: TASK_KEYS.lists() })
      toast.success(variables.isArchived ? '–ó–∞–¥–∞—á–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞' : '–ó–∞–¥–∞—á–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞')
    },
    onError: (error: Error) => {
      toast.error(error.message)
    },
  })
}

// Add comment mutation
export function useAddComment() {
  const queryClient = useQueryClient()

  return useMutation({
    mutationFn: ({ 
      taskId, 
      userId, 
      content 
    }: { 
      taskId: string; 
      userId: string; 
      content: string 
    }) => TaskService.addComment(taskId, userId, content),
    onSuccess: (_, variables) => {
      queryClient.invalidateQueries({ queryKey: TASK_KEYS.detail(variables.taskId) })
      toast.success('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω')
    },
    onError: (error: Error) => {
      toast.error(error.message)
    },
  })
}

// Increment pomodoro count mutation
export function useIncrementPomodoro() {
  const queryClient = useQueryClient()

  return useMutation({
    mutationFn: ({ 
      taskId, 
      userId 
    }: { 
      taskId: string; 
      userId: string 
    }) => {
      return Promise.all([
        TaskService.incrementPomodoroCount(taskId),
        UserService.addXP(userId, GAMIFICATION.XP_PER_POMODORO),
        UserService.incrementPomodoroCount(userId)
      ])
    },
    onSuccess: (_, variables) => {
      queryClient.invalidateQueries({ queryKey: TASK_KEYS.detail(variables.taskId) })
      queryClient.invalidateQueries({ queryKey: TASK_KEYS.lists() })
      toast.success('Pomodoro –∑–∞–≤–µ—Ä—à—ë–Ω! +' + GAMIFICATION.XP_PER_POMODORO + ' XP')
    },
    onError: (error: Error) => {
      toast.error(error.message)
    },
  })
}

// Bulk update tasks mutation
export function useBulkUpdateTasks() {
  const queryClient = useQueryClient()

  return useMutation({
    mutationFn: TaskService.bulkUpdateTasks,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: TASK_KEYS.lists() })
      toast.success('–ó–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã')
    },
    onError: (error: Error) => {
      toast.error(error.message)
    },
  })
}


--- src/hooks/useWorkspaces.ts ---

import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'
import { toast } from 'sonner'
import workspaceService, {
  CreateWorkspacePayload,
  UpdateWorkspacePayload,
  WorkspaceClientDto
} from '@/services/workspaceService'

// Query keys –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
export const workspaceKeys = {
  all: ['workspaces'] as const,
  lists: () => [...workspaceKeys.all, 'list'] as const,
  list: (filters: Record<string, any>) => [...workspaceKeys.lists(), { filters }] as const,
  details: () => [...workspaceKeys.all, 'detail'] as const,
  detail: (id: string) => [...workspaceKeys.details(), id] as const,
}

/**
 * –•—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export function useWorkspaces() {
  return useQuery({
    queryKey: workspaceKeys.lists(),
    queryFn: () => workspaceService.getUserWorkspaces(),
    staleTime: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç
    retry: (failureCount, error: any) => {
      // –ù–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      if (error?.message?.includes('–Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω')) return false
      return failureCount < 2
    },
  })
}

/**
 * –•—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
 */
export function useWorkspaceDetails(workspaceId: string, enabled = true) {
  return useQuery({
    queryKey: workspaceKeys.detail(workspaceId),
    queryFn: () => workspaceService.getWorkspaceDetails(workspaceId),
    enabled: !!workspaceId && enabled,
    staleTime: 2 * 60 * 1000, // 2 –º–∏–Ω—É—Ç—ã
    retry: (failureCount, error: any) => {
      if (error?.message?.includes('–Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω')) return false
      if (error?.message?.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω')) return false
      return failureCount < 2
    },
  })
}

/**
 * –•—É–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
 */
export function useCreateWorkspace() {
  const queryClient = useQueryClient()

  return useMutation({
    mutationFn: (payload: CreateWorkspacePayload) =>
      workspaceService.createWorkspace(payload),
    onSuccess: (data) => {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤
      queryClient.invalidateQueries({ queryKey: workspaceKeys.lists() })
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –≤ –∫—ç—à –¥–µ—Ç–∞–ª–µ–π
      queryClient.setQueryData(
        workspaceKeys.detail(data.workspace.id),
        { workspace: data.workspace }
      )

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
      toast.success('–†–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!', {
        description: `"${data.workspace.name}" –≥–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é`,
      })
    },
    onError: (error: Error) => {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞:', error)
      toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ', {
        description: error.message,
      })
    },
  })
}

/**
 * –•—É–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
 */
export function useUpdateWorkspace() {
  const queryClient = useQueryClient()

  return useMutation({
    mutationFn: (payload: UpdateWorkspacePayload) =>
      workspaceService.updateWorkspace(payload),
    onSuccess: (data, variables) => {
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –¥–µ—Ç–∞–ª–µ–π —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
      queryClient.setQueryData(
        workspaceKeys.detail(variables.workspaceId),
        { workspace: data.updatedWorkspace }
      )

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤
      queryClient.setQueryData(
        workspaceKeys.lists(),
        (oldData: any) => {
          if (!oldData?.workspaces) return oldData
          
          return {
            ...oldData,
            workspaces: oldData.workspaces.map((workspace: WorkspaceClientDto) =>
              workspace.id === variables.workspaceId
                ? data.updatedWorkspace
                : workspace
            ),
          }
        }
      )

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
      toast.success('–†–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!', {
        description: `"${data.updatedWorkspace.name}" —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ`,
      })
    },
    onError: (error: Error) => {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞:', error)
      toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ', {
        description: error.message,
      })
    },
  })
}

/**
 * –•—É–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
 */
export function useDeleteWorkspace() {
  const queryClient = useQueryClient()

  return useMutation({
    mutationFn: (workspaceId: string) =>
      workspaceService.deleteWorkspace(workspaceId),
    onSuccess: (data, workspaceId) => {
      // –£–¥–∞–ª—è–µ–º –∏–∑ –∫—ç—à–∞ –¥–µ—Ç–∞–ª–µ–π
      queryClient.removeQueries({
        queryKey: workspaceKeys.detail(workspaceId),
      })

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤
      queryClient.setQueryData(
        workspaceKeys.lists(),
        (oldData: any) => {
          if (!oldData?.workspaces) return oldData
          
          return {
            ...oldData,
            workspaces: oldData.workspaces.filter(
              (workspace: WorkspaceClientDto) => workspace.id !== workspaceId
            ),
          }
        }
      )

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
      toast.success('–†–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–æ', {
        description: data.message,
      })
    },
    onError: (error: Error) => {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞:', error)
      toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ', {
        description: error.message,
      })
    },
  })
}

/**
 * –•—É–∫ –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
 */
export function usePrefetchWorkspaceDetails() {
  const queryClient = useQueryClient()

  return (workspaceId: string) => {
    queryClient.prefetchQuery({
      queryKey: workspaceKeys.detail(workspaceId),
      queryFn: () => workspaceService.getWorkspaceDetails(workspaceId),
      staleTime: 2 * 60 * 1000,
    })
  }
}

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π —Ö—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–∫—Ç–∏–≤–Ω—ã–º —Ä–∞–±–æ—á–∏–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ–º
 */
export function useActiveWorkspace(workspaceId?: string | null) {
  const { data: workspacesData } = useWorkspaces()
  const { data: workspaceDetails } = useWorkspaceDetails(
    workspaceId || '',
    !!workspaceId
  )

  // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω ID, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
  if (workspaceId && workspaceDetails) {
    return {
      workspace: workspaceDetails.workspace,
      isLoading: false,
      error: null,
    }
  }

  // –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤–æ–µ –ª–∏—á–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–∑ —Å–ø–∏—Å–∫–∞
  const personalWorkspace = workspacesData?.workspaces?.find(
    (ws) => ws.isPersonal
  )

  return {
    workspace: personalWorkspace || null,
    isLoading: !workspacesData,
    error: null,
  }
}


--- src/lib/firebase.ts ---

// /ProgressQuestWeb/src/lib/firebase.ts

import { initializeApp, getApps, getApp } from "firebase/app";
import { getAuth, GoogleAuthProvider } from "firebase/auth";
import { getFirestore } from "firebase/firestore";
import { getFunctions } from "firebase/functions";
import { getStorage } from "firebase/storage";

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Firebase, —Å—á–∏—Ç—ã–≤–∞–µ–º–∞—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Vite
const firebaseConfig = {
  apiKey: import.meta.env.VITE_FIREBASE_API_KEY,
  authDomain: import.meta.env.VITE_FIREBASE_AUTH_DOMAIN,
  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID,
  storageBucket: import.meta.env.VITE_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: import.meta.env.VITE_FIREBASE_MESSAGING_SENDER_ID,
  appId: import.meta.env.VITE_FIREBASE_APP_ID,
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (—Å–∏–Ω–≥–ª—Ç–æ–Ω)
// –ü—Ä–æ–≤–µ—Ä–∫–∞ `getApps().length` –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø—Ä–∏ Hot Reloading –≤ Vite
const app = !getApps().length ? initializeApp(firebaseConfig) : getApp();

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤ —Å–µ—Ä–≤–∏—Å–æ–≤
const auth = getAuth(app);
const db = getFirestore(app);
const functions = getFunctions(app, import.meta.env.VITE_FIREBASE_FUNCTIONS_REGION || "us-central1");
const storage = getStorage(app);
const googleProvider = new GoogleAuthProvider();

// –ü—Ä–æ–¥–∞–∫—à–µ–Ω –≤–µ—Ä—Å–∏—è - —ç–º—É–ª—è—Ç–æ—Ä—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã
console.log('Firebase initialized for production');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Auth Provider
googleProvider.addScope('email');
googleProvider.addScope('profile');

// –≠–∫—Å–ø–æ—Ä—Ç –≥–æ—Ç–æ–≤—ã—Ö –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤
export { app, auth, db, functions, storage, googleProvider };

--- src/lib/mockFirebase.ts ---

// Mock Firebase services for development when no real Firebase is configured

export const mockAuth = {
  currentUser: null,
  onAuthStateChanged: (callback: (user: any) => void) => {
    // Simulate no user logged in
    setTimeout(() => callback(null), 100);
    return () => {}; // Unsubscribe function
  },
  signInWithEmailAndPassword: async () => {
    throw new Error('Demo mode: Please configure Firebase to enable authentication');
  },
  createUserWithEmailAndPassword: async () => {
    throw new Error('Demo mode: Please configure Firebase to enable authentication');
  },
  signOut: async () => {
    throw new Error('Demo mode: Please configure Firebase to enable authentication');
  },
  signInWithPopup: async () => {
    throw new Error('Demo mode: Please configure Firebase to enable authentication');
  },
  sendPasswordResetEmail: async () => {
    throw new Error('Demo mode: Please configure Firebase to enable authentication');
  },
  updateProfile: async () => {
    throw new Error('Demo mode: Please configure Firebase to enable authentication');
  },
  sendEmailVerification: async () => {
    throw new Error('Demo mode: Please configure Firebase to enable authentication');
  },
  updatePassword: async () => {
    throw new Error('Demo mode: Please configure Firebase to enable authentication');
  },
  reauthenticateWithCredential: async () => {
    throw new Error('Demo mode: Please configure Firebase to enable authentication');
  }
};

export const mockDb = {
  collection: () => ({
    doc: () => ({
      set: async () => {
        throw new Error('Demo mode: Please configure Firebase to enable database operations');
      },
      get: async () => {
        throw new Error('Demo mode: Please configure Firebase to enable database operations');
      },
      update: async () => {
        throw new Error('Demo mode: Please configure Firebase to enable database operations');
      },
      delete: async () => {
        throw new Error('Demo mode: Please configure Firebase to enable database operations');
      }
    }),
    add: async () => {
      throw new Error('Demo mode: Please configure Firebase to enable database operations');
    },
    get: async () => {
      throw new Error('Demo mode: Please configure Firebase to enable database operations');
    }
  }),
  doc: () => ({
    set: async () => {
      throw new Error('Demo mode: Please configure Firebase to enable database operations');
    },
    get: async () => {
      throw new Error('Demo mode: Please configure Firebase to enable database operations');
    },
    update: async () => {
      throw new Error('Demo mode: Please configure Firebase to enable database operations');
    },
    delete: async () => {
      throw new Error('Demo mode: Please configure Firebase to enable database operations');
    }
  })
};

// Check if we should use mock services
export const shouldUseMockServices = () => {
  const apiKey = import.meta.env.VITE_FIREBASE_API_KEY;
  return !apiKey || apiKey === 'demo_api_key';
};


--- src/lib/utils.ts ---

import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}


--- src/pages/AnalyticsPage.tsx ---


export const AnalyticsPage = () => {
  return (
    <div className="p-6">
      <div className="mb-6">
        <h1 className="text-3xl font-bold text-gray-900 mb-2">–ê–Ω–∞–ª–∏—Ç–∏–∫–∞</h1>
        <p className="text-gray-600">–û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å–≤–æ—é –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å</p>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
        <div className="bg-white p-6 rounded-lg shadow-md">
          <h3 className="text-sm font-medium text-gray-500 mb-2">–ó–∞–¥–∞—á–∏ –∑–∞ –Ω–µ–¥–µ–ª—é</h3>
          <p className="text-2xl font-bold text-blue-600">0</p>
          <p className="text-sm text-gray-500 mt-1">+0% –∫ –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–µ</p>
        </div>
        <div className="bg-white p-6 rounded-lg shadow-md">
          <h3 className="text-sm font-medium text-gray-500 mb-2">Pomodoro —Å–µ—Å—Å–∏–∏</h3>
          <p className="text-2xl font-bold text-green-600">0</p>
          <p className="text-sm text-gray-500 mt-1">+0% –∫ –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–µ</p>
        </div>
        <div className="bg-white p-6 rounded-lg shadow-md">
          <h3 className="text-sm font-medium text-gray-500 mb-2">–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</h3>
          <p className="text-2xl font-bold text-purple-600">0%</p>
          <p className="text-sm text-gray-500 mt-1">+0% –∫ –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–µ</p>
        </div>
        <div className="bg-white p-6 rounded-lg shadow-md">
          <h3 className="text-sm font-medium text-gray-500 mb-2">Streak –¥–Ω–µ–π</h3>
          <p className="text-2xl font-bold text-orange-600">0</p>
          <p className="text-sm text-gray-500 mt-1">–î–Ω–µ–π –ø–æ–¥—Ä—è–¥</p>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <div className="bg-white p-6 rounded-lg shadow-md">
          <h3 className="text-lg font-semibold mb-4">–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º</h3>
          <div className="h-64 bg-gray-50 rounded-lg flex items-center justify-center">
            <p className="text-gray-500">–ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</p>
          </div>
        </div>
        <div className="bg-white p-6 rounded-lg shadow-md">
          <h3 className="text-lg font-semibold mb-4">–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º</h3>
          <div className="h-64 bg-gray-50 rounded-lg flex items-center justify-center">
            <p className="text-gray-500">–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞</p>
          </div>
        </div>
      </div>
    </div>
  );
};


--- src/pages/DashboardPage.tsx ---


export const DashboardPage = () => {
  return (
    <div className="p-6 bg-gradient-to-br from-slate-50 to-blue-50 min-h-screen">
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-slate-800 mb-2 drop-shadow-sm">–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</h1>
        <p className="text-slate-600 font-medium">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ProgressQuest Universal</p>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
        <div className="bg-white/90 backdrop-blur-sm p-6 rounded-lg shadow-lg border border-white/50 hover:shadow-xl transition-all duration-300">
          <h3 className="text-lg font-semibold mb-2 text-slate-700">–í—Å–µ–≥–æ –∑–∞–¥–∞—á</h3>
          <p className="text-3xl font-bold text-blue-600 drop-shadow-sm">0</p>
        </div>
        <div className="bg-white/90 backdrop-blur-sm p-6 rounded-lg shadow-lg border border-white/50 hover:shadow-xl transition-all duration-300">
          <h3 className="text-lg font-semibold mb-2 text-slate-700">–í—ã–ø–æ–ª–Ω–µ–Ω–æ</h3>
          <p className="text-3xl font-bold text-emerald-600 drop-shadow-sm">0</p>
        </div>
        <div className="bg-white/90 backdrop-blur-sm p-6 rounded-lg shadow-lg border border-white/50 hover:shadow-xl transition-all duration-300">
          <h3 className="text-lg font-semibold mb-2 text-slate-700">–£—Ä–æ–≤–µ–Ω—å</h3>
          <p className="text-3xl font-bold text-purple-600 drop-shadow-sm">1</p>
        </div>
        <div className="bg-white/90 backdrop-blur-sm p-6 rounded-lg shadow-lg border border-white/50 hover:shadow-xl transition-all duration-300">
          <h3 className="text-lg font-semibold mb-2 text-slate-700">–û–ø—ã—Ç</h3>
          <p className="text-3xl font-bold text-orange-600 drop-shadow-sm">0</p>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <div className="bg-white/90 backdrop-blur-sm p-6 rounded-lg shadow-lg border border-white/50 hover:shadow-xl transition-all duration-300">
          <h3 className="text-xl font-semibold mb-4 text-slate-700">–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–¥–∞—á–∏</h3>
          <p className="text-slate-500 font-medium">–ó–∞–¥–∞—á –ø–æ–∫–∞ –Ω–µ—Ç</p>
        </div>
        <div className="bg-white/90 backdrop-blur-sm p-6 rounded-lg shadow-lg border border-white/50 hover:shadow-xl transition-all duration-300">
          <h3 className="text-xl font-semibold mb-4 text-slate-700">–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</h3>
          <p className="text-slate-500 font-medium">–ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</p>
        </div>
      </div>
    </div>
  );
};


--- src/pages/GardenPage.tsx ---


export const GardenPage = () => {
  return (
    <div className="p-6 bg-gradient-to-br from-slate-50 to-green-50 min-h-screen">
      <div className="mb-6">
        <h1 className="text-3xl font-bold text-slate-800 mb-2 drop-shadow-sm">–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Å–∞–¥</h1>
        <p className="text-slate-600 font-medium">–í—ã—Ä–∞—â–∏–≤–∞–π—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏</p>
      </div>

      <div className="bg-gradient-to-br from-green-100 to-blue-100 rounded-lg p-8 min-h-[400px] shadow-lg border border-white/50">
        <div className="text-center">
          <div className="text-6xl mb-4">üå±</div>
          <h3 className="text-xl font-semibold text-slate-700 mb-2 drop-shadow-sm">–í–∞—à —Å–∞–¥ –ø—É—Å—Ç</h3>
          <p className="text-slate-600 mb-6 font-medium">
            –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞—á–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —Å–µ–º–µ–Ω–∞ –∏ –≤—ã—Ä–∞—â–∏–≤–∞—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏—è
          </p>
          <div className="bg-white/90 backdrop-blur-sm p-4 rounded-lg shadow-md inline-block border border-white/50">
            <p className="text-sm text-slate-700 font-medium">–°–µ–º–µ–Ω–∞: <span className="font-bold">0</span></p>
          </div>
        </div>
      </div>

      <div className="mt-6 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        <div className="bg-white/90 backdrop-blur-sm p-4 rounded-lg shadow-lg text-center border border-white/50 hover:shadow-xl transition-all duration-300">
          <div className="text-2xl mb-2">üå∏</div>
          <h4 className="font-semibold text-slate-700 drop-shadow-sm">–¶–≤–µ—Ç—ã</h4>
          <p className="text-sm text-slate-600 font-medium">0 —Ä–∞—Å—Ç–µ–Ω–∏–π</p>
        </div>
        <div className="bg-white/90 backdrop-blur-sm p-4 rounded-lg shadow-lg text-center border border-white/50 hover:shadow-xl transition-all duration-300">
          <div className="text-2xl mb-2">üå≥</div>
          <h4 className="font-semibold text-slate-700 drop-shadow-sm">–î–µ—Ä–µ–≤—å—è</h4>
          <p className="text-sm text-slate-600 font-medium">0 —Ä–∞—Å—Ç–µ–Ω–∏–π</p>
        </div>
        <div className="bg-white/90 backdrop-blur-sm p-4 rounded-lg shadow-lg text-center border border-white/50 hover:shadow-xl transition-all duration-300">
          <div className="text-2xl mb-2">üåø</div>
          <h4 className="font-semibold text-slate-700 drop-shadow-sm">–¢—Ä–∞–≤—ã</h4>
          <p className="text-sm text-slate-600 font-medium">0 —Ä–∞—Å—Ç–µ–Ω–∏–π</p>
        </div>
        <div className="bg-white/90 backdrop-blur-sm p-4 rounded-lg shadow-lg text-center border border-white/50 hover:shadow-xl transition-all duration-300">
          <div className="text-2xl mb-2">üçÑ</div>
          <h4 className="font-semibold text-slate-700 drop-shadow-sm">–ì—Ä–∏–±—ã</h4>
          <p className="text-sm text-slate-600 font-medium">0 —Ä–∞—Å—Ç–µ–Ω–∏–π</p>
        </div>
      </div>
    </div>
  );
};


--- src/pages/LandingPage.tsx ---

import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { CheckCircle, Clock, Target, Trophy, Users, Star, ChevronDown, Play, Pause, Plus } from "lucide-react";
import { useAuth } from "@/contexts/AuthContext";
import { toast } from 'sonner';

export default function LandingPage() {
  const navigate = useNavigate();
  const { currentUser } = useAuth();
  const [timerTime, setTimerTime] = useState(25 * 60);
  const [isTimerRunning, setIsTimerRunning] = useState(false);
  const [taskName, setTaskName] = useState('');
  const [openFAQ, setOpenFAQ] = useState<number | null>(null);
  const [isMonthly, setIsMonthly] = useState(true);

  // Redirect if already authenticated
  useEffect(() => {
    if (currentUser) {
      navigate('/app');
    }
  }, [currentUser, navigate]);

  // Timer logic
  useEffect(() => {
    let interval: NodeJS.Timeout | null = null;
    if (isTimerRunning && timerTime > 0) {
      interval = setInterval(() => {
        setTimerTime(time => time - 1);
      }, 1000);
    } else if (timerTime === 0) {
      setIsTimerRunning(false);
      toast.success('üéâ Pomodoro –∑–∞–≤–µ—Ä—à–µ–Ω! +25 XP');
      setTimerTime(25 * 60);
    }
    return () => {
      if (interval) clearInterval(interval);
    };
  }, [isTimerRunning, timerTime]);

  const startTimer = () => {
    if (!taskName.trim()) {
      toast.error('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏');
      return;
    }
    setIsTimerRunning(true);
    toast.success('–¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω! –£–¥–∞—á–∏! üçÖ');
  };

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
  };

  const toggleFAQ = (index: number) => {
    setOpenFAQ(openFAQ === index ? null : index);
  };

  const faqData = [
    {
      question: '–ú–æ–≥—É –ª–∏ —è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ?',
      answer: '–î–∞! ProgressQuest –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω "–ò—Å–∫–∞—Ç–µ–ª—å" —Å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ –ª–∏—á–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏, Pomodoro-—Ç–∞–π–º–µ—Ä–æ–º –∏ –±–∞–∑–æ–≤–æ–π –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–µ–π.'
    },
    {
      question: '–ß–µ–º —ç—Ç–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –¥—Ä—É–≥–∏—Ö —Ç–∞—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤?',
      answer: 'ProgressQuest –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å –∏–≥—Ä–æ–≤—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏. –£ –≤–∞—Å –µ—Å—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Å–∞–¥, —Å–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π, –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ —á–µ–ª–ª–µ–Ω–¥–∂–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ—Ç–∏–≤–∏—Ä—É—é—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞—á–∏.'
    },
    {
      question: '–ù–∞ –∫–∞–∫–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö –¥–æ—Å—Ç—É–ø–µ–Ω ProgressQuest?',
      answer: 'ProgressQuest —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ª—é–±–æ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –±—Ä–∞—É–∑–µ—Ä–µ –∏ –∏–º–µ–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω –¥–ª—è —Å–º–∞—Ä—Ç—Ñ–æ–Ω–æ–≤ –∏ –ø–ª–∞–Ω—à–µ—Ç–æ–≤. –ú–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.'
    },
    {
      question: '–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ–º–∞–Ω–¥–Ω–∞—è –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è?',
      answer: '–í –∫–æ–º–∞–Ω–¥–Ω–æ–º —Ä–µ–∂–∏–º–µ –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ–±—â–∏–µ –ø—Ä–æ–µ–∫—Ç—ã, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—Ç—å –∑–∞–¥–∞—á–∏, —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–µ–ª–ª–µ–Ω–¥–∂–∞—Ö –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.'
    },
    {
      question: '–ë–µ–∑–æ–ø–∞—Å–Ω—ã –ª–∏ –º–æ–∏ –¥–∞–Ω–Ω—ã–µ?',
      answer: '–î–∞, –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º Firebase –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º –∏ —Å–æ–±–ª—é–¥–∞–µ–º –≤—Å–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∑–∞—â–∏—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.'
    }
  ];

  return (
    <div className="min-h-screen bg-white">
      {/* Navigation Panel */}
      <header className="sticky top-0 bg-white/95 backdrop-blur-sm border-b border-gray-200 z-50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-4">
            <div className="flex justify-start lg:w-0 lg:flex-1">
              <span className="text-2xl font-bold text-indigo-600">ProgressQuest</span>
            </div>
            <nav className="hidden md:flex space-x-10">
              <a href="#features" className="text-base font-medium text-gray-500 hover:text-gray-900 transition-colors">
                –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
              </a>
              <a href="#audience" className="text-base font-medium text-gray-500 hover:text-gray-900 transition-colors">
                –î–ª—è –∫–æ–≥–æ
              </a>
              <a href="#pricing" className="text-base font-medium text-gray-500 hover:text-gray-900 transition-colors">
                –¢–∞—Ä–∏—Ñ—ã
              </a>
              <a href="#faq" className="text-base font-medium text-gray-500 hover:text-gray-900 transition-colors">
                –ë–ª–æ–≥
              </a>
            </nav>
            <div className="flex items-center justify-end md:flex-1 lg:w-0 space-x-4">
              <Button 
                variant="ghost" 
                onClick={() => navigate('/login')}
                className="text-gray-500 hover:text-gray-900"
              >
                –í–æ–π—Ç–∏
              </Button>
              <Button 
                onClick={() => navigate('/register')}
                className="bg-indigo-600 hover:bg-indigo-700 text-white"
              >
                –ù–∞—á–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ
              </Button>
            </div>
          </div>
        </div>
      </header>

      {/* Hero Section */}
      <section className="relative bg-gradient-to-br from-indigo-50 via-white to-cyan-50 py-20 lg:py-28">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center">
            <h1 className="text-4xl tracking-tight font-extrabold text-gray-900 sm:text-5xl md:text-6xl">
              <span className="block">–ü—Ä–µ–≤—Ä–∞—Ç–∏ —Å–≤–æ–∏ —Ü–µ–ª–∏ –≤</span>
              <span className="block text-indigo-600">–∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–π –∫–≤–µ—Å—Ç</span>
            </h1>
            <p className="mt-3 max-w-md mx-auto text-base text-gray-500 sm:text-lg md:mt-5 md:text-xl md:max-w-3xl">
              –û–±—ä–µ–¥–∏–Ω–∏—Ç–µ –º–æ—â—å Pomodoro-—Ç–∞–π–º–µ—Ä–∞ —Å —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–π –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–µ–π. –î–æ—Å—Ç–∏–≥–∞–π—Ç–µ –±–æ–ª—å—à–µ–≥–æ, 
              –ø–æ–ª—É—á–∞—è —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ –æ—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞ ‚Äî –≤ –æ–¥–∏–Ω–æ—á–∫—É –∏–ª–∏ –≤ –∫–æ–º–∞–Ω–¥–µ.
            </p>
            <div className="mt-5 max-w-md mx-auto sm:flex sm:justify-center md:mt-8">
              <div className="rounded-md shadow">
                <Button 
                  size="lg"
                  onClick={() => navigate('/register')}
                  className="w-full flex items-center justify-center px-8 py-3 border border-transparent text-base font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 md:py-4 md:text-lg md:px-10"
                >
                  üöÄ –ù–∞—á–∞—Ç—å —Å–≤–æ–π –∫–≤–µ—Å—Ç (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)
                </Button>
              </div>
            </div>
            <p className="mt-3 text-sm text-gray-500">
              –ë–µ—Å–ø–ª–∞—Ç–Ω–æ –Ω–∞–≤—Å–µ–≥–¥–∞. –ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∫—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞.
            </p>
          </div>
        </div>
        <div className="absolute inset-0 overflow-hidden pointer-events-none">
          <div className="absolute top-1/4 left-1/4 w-4 h-4 bg-indigo-400/20 rounded-full animate-pulse"></div>
          <div className="absolute top-3/4 right-1/4 w-6 h-6 bg-cyan-400/20 rounded-full animate-bounce"></div>
          <div className="absolute top-1/2 right-1/3 w-3 h-3 bg-purple-400/20 rounded-full animate-ping"></div>
        </div>
      </section>

      {/* Target Audience Section */}
      <section id="audience" className="py-20 bg-white">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center mb-16">
            <h2 className="text-3xl font-extrabold text-gray-900 sm:text-4xl">
              –î–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –≥–µ—Ä–æ–µ–≤ –∏ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
            </h2>
          </div>

          <div className="grid lg:grid-cols-2 gap-12">
            {/* Personal Productivity */}
            <div className="bg-gradient-to-br from-blue-50 to-indigo-100 rounded-2xl p-8">
              <div className="text-center mb-8">
                <div className="mx-auto w-16 h-16 bg-blue-600 rounded-full flex items-center justify-center mb-4">
                  <Target className="w-8 h-8 text-white" />
                </div>
                <h3 className="text-2xl font-bold text-gray-900">–î–ª—è –õ–∏—á–Ω–æ–π –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</h3>
                <p className="text-lg text-gray-600 mt-2">–ü–æ–∫–æ—Ä—è–π—Ç–µ —Å–≤–æ–∏ —Ü–µ–ª–∏ –≤ –æ–¥–∏–Ω–æ—á–∫—É</p>
              </div>
              
              <div className="space-y-6">
                <div>
                  <h4 className="font-semibold text-red-600 mb-3">–ó–Ω–∞–∫–æ–º—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:</h4>
                  <ul className="space-y-2">
                    <li className="flex items-start">
                      <span className="text-red-500 mr-2">‚ùå</span>
                      <span className="text-gray-700">–í–µ—á–Ω–æ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ—Ç–µ –≤–∞–∂–Ω—ã–µ –¥–µ–ª–∞?</span>
                    </li>
                    <li className="flex items-start">
                      <span className="text-red-500 mr-2">‚ùå</span>
                      <span className="text-gray-700">–°–ª–æ–∂–Ω–æ —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–µ?</span>
                    </li>
                    <li className="flex items-start">
                      <span className="text-red-500 mr-2">‚ùå</span>
                      <span className="text-gray-700">–¢–µ—Ä—è–µ—Ç–µ –º–æ—Ç–∏–≤–∞—Ü–∏—é –Ω–∞ –ø–æ–ª–ø—É—Ç–∏?</span>
                    </li>
                  </ul>
                </div>
                
                <div>
                  <h4 className="font-semibold text-green-600 mb-3">–ù–∞—à–∏ —Ä–µ—à–µ–Ω–∏—è:</h4>
                  <ul className="space-y-2">
                    <li className="flex items-start">
                      <CheckCircle className="w-5 h-5 text-green-500 mr-2 mt-0.5 flex-shrink-0" />
                      <span className="text-gray-700">Pomodoro-—Ç–∞–π–º–µ—Ä –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç –º–∞—Ä–∞—Ñ–æ–Ω –≤ —Å–µ—Ä–∏—é –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–ø—Ä–∏–Ω—Ç–æ–≤</span>
                    </li>
                    <li className="flex items-start">
                      <CheckCircle className="w-5 h-5 text-green-500 mr-2 mt-0.5 flex-shrink-0" />
                      <span className="text-gray-700">–°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π –∏ –Ω–∞–≥—Ä–∞–¥ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç —Ä—É—Ç–∏–Ω—É –≤ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—É—é –∏–≥—Ä—É</span>
                    </li>
                    <li className="flex items-start">
                      <CheckCircle className="w-5 h-5 text-green-500 mr-2 mt-0.5 flex-shrink-0" />
                      <span className="text-gray-700">–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Å–∞–¥ –±—É–¥–µ—Ç —Ä–∞—Å—Ç–∏ –≤–º–µ—Å—Ç–µ —Å –≤–∞—à–µ–π –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é</span>
                    </li>
                  </ul>
                </div>
              </div>
            </div>

            {/* Team Collaboration */}
            <div className="bg-gradient-to-br from-purple-50 to-pink-100 rounded-2xl p-8">
              <div className="text-center mb-8">
                <div className="mx-auto w-16 h-16 bg-purple-600 rounded-full flex items-center justify-center mb-4">
                  <Users className="w-8 h-8 text-white" />
                </div>
                <h3 className="text-2xl font-bold text-gray-900">–î–ª—è –ö–æ–º–∞–Ω–¥–Ω–æ–π –†–∞–±–æ—Ç—ã</h3>
                <p className="text-lg text-gray-600 mt-2">–î–æ—Å—Ç–∏–≥–∞–π—Ç–µ –≤–µ–ª–∏–∫–∏—Ö —Ü–µ–ª–µ–π –≤–º–µ—Å—Ç–µ</p>
              </div>
              
              <div className="space-y-6">
                <div>
                  <h4 className="font-semibold text-red-600 mb-3">–ö–æ–º–∞–Ω–¥–Ω—ã–µ –≤—ã–∑–æ–≤—ã:</h4>
                  <ul className="space-y-2">
                    <li className="flex items-start">
                      <span className="text-red-500 mr-2">‚ùå</span>
                      <span className="text-gray-700">–ù–µ–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á –≤ –ø—Ä–æ–µ–∫—Ç–µ?</span>
                    </li>
                    <li className="flex items-start">
                      <span className="text-red-500 mr-2">‚ùå</span>
                      <span className="text-gray-700">–ù–∏–∑–∫–∞—è –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã?</span>
                    </li>
                    <li className="flex items-start">
                      <span className="text-red-500 mr-2">‚ùå</span>
                      <span className="text-gray-700">–°–ª–æ–∂–Ω–æ –æ—Ç—Å–ª–µ–¥–∏—Ç—å –æ–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å?</span>
                    </li>
                  </ul>
                </div>
                
                <div>
                  <h4 className="font-semibold text-green-600 mb-3">–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:</h4>
                  <ul className="space-y-2">
                    <li className="flex items-start">
                      <CheckCircle className="w-5 h-5 text-green-500 mr-2 mt-0.5 flex-shrink-0" />
                      <span className="text-gray-700">–û–±—â–∏–µ —Ä–∞–±–æ—á–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ —Å Kanban-–¥–æ—Å–∫–∞–º–∏ –¥–ª—è –ø–æ–ª–Ω–æ–π –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏</span>
                    </li>
                    <li className="flex items-start">
                      <CheckCircle className="w-5 h-5 text-green-500 mr-2 mt-0.5 flex-shrink-0" />
                      <span className="text-gray-700">–ö–æ–º–∞–Ω–¥–Ω—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –∞–∑–∞—Ä—Ç–∞ –∏ —Å–ø–ª–æ—á–µ–Ω–Ω–æ—Å—Ç–∏</span>
                    </li>
                    <li className="flex items-start">
                      <CheckCircle className="w-5 h-5 text-green-500 mr-2 mt-0.5 flex-shrink-0" />
                      <span className="text-gray-700">–ì–∏–±–∫–∏–µ —Ä–æ–ª–∏ –∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã</span>
                    </li>
                  </ul>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* Features Section */}
      <section id="features" className="py-20 bg-gray-50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center mb-16">
            <h2 className="text-3xl font-extrabold text-gray-900 sm:text-4xl">
              –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
            </h2>
            <p className="mt-4 text-xl text-gray-600">
              –î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –ø—Ä–æ–¥—É–∫—Ç–∞
            </p>
          </div>

          {/* Smart Task Management */}
          <div className="mb-20">
            <div className="lg:grid lg:grid-cols-2 lg:gap-8 lg:items-center">
              <div>
                <h3 className="text-2xl font-bold text-gray-900 sm:text-3xl">
                  –£–º–Ω–æ–µ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ó–∞–¥–∞—á–∞–º–∏
                </h3>
                <p className="mt-3 text-lg text-gray-500">
                  –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∑–∞–¥–∞—á–∏, —Ä–∞–∑–±–∏–≤–∞–π—Ç–µ –∏—Ö –Ω–∞ –ø–æ–¥–∑–∞–¥–∞—á–∏, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∏ —Å—Ä–æ–∫–∏. 
                  –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–≤–æ–π —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å —Å –ø–æ–º–æ—â—å—é —Å–ø–∏—Å–∫–æ–≤ –∏–ª–∏ Kanban-–¥–æ—Å–æ–∫. 
                  –ì–∏–±–∫–∏–µ –ø–æ–¥—Ö–æ–¥—ã (GTD, –ú–∞—Ç—Ä–∏—Ü–∞ –≠–π–∑–µ–Ω—Ö–∞—É—ç—Ä–∞) –ø–æ–º–æ–≥—É—Ç –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –ø–æ–¥ —Å–µ–±—è.
                </p>
                <div className="mt-8 space-y-4">
                  <div className="flex items-start">
                    <div className="flex-shrink-0">
                      <div className="flex items-center justify-center h-12 w-12 rounded-md bg-indigo-500 text-white">
                        <Target className="h-6 w-6" />
                      </div>
                    </div>
                    <div className="ml-4">
                      <h4 className="text-lg font-medium text-gray-900">GTD –∏ –ú–∞—Ç—Ä–∏—Ü–∞ –≠–π–∑–µ–Ω—Ö–∞—É—ç—Ä–∞</h4>
                      <p className="mt-2 text-base text-gray-500">
                        –ì–∏–±–∫–∏–µ –ø–æ–¥—Ö–æ–¥—ã –ø–æ–º–æ–≥—É—Ç –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –ø–æ–¥ —Å–µ–±—è.
                      </p>
                    </div>
                  </div>
                </div>
              </div>
              <div className="mt-10 lg:mt-0">
                <div className="bg-white rounded-lg shadow-lg p-6">
                  <div className="space-y-3">
                    <div className="flex items-center p-3 bg-green-50 rounded-lg border-l-4 border-green-400">
                      <CheckCircle className="h-5 w-5 text-green-400 mr-3" />
                      <span className="text-green-800">–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é</span>
                    </div>
                    <div className="flex items-center p-3 bg-yellow-50 rounded-lg border-l-4 border-yellow-400">
                      <Clock className="h-5 w-5 text-yellow-400 mr-3" />
                      <span className="text-yellow-800">–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –æ—Ç—á–µ—Ç (–¥–æ 18:00)</span>
                    </div>
                    <div className="flex items-center p-3 bg-blue-50 rounded-lg border-l-4 border-blue-400">
                      <Plus className="h-5 w-5 text-blue-400 mr-3" />
                      <span className="text-blue-800">–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø—Ä–∏–Ω—Ç–∞</span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Pomodoro Timer */}
          <div className="mb-20">
            <div className="lg:grid lg:grid-cols-2 lg:gap-8 lg:items-center">
              <div className="lg:col-start-2">
                <h3 className="text-2xl font-bold text-gray-900 sm:text-3xl">
                  Pomodoro-—Ç–∞–π–º–µ—Ä –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è
                </h3>
                <p className="mt-3 text-lg text-gray-500">
                  –ü—Ä–æ—Å—Ç–æ –æ—Ü–µ–Ω–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞ –∑–∞–¥–∞—á—É, –∏ ProgressQuest —Å–∞–º —Å–æ—Å—Ç–∞–≤–∏—Ç –ø–ª–∞–Ω —Ä–∞–±–æ—Ç—ã –∏ –æ—Ç–¥—ã—Ö–∞. 
                  –ù–∞—à Pomodoro-—Ç–∞–π–º–µ—Ä –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –≤ –ø–æ—Ç–æ–∫–µ –∏ –∏–∑–±–µ–≥–∞—Ç—å –≤—ã–≥–æ—Ä–∞–Ω–∏—è, 
                  —Ä–∞–±–æ—Ç–∞—è –≤ —Ñ–æ–Ω–µ –Ω–∞ –≤—Å–µ—Ö –≤–∞—à–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö.
                </p>
              </div>
              <div className="mt-10 lg:mt-0 lg:col-start-1 lg:row-start-1">
                <div className="bg-white rounded-lg shadow-lg p-6">
                  <div className="text-center">
                    <div className="mx-auto w-32 h-32 rounded-full border-8 border-gray-200 relative">
                      <div className="absolute inset-0 rounded-full border-8 border-indigo-500" style={{clipPath: 'polygon(50% 0%, 100% 0%, 100% 50%, 50% 50%)'}}></div>
                      <div className="absolute inset-0 flex items-center justify-center">
                        <span className="text-2xl font-bold text-gray-900">{formatTime(timerTime)}</span>
                      </div>
                    </div>
                    <div className="mt-6 space-y-3">
                      <input
                        type="text"
                        placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∑–∞–¥–∞—á–∏..."
                        value={taskName}
                        onChange={(e) => setTaskName(e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                      />
                      <Button
                        onClick={startTimer}
                        disabled={isTimerRunning}
                        className={`w-full ${isTimerRunning ? 'bg-red-500 hover:bg-red-600' : 'bg-indigo-600 hover:bg-indigo-700'}`}
                      >
                        {isTimerRunning ? (
                          <><Pause className="h-4 w-4 mr-2" />–†–∞–±–æ—Ç–∞—é...</>
                        ) : (
                          <><Play className="h-4 w-4 mr-2" />–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–æ–∫—É—Å –Ω–∞ 25 –º–∏–Ω—É—Ç</>
                        )}
                      </Button>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Gamification */}
          <div className="mb-20">
            <div className="lg:grid lg:grid-cols-2 lg:gap-8 lg:items-center">
              <div>
                <h3 className="text-2xl font-bold text-gray-900 sm:text-3xl">
                  –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞–±–æ—Ç–∞–µ—Ç
                </h3>
                <p className="mt-3 text-lg text-gray-500">
                  –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –æ–ø—ã—Ç (XP) –∏ –º–æ–Ω–µ—Ç—ã –∑–∞ –∫–∞–∂–¥—É—é –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É –∏ —Å–µ—Å—Å–∏—é —Ñ–æ–∫—É—Å–∞. 
                  –ü–æ–≤—ã—à–∞–π—Ç–µ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å, –æ—Ç–∫—Ä—ã–≤–∞–π—Ç–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ —Å–æ—Ä–µ–≤–Ω—É–π—Ç–µ—Å—å —Å –∫–æ–ª–ª–µ–≥–∞–º–∏. 
                  –ü—Ä–µ–≤—Ä–∞—Ç–∏—Ç–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–µ–π –≤ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–µ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ!
                </p>
              </div>
              <div className="mt-10 lg:mt-0">
                <div className="grid grid-cols-2 gap-4">
                  <div className="bg-white rounded-lg shadow p-4 text-center">
                    <Trophy className="h-8 w-8 text-yellow-500 mx-auto mb-2" />
                    <div className="text-2xl font-bold text-gray-900">47</div>
                    <div className="text-sm text-gray-500">–î–æ—Å—Ç–∏–∂–µ–Ω–∏–π</div>
                  </div>
                  <div className="bg-white rounded-lg shadow p-4 text-center">
                    <Star className="h-8 w-8 text-indigo-500 mx-auto mb-2" />
                    <div className="text-2xl font-bold text-gray-900">–£—Ä. 12</div>
                    <div className="text-sm text-gray-500">–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å</div>
                  </div>
                  <div className="bg-white rounded-lg shadow p-4 text-center col-span-2">
                    <div className="text-sm text-gray-500 mb-2">XP –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è</div>
                    <div className="w-full bg-gray-200 rounded-full h-2">
                      <div className="bg-indigo-600 h-2 rounded-full" style={{width: '65%'}}></div>
                    </div>
                    <div className="text-xs text-gray-500 mt-1">1,950 / 3,000 XP</div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Virtual Garden */}
          <div>
            <div className="lg:grid lg:grid-cols-2 lg:gap-8 lg:items-center">
              <div className="lg:col-start-2">
                <h3 className="text-2xl font-bold text-gray-900 sm:text-3xl">
                  –í–∞—à –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –°–∞–¥ –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                </h3>
                <p className="mt-3 text-lg text-gray-500">
                  –ö–∞–∂–¥–∞—è —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–∏–Ω—É—Ç–∞ –ø–æ–º–æ–≥–∞–µ—Ç –≤–∞—à–µ–º—É –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º—É —Ä–∞—Å—Ç–µ–Ω–∏—é —Ä–∞—Å—Ç–∏. 
                  –ó–∞–±–æ—Ç—å—Ç–µ—Å—å –æ —Å–≤–æ–µ–º —Å–∞–¥–µ, –ø–æ–ª–∏–≤–∞–π—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –∏ –Ω–∞–±–ª—é–¥–∞–π—Ç–µ, –∫–∞–∫ –æ–Ω —Ä–∞—Å—Ü–≤–µ—Ç–∞–µ—Ç 
                  –≤–º–µ—Å—Ç–µ —Å –≤–∞—à–µ–π –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é. –≠—Ç–æ –≤–∞—à–µ –Ω–∞–≥–ª—è–¥–Ω–æ–µ –≤–æ–ø–ª–æ—â–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–Ω—ã—Ö —É—Å–∏–ª–∏–π.
                </p>
              </div>
              <div className="mt-10 lg:mt-0 lg:col-start-1 lg:row-start-1">
                <div className="bg-gradient-to-b from-blue-400 to-green-400 rounded-lg p-6 text-center">
                  <div className="text-6xl mb-4">üåª</div>
                  <div className="text-white font-semibold">–ü–æ–¥—Å–æ–ª–Ω—É—Ö –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</div>
                  <div className="text-blue-100 text-sm mt-2">–í—ã—Ä–æ—Å –∑–∞ 15 –¥–Ω–µ–π —Ñ–æ–∫—É—Å–∞</div>
                  <div className="mt-4 flex justify-center space-x-2">
                    <span className="text-2xl">üå±</span>
                    <span className="text-2xl">üåø</span>
                    <span className="text-2xl">üå∏</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* Pricing Section */}
      <section id="pricing" className="py-20 bg-white">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center mb-16">
            <h2 className="text-3xl font-extrabold text-gray-900 sm:text-4xl">
              –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –ø—É—Ç—å
            </h2>
            <div className="mt-6">
              <div className="flex items-center justify-center">
                <span className={`mr-3 ${isMonthly ? 'text-gray-900' : 'text-gray-500'}`}>–ï–∂–µ–º–µ—Å—è—á–Ω–æ</span>
                <button
                  onClick={() => setIsMonthly(!isMonthly)}
                  className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${isMonthly ? 'bg-gray-200' : 'bg-indigo-600'}`}
                >
                  <span className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${isMonthly ? 'translate-x-1' : 'translate-x-6'}`} />
                </button>
                <span className={`ml-3 ${!isMonthly ? 'text-gray-900' : 'text-gray-500'}`}>–ï–∂–µ–≥–æ–¥–Ω–æ <span className="text-green-600 font-semibold">(—Å–∫–∏–¥–∫–∞ 20%)</span></span>
              </div>
            </div>
          </div>

          <div className="grid md:grid-cols-3 gap-8">
            {/* Free Plan */}
            <Card className="relative flex flex-col h-full bg-gray-800">
              <CardHeader className="bg-gray-800 rounded-t-lg">
                <CardTitle className="text-center">
                  <div className="text-2xl font-bold text-white">–ò—Å–∫–∞—Ç–µ–ª—å</div>
                  <div className="text-4xl font-bold text-indigo-400 mt-2">0 ‚ÇΩ</div>
                  <div className="text-gray-300 font-medium">–Ω–∞–≤—Å–µ–≥–¥–∞</div>
                </CardTitle>
              </CardHeader>
              <CardContent className="flex-grow flex flex-col bg-gray-800">
                <p className="text-center text-gray-300 mb-6">–ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –∏ –ª–∏—á–Ω—ã—Ö –∑–∞–¥–∞—á</p>
                <ul className="space-y-3 flex-grow">
                  <li className="flex items-start">
                    <CheckCircle className="h-5 w-5 text-green-400 mr-3 mt-0.5 flex-shrink-0" />
                    <span className="text-gray-200">–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ª–∏—á–Ω—ã–µ –∑–∞–¥–∞—á–∏</span>
                  </li>
                  <li className="flex items-start">
                    <CheckCircle className="h-5 w-5 text-green-400 mr-3 mt-0.5 flex-shrink-0" />
                    <span className="text-gray-200">Pomodoro-—Ç–∞–π–º–µ—Ä</span>
                  </li>
                  <li className="flex items-start">
                    <CheckCircle className="h-5 w-5 text-green-400 mr-3 mt-0.5 flex-shrink-0" />
                    <span className="text-gray-200">–ë–∞–∑–æ–≤–∞—è –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è</span>
                  </li>
                  <li className="flex items-start">
                    <CheckCircle className="h-5 w-5 text-green-400 mr-3 mt-0.5 flex-shrink-0" />
                    <span className="text-gray-200">1 —Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ</span>
                  </li>
                </ul>
                <div className="mt-auto pt-6">
                  <Button 
                    className="w-full bg-gray-600 text-white hover:bg-gray-700"
                    onClick={() => navigate('/register')}
                  >
                    –ù–∞—á–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ
                  </Button>
                </div>
              </CardContent>
            </Card>

            {/* Pro Plan */}
            <Card className="relative flex flex-col h-full border-2 border-indigo-500 shadow-xl bg-gray-800">
              <div className="absolute top-0 left-1/2 transform -translate-x-1/2 -translate-y-1/2">
                <span className="bg-indigo-500 text-white px-4 py-1 rounded-full text-sm font-semibold">
                  –ü–æ–ø—É–ª—è—Ä–Ω—ã–π
                </span>
              </div>
              <CardHeader className="bg-gray-800 rounded-t-lg pt-8">
                <CardTitle className="text-center">
                  <div className="text-2xl font-bold text-white">–ì–µ—Ä–æ–π</div>
                  <div className="text-4xl font-bold text-indigo-400 mt-2">
                    {isMonthly ? '299' : '239'} ‚ÇΩ
                  </div>
                  <div className="text-gray-300 font-medium">{isMonthly ? '–≤ –º–µ—Å—è—Ü' : '–≤ –º–µ—Å—è—Ü (–ø—Ä–∏ –≥–æ–¥–æ–≤–æ–π –æ–ø–ª–∞—Ç–µ)'}</div>
                </CardTitle>
              </CardHeader>
              <CardContent className="flex-grow flex flex-col bg-gray-800">
                <p className="text-center text-gray-300 mb-6">–î–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω—ã –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã</p>
                <ul className="space-y-3 flex-grow">
                  <li className="flex items-start">
                    <CheckCircle className="h-5 w-5 text-green-400 mr-3 mt-0.5 flex-shrink-0" />
                    <span className="text-gray-200">–í—Å–µ –∏–∑ "–ò—Å–∫–∞—Ç–µ–ª—è"</span>
                  </li>
                  <li className="flex items-start">
                    <CheckCircle className="h-5 w-5 text-green-400 mr-3 mt-0.5 flex-shrink-0" />
                    <span className="text-gray-200">–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ª–∏—á–Ω—ã–µ Workspace</span>
                  </li>
                  <li className="flex items-start">
                    <CheckCircle className="h-5 w-5 text-green-400 mr-3 mt-0.5 flex-shrink-0" />
                    <span className="text-gray-200">–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã</span>
                  </li>
                  <li className="flex items-start">
                    <CheckCircle className="h-5 w-5 text-green-400 mr-3 mt-0.5 flex-shrink-0" />
                    <span className="text-gray-200">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏</span>
                  </li>
                  <li className="flex items-start">
                    <CheckCircle className="h-5 w-5 text-green-400 mr-3 mt-0.5 flex-shrink-0" />
                    <span className="text-gray-200">–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∫–∞–ª–µ–Ω–¥–∞—Ä—è–º–∏</span>
                  </li>
                </ul>
                <div className="mt-auto pt-6">
                  <Button 
                    className="w-full bg-indigo-600 hover:bg-indigo-700 text-white"
                    onClick={() => navigate('/register')}
                  >
                    –í—ã–±—Ä–∞—Ç—å "–ì–µ—Ä–æ—è"
                  </Button>
                </div>
              </CardContent>
            </Card>

            {/* Team Plan */}
            <Card className="relative flex flex-col h-full bg-gray-800">
              <CardHeader className="bg-gray-800 rounded-t-lg">
                <CardTitle className="text-center">
                  <div className="text-2xl font-bold text-white">–ì–∏–ª—å–¥–∏—è</div>
                  <div className="text-4xl font-bold text-purple-400 mt-2">
                    {isMonthly ? '249' : '199'} ‚ÇΩ
                  </div>
                  <div className="text-gray-300 font-medium">–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {isMonthly ? '–≤ –º–µ—Å—è—Ü' : '–≤ –º–µ—Å—è—Ü (–ø—Ä–∏ –≥–æ–¥–æ–≤–æ–π –æ–ø–ª–∞—Ç–µ)'}</div>
                </CardTitle>
              </CardHeader>
              <CardContent className="flex-grow flex flex-col bg-gray-800">
                <p className="text-center text-gray-300 mb-6">–î–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–æ–π</p>
                <ul className="space-y-3 flex-grow">
                  <li className="flex items-start">
                    <CheckCircle className="h-5 w-5 text-green-400 mr-3 mt-0.5 flex-shrink-0" />
                    <span className="text-gray-200">–í—Å–µ –∏–∑ "–ì–µ—Ä–æ—è"</span>
                  </li>
                  <li className="flex items-start">
                    <CheckCircle className="h-5 w-5 text-green-400 mr-3 mt-0.5 flex-shrink-0" />
                    <span className="text-gray-200">–ö–æ–º–∞–Ω–¥–Ω—ã–µ Workspace</span>
                  </li>
                  <li className="flex items-start">
                    <CheckCircle className="h-5 w-5 text-green-400 mr-3 mt-0.5 flex-shrink-0" />
                    <span className="text-gray-200">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏ –∏ –¥–æ—Å—Ç—É–ø–æ–º</span>
                  </li>
                  <li className="flex items-start">
                    <CheckCircle className="h-5 w-5 text-green-400 mr-3 mt-0.5 flex-shrink-0" />
                    <span className="text-gray-200">–û–±—â–∞—è Kanban-–¥–æ—Å–∫–∞</span>
                  </li>
                  <li className="flex items-start">
                    <CheckCircle className="h-5 w-5 text-green-400 mr-3 mt-0.5 flex-shrink-0" />
                    <span className="text-gray-200">–ö–æ–º–∞–Ω–¥–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞</span>
                  </li>
                  <li className="flex items-start">
                    <CheckCircle className="h-5 w-5 text-green-400 mr-3 mt-0.5 flex-shrink-0" />
                    <span className="text-gray-200">–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞</span>
                  </li>
                </ul>
                <div className="mt-auto pt-6">
                  <Button 
                    className="w-full bg-purple-600 hover:bg-purple-700 text-white"
                    onClick={() => navigate('/register')}
                  >
                    –°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É
                  </Button>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </section>

      {/* FAQ Section */}
      <section id="faq" className="py-20 bg-gray-50">
        <div className="max-w-3xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center mb-16">
            <h2 className="text-3xl font-extrabold text-gray-900 sm:text-4xl">
              –ß–∞—Å—Ç–æ –ó–∞–¥–∞–≤–∞–µ–º—ã–µ –í–æ–ø—Ä–æ—Å—ã
            </h2>
          </div>

          <div className="space-y-4">
            {faqData.map((faq, index) => (
              <div key={index} className="bg-white rounded-lg shadow">
                <button
                  className="w-full px-6 py-4 text-left flex justify-between items-center focus:outline-none"
                  onClick={() => toggleFAQ(index)}
                >
                  <span className="text-lg font-medium text-gray-900">{faq.question}</span>
                  <ChevronDown 
                    className={`h-5 w-5 text-gray-500 transform transition-transform ${
                      openFAQ === index ? 'rotate-180' : ''
                    }`} 
                  />
                </button>
                {openFAQ === index && (
                  <div className="px-6 pb-4">
                    <p className="text-gray-600">{faq.answer}</p>
                  </div>
                )}
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* Final CTA Section */}
      <section className="bg-indigo-700 py-16">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
          <h2 className="text-3xl font-extrabold text-white">
            –ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å —Å–≤–æ–π –∫–≤–µ—Å—Ç?
          </h2>
          <p className="mt-4 text-xl text-indigo-200">
            –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ —Ç—ã—Å—è—á–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –ø–æ–≤—ã—Å–∏–ª–∏ —Å–≤–æ—é –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
          </p>
          <div className="mt-8">
            <Button 
              size="lg"
              onClick={() => navigate('/register')}
              className="bg-white text-indigo-700 hover:bg-gray-100 font-bold text-lg px-8 py-4"
            >
              üöÄ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ
            </Button>
          </div>
        </div>
      </section>

      {/* Footer */}
      <footer className="bg-gray-900 text-white py-12">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="grid md:grid-cols-4 gap-8">
            <div>
              <h3 className="text-lg font-semibold mb-4">–ü—Ä–æ–¥—É–∫—Ç</h3>
              <ul className="space-y-2">
                <li><a href="#features" className="text-gray-300 hover:text-white transition-colors">–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏</a></li>
                <li><a href="#pricing" className="text-gray-300 hover:text-white transition-colors">–¢–∞—Ä–∏—Ñ—ã</a></li>
                <li><a href="#" className="text-gray-300 hover:text-white transition-colors">–î–ª—è –∫–æ–º–∞–Ω–¥</a></li>
                <li><a href="#" className="text-gray-300 hover:text-white transition-colors">–î–ª—è —Å–µ–±—è</a></li>
              </ul>
            </div>
            <div>
              <h3 className="text-lg font-semibold mb-4">–ö–æ–º–ø–∞–Ω–∏—è</h3>
              <ul className="space-y-2">
                <li><a href="#" className="text-gray-300 hover:text-white transition-colors">–û –Ω–∞—Å</a></li>
                <li><a href="#" className="text-gray-300 hover:text-white transition-colors">–ë–ª–æ–≥</a></li>
                <li><a href="#" className="text-gray-300 hover:text-white transition-colors">–ö–æ–Ω—Ç–∞–∫—Ç—ã</a></li>
              </ul>
            </div>
            <div>
              <h3 className="text-lg font-semibold mb-4">–ü–æ–¥–¥–µ—Ä–∂–∫–∞</h3>
              <ul className="space-y-2">
                <li><a href="#faq" className="text-gray-300 hover:text-white transition-colors">–¶–µ–Ω—Ç—Ä –ø–æ–º–æ—â–∏ (FAQ)</a></li>
                <li><a href="#" className="text-gray-300 hover:text-white transition-colors">–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞</a></li>
                <li><a href="#" className="text-gray-300 hover:text-white transition-colors">–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ</a></li>
              </ul>
            </div>
            <div>
              <h3 className="text-lg font-semibold mb-4">–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
              <ul className="space-y-2">
                <li><a href="#" className="text-gray-300 hover:text-white transition-colors">–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</a></li>
                <li><a href="#" className="text-gray-300 hover:text-white transition-colors">–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</a></li>
              </ul>
            </div>
          </div>
          <div className="mt-8 pt-8 border-t border-gray-800 text-center">
            <p className="text-gray-400">
              ¬© 2025 ProgressQuest Universal. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.
            </p>
          </div>
        </div>
      </footer>
    </div>
  );
}

--- src/pages/LoginPage.tsx ---

import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Button } from "@/components/ui/button";
import { useAuth } from "@/contexts/AuthContext";

export const LoginPage = () => {
  const navigate = useNavigate();
  const { login, loginWithGoogle } = useAuth();
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [loading, setLoading] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!email || !password) return;
    
    setLoading(true);
    try {
      await login(email, password);
      navigate('/app');
    } catch (error) {
      console.error('Login failed:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleGoogleLogin = async () => {
    try {
      await loginWithGoogle();
      navigate('/app');
    } catch (error) {
      console.error('Google login failed:', error);
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 flex items-center justify-center">
      <div className="max-w-md w-full bg-white rounded-lg shadow-md p-8">
        <h2 className="text-2xl font-bold text-center mb-8">–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É</h2>
        <form onSubmit={handleSubmit} className="space-y-6">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Email
            </label>
            <input
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
              placeholder="your@email.com"
              required
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              –ü–∞—Ä–æ–ª—å
            </label>
            <input
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
              placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
              required
            />
          </div>
          <Button
            type="submit"
            disabled={loading}
            className="w-full bg-indigo-600 hover:bg-indigo-700"
          >
            {loading ? '–í—Ö–æ–¥...' : '–í–æ–π—Ç–∏'}
          </Button>
          <p className="text-center">
            <a href="/forgot-password" className="text-sm text-indigo-600 hover:text-indigo-500">
              –ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?
            </a>
          </p>
        </form>

        <div className="mt-6">
          <div className="relative">
            <div className="absolute inset-0 flex items-center">
              <div className="w-full border-t border-gray-300"></div>
            </div>
            <div className="relative flex justify-center text-sm">
              <span className="px-2 bg-white text-gray-500">–ò–ª–∏ –≤–æ–π–¥–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é</span>
            </div>
          </div>

          <div className="mt-6">
            <Button 
              variant="outline"
              className="w-full"
              onClick={handleGoogleLogin}
            >
              <svg className="w-5 h-5 mr-2" viewBox="0 0 24 24">
                <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
                <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
                <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
                <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
              </svg>
              Google
            </Button>
          </div>
        </div>

        <p className="mt-8 text-center text-sm text-gray-600">
          –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞?
          <a href="/register" className="font-medium text-indigo-600 hover:text-indigo-500 ml-1">
            –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
          </a>
        </p>
      </div>
    </div>
  );
};


--- src/pages/NotFoundPage.tsx ---

import { Link } from 'react-router-dom';

export const NotFoundPage = () => {
  return (
    <div className="min-h-screen bg-gray-50 flex items-center justify-center">
      <div className="text-center">
        <div className="text-9xl font-bold text-gray-300 mb-4">404</div>
        <h1 className="text-4xl font-bold text-gray-900 mb-4">–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</h1>
        <p className="text-xl text-gray-600 mb-8">
          –ò–∑–≤–∏–Ω–∏—Ç–µ, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
        </p>
        <Link 
          to="/" 
          className="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors"
        >
          –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
        </Link>
      </div>
    </div>
  );
};


--- src/pages/ProfilePage.tsx ---

import React, { useState } from 'react';
import { useAuth } from '@/contexts/AuthContext';
import { toast } from 'sonner';

export const ProfilePage = () => {
  const { currentUser, updateUserProfile } = useAuth();
  const [isEditingName, setIsEditingName] = useState(false);
  const [newDisplayName, setNewDisplayName] = useState(currentUser?.displayName || '');

  const handleUpdateProfile = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!newDisplayName.trim()) {
      toast.error('–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      return;
    }
    
    try {
      await updateUserProfile(newDisplayName.trim());
      setIsEditingName(false);
    } catch (error) {
      console.error('Error updating profile:', error);
    }
  };

  const formatJoinDate = (user: any) => {
    if (user?.metadata?.creationTime) {
      return new Date(user.metadata.creationTime).toLocaleDateString('ru-RU', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      });
    }
    return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  };

  const getEmailVerificationStatus = () => {
    if (currentUser?.emailVerified) {
      return { text: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω', color: 'text-green-600' };
    }
    return { text: '–ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω', color: 'text-orange-600' };
  };

  return (
    <div className="p-6 bg-gradient-to-br from-slate-50 to-purple-50 min-h-screen">
      <div className="mb-6">
        <h1 className="text-3xl font-bold text-slate-800 mb-2 drop-shadow-sm">–ü—Ä–æ—Ñ–∏–ª—å</h1>
        <p className="text-slate-600 font-medium">–£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º –ø—Ä–æ—Ñ–∏–ª–µ–º –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏</p>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <div className="lg:col-span-1">
          <div className="bg-white/90 backdrop-blur-sm rounded-lg shadow-lg border border-white/50 p-6 text-center">
            <div className="w-24 h-24 bg-gradient-to-br from-purple-100 to-blue-100 rounded-full mx-auto mb-4 flex items-center justify-center">
              {currentUser?.photoURL ? (
                <img
                  src={currentUser.photoURL}
                  alt={currentUser.displayName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}
                  className="w-24 h-24 rounded-full object-cover"
                />
              ) : (
                <span className="text-2xl text-slate-600">üë§</span>
              )}
            </div>
            
            {isEditingName ? (
              <form onSubmit={handleUpdateProfile} className="mb-4">
                <input
                  type="text"
                  value={newDisplayName}
                  onChange={(e) => setNewDisplayName(e.target.value)}
                  className="w-full px-3 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500 text-center font-semibold"
                  autoFocus
                />
                <div className="flex justify-center space-x-2 mt-2">
                  <button
                    type="submit"
                    className="px-3 py-1 bg-purple-600 text-white rounded text-sm hover:bg-purple-700"
                  >
                    –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                  </button>
                  <button
                    type="button"
                    onClick={() => {
                      setIsEditingName(false);
                      setNewDisplayName(currentUser?.displayName || '');
                    }}
                    className="px-3 py-1 bg-gray-500 text-white rounded text-sm hover:bg-gray-600"
                  >
                    –û—Ç–º–µ–Ω–∞
                  </button>
                </div>
              </form>
            ) : (
              <div className="mb-4">
                <h2 className="text-xl font-semibold mb-1 text-slate-800">
                  {currentUser?.displayName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}
                </h2>
                <button
                  onClick={() => setIsEditingName(true)}
                  className="text-sm text-purple-600 hover:text-purple-800 underline"
                >
                  –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è
                </button>
              </div>
            )}
            
            <p className="text-slate-600 mb-2">{currentUser?.email}</p>
            <div className={`text-xs ${getEmailVerificationStatus().color} mb-4`}>
              Email: {getEmailVerificationStatus().text}
            </div>
            
            <div className="border-t border-slate-200 pt-4">
              <div className="text-center mb-4">
                <div className="text-2xl font-bold text-purple-600">1</div>
                <div className="text-sm text-slate-600">–£—Ä–æ–≤–µ–Ω—å</div>
              </div>
              <div className="w-full bg-slate-200 rounded-full h-2 mb-4">
                <div className="bg-purple-600 h-2 rounded-full" style={{width: '0%'}}></div>
              </div>
              <div className="text-sm text-slate-600">0 / 100 XP</div>
            </div>
            
            <div className="border-t border-slate-200 pt-4 mt-4">
              <div className="text-xs text-slate-500">
                –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {formatJoinDate(currentUser)}
              </div>
            </div>
          </div>

          <div className="bg-white/90 backdrop-blur-sm rounded-lg shadow-lg border border-white/50 p-6 mt-6">
            <h3 className="text-lg font-semibold mb-4 text-slate-700">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
            <div className="space-y-3">
              <div className="flex justify-between">
                <span className="text-slate-600">–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á:</span>
                <span className="font-semibold text-slate-800">0</span>
              </div>
              <div className="flex justify-between">
                <span className="text-slate-600">Pomodoro —Å–µ—Å—Å–∏–π:</span>
                <span className="font-semibold text-slate-800">0</span>
              </div>
              <div className="flex justify-between">
                <span className="text-slate-600">–î–Ω–µ–π –ø–æ–¥—Ä—è–¥:</span>
                <span className="font-semibold text-slate-800">0</span>
              </div>
              <div className="flex justify-between">
                <span className="text-slate-600">–ü—Ä–æ–µ–∫—Ç–æ–≤:</span>
                <span className="font-semibold text-slate-800">0</span>
              </div>
            </div>
          </div>
        </div>

        <div className="lg:col-span-2">
          <div className="bg-white/90 backdrop-blur-sm rounded-lg shadow-lg border border-white/50 p-6 mb-6">
            <h3 className="text-xl font-semibold mb-6 text-slate-700">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ</h3>
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-semibold text-slate-700 mb-2">
                  –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è
                </label>
                <div className="px-3 py-2 border border-slate-300 rounded-md bg-slate-50 text-slate-700">
                  {currentUser?.displayName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
                </div>
                <p className="text-xs text-slate-500 mt-1">–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è" –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏</p>
              </div>
              <div>
                <label className="block text-sm font-semibold text-slate-700 mb-2">
                  Email –∞–¥—Ä–µ—Å
                </label>
                <div className="px-3 py-2 border border-slate-300 rounded-md bg-slate-50 text-slate-700">
                  {currentUser?.email}
                </div>
                <p className="text-xs text-slate-500 mt-1">Email –Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</p>
              </div>
              <div>
                <label className="block text-sm font-semibold text-slate-700 mb-2">
                  –°—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
                </label>
                <div className={`px-3 py-2 border border-slate-300 rounded-md ${currentUser?.emailVerified ? 'bg-green-50 text-green-700' : 'bg-orange-50 text-orange-700'}`}>
                  {currentUser?.emailVerified ? '‚úÖ Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω' : '‚ö†Ô∏è Email –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω'}
                </div>
                {!currentUser?.emailVerified && (
                  <p className="text-xs text-orange-600 mt-1">–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ email –∞–¥—Ä–µ—Å</p>
                )}
              </div>
              <div>
                <label className="block text-sm font-semibold text-slate-700 mb-2">
                  –ü—Ä–æ–≤–∞–π–¥–µ—Ä –≤—Ö–æ–¥–∞
                </label>
                <div className="px-3 py-2 border border-slate-300 rounded-md bg-slate-50 text-slate-700">
                  {currentUser?.providerData?.[0]?.providerId === 'google.com' ? 'üîó Google' : 'üìß Email/–ü–∞—Ä–æ–ª—å'}
                </div>
              </div>
            </div>
          </div>

          <div className="bg-white/90 backdrop-blur-sm rounded-lg shadow-lg border border-white/50 p-6">
            <h3 className="text-xl font-semibold mb-6 text-slate-700">–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</h3>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              <div className="text-center p-4 bg-gradient-to-br from-slate-100 to-slate-200 rounded-lg hover:shadow-md transition-all duration-200">
                <div className="text-2xl mb-2">üèÜ</div>
                <div className="text-sm font-medium text-slate-700">–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏</div>
                <div className="text-xs text-slate-500">–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ</div>
              </div>
              <div className="text-center p-4 bg-gradient-to-br from-slate-100 to-slate-200 rounded-lg hover:shadow-md transition-all duration-200">
                <div className="text-2xl mb-2">‚≠ê</div>
                <div className="text-sm font-medium text-slate-700">–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π</div>
                <div className="text-xs text-slate-500">–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ</div>
              </div>
              <div className="text-center p-4 bg-gradient-to-br from-slate-100 to-slate-200 rounded-lg hover:shadow-md transition-all duration-200">
                <div className="text-2xl mb-2">üî•</div>
                <div className="text-sm font-medium text-slate-700">Streak –º–∞—Å—Ç–µ—Ä</div>
                <div className="text-xs text-slate-500">–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ</div>
              </div>
              <div className="text-center p-4 bg-gradient-to-br from-slate-100 to-slate-200 rounded-lg hover:shadow-md transition-all duration-200">
                <div className="text-2xl mb-2">üå±</div>
                <div className="text-sm font-medium text-slate-700">–°–∞–¥–æ–≤–Ω–∏–∫</div>
                <div className="text-xs text-slate-500">–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ</div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};


--- src/pages/ProjectsPage.tsx ---


export const ProjectsPage = () => {
  return (
    <div className="p-6">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-3xl font-bold text-gray-900">–ü—Ä–æ–µ–∫—Ç—ã</h1>
        <button className="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700">
          –ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
        </button>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        <div className="bg-white p-6 rounded-lg shadow-md border-2 border-dashed border-gray-200 flex flex-col items-center justify-center min-h-[200px]">
          <div className="text-gray-400 text-4xl mb-4">+</div>
          <h3 className="text-lg font-medium text-gray-600 mb-2">–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç</h3>
          <p className="text-gray-500 text-sm text-center">
            –û—Ä–≥–∞–Ω–∏–∑—É–π—Ç–µ —Å–≤–æ–∏ –∑–∞–¥–∞—á–∏ –≤ –ø—Ä–æ–µ–∫—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
          </p>
        </div>
      </div>
    </div>
  );
};


--- src/pages/RegisterPage.tsx ---

import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Button } from "@/components/ui/button";
import { useAuth } from "@/contexts/AuthContext";
import { toast } from 'sonner';

export const RegisterPage = () => {
  const navigate = useNavigate();
  const { register, loginWithGoogle } = useAuth();
  const [formData, setFormData] = useState({
    displayName: '',
    email: '',
    password: '',
    confirmPassword: ''
  });
  const [loading, setLoading] = useState(false);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value
    });
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (formData.password !== formData.confirmPassword) {
      toast.error('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
      return;
    }
    
    if (formData.password.length < 6) {
      toast.error('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤');
      return;
    }
    
    setLoading(true);
    try {
      await register(formData.email, formData.password, formData.displayName);
      navigate('/app');
    } catch (error) {
      console.error('Registration failed:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleGoogleLogin = async () => {
    try {
      await loginWithGoogle();
      navigate('/app');
    } catch (error) {
      console.error('Google login failed:', error);
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 flex items-center justify-center">
      <div className="max-w-md w-full bg-white rounded-lg shadow-md p-8">
        <h2 className="text-2xl font-bold text-center mb-8">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</h2>
        <form onSubmit={handleSubmit} className="space-y-6">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              –ò–º—è
            </label>
            <input
              type="text"
              name="displayName"
              value={formData.displayName}
              onChange={handleChange}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
              placeholder="–í–∞—à–µ –∏–º—è"
              required
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Email
            </label>
            <input
              type="email"
              name="email"
              value={formData.email}
              onChange={handleChange}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
              placeholder="your@email.com"
              required
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              –ü–∞—Ä–æ–ª—å
            </label>
            <input
              type="password"
              name="password"
              value={formData.password}
              onChange={handleChange}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
              placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
              required
              minLength={6}
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å
            </label>
            <input
              type="password"
              name="confirmPassword"
              value={formData.confirmPassword}
              onChange={handleChange}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
              placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
              required
              minLength={6}
            />
          </div>
          <Button
            type="submit"
            disabled={loading}
            className="w-full bg-indigo-600 hover:bg-indigo-700"
          >
            {loading ? '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...' : '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'}
          </Button>
        </form>

        <div className="mt-6">
          <div className="relative">
            <div className="absolute inset-0 flex items-center">
              <div className="w-full border-t border-gray-300"></div>
            </div>
            <div className="relative flex justify-center text-sm">
              <span className="px-2 bg-white text-gray-500">–ò–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é</span>
            </div>
          </div>

          <div className="mt-6">
            <Button 
              variant="outline"
              className="w-full"
              onClick={handleGoogleLogin}
            >
              <svg className="w-5 h-5 mr-2" viewBox="0 0 24 24">
                <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
                <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
                <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
                <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
              </svg>
              Google
            </Button>
          </div>
        </div>

        <p className="mt-8 text-center text-sm text-gray-600">
          –£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç?
          <a href="/login" className="font-medium text-indigo-600 hover:text-indigo-500 ml-1">
            –í–æ–π—Ç–∏
          </a>
        </p>
      </div>
    </div>
  );
};


--- src/pages/SettingsPage.tsx ---

import { useState } from 'react';

type SettingsSection = 'general' | 'notifications' | 'pomodoro' | 'gamification' | 'security';

export const SettingsPage = () => {
  const [activeSection, setActiveSection] = useState<SettingsSection>('general');

  const sections = [
    { id: 'general' as const, name: '–û–±—â–∏–µ', icon: '‚öôÔ∏è' },
    { id: 'notifications' as const, name: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', icon: 'üîî' },
    { id: 'pomodoro' as const, name: 'Pomodoro', icon: 'üçÖ' },
    { id: 'gamification' as const, name: '–ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è', icon: 'üéÆ' },
    { id: 'security' as const, name: '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', icon: 'üîí' },
  ];

  const renderContent = () => {
    switch (activeSection) {
      case 'general':
        return (
          <div>
            <h2 className="text-xl font-semibold mb-6 text-slate-700">–û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h2>
            <div className="space-y-6">
              <div>
                <label className="block text-sm font-semibold text-slate-700 mb-2">
                  –¢–µ–º–∞
                </label>
                <select className="w-full px-3 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white/90 text-slate-700 font-medium">
                  <option>–°–∏—Å—Ç–µ–º–Ω–∞—è</option>
                  <option>–°–≤–µ—Ç–ª–∞—è</option>
                  <option>–¢–µ–º–Ω–∞—è</option>
                </select>
              </div>
              <div>
                <label className="block text-sm font-semibold text-slate-700 mb-2">
                  –Ø–∑—ã–∫
                </label>
                <select className="w-full px-3 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white/90 text-slate-700 font-medium">
                  <option>–†—É—Å—Å–∫–∏–π</option>
                  <option>English</option>
                </select>
              </div>
              <div>
                <label className="block text-sm font-semibold text-slate-700 mb-2">
                  –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å
                </label>
                <select className="w-full px-3 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white/90 text-slate-700 font-medium">
                  <option>UTC+3 (–ú–æ—Å–∫–≤–∞)</option>
                  <option>UTC+0 (GMT)</option>
                </select>
              </div>
              <div className="pt-4">
                <button className="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 shadow-md font-medium transition-all duration-200 hover:shadow-lg">
                  –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
                </button>
              </div>
            </div>
          </div>
        );
      
      case 'notifications':
        return (
          <div>
            <h2 className="text-xl font-semibold mb-6 text-slate-700">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</h2>
            <div className="space-y-6">
              <div className="flex items-center justify-between">
                <div>
                  <h3 className="text-sm font-semibold text-slate-700">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–¥–∞—á–∞—Ö</h3>
                  <p className="text-xs text-slate-500">–ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á–∞—Ö</p>
                </div>
                <label className="relative inline-flex items-center cursor-pointer">
                  <input type="checkbox" className="sr-only peer" defaultChecked />
                  <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                </label>
              </div>
              <div className="flex items-center justify-between">
                <div>
                  <h3 className="text-sm font-semibold text-slate-700">Pomodoro —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h3>
                  <p className="text-xs text-slate-500">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–π</p>
                </div>
                <label className="relative inline-flex items-center cursor-pointer">
                  <input type="checkbox" className="sr-only peer" defaultChecked />
                  <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                </label>
              </div>
              <div className="flex items-center justify-between">
                <div>
                  <h3 className="text-sm font-semibold text-slate-700">–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</h3>
                  <p className="text-xs text-slate-500">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö</p>
                </div>
                <label className="relative inline-flex items-center cursor-pointer">
                  <input type="checkbox" className="sr-only peer" defaultChecked />
                  <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                </label>
              </div>
            </div>
          </div>
        );
      
      case 'pomodoro':
        return (
          <div>
            <h2 className="text-xl font-semibold mb-6 text-slate-700">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Pomodoro</h2>
            <div className="space-y-6">
              <div>
                <label className="block text-sm font-semibold text-slate-700 mb-2">
                  –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—á–µ–π —Å–µ—Å—Å–∏–∏ (–º–∏–Ω—É—Ç)
                </label>
                <input
                  type="number"
                  min="1"
                  max="60"
                  defaultValue="25"
                  className="w-full px-3 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white/90 text-slate-700 font-medium"
                />
              </div>
              <div>
                <label className="block text-sm font-semibold text-slate-700 mb-2">
                  –ö–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤ (–º–∏–Ω—É—Ç)
                </label>
                <input
                  type="number"
                  min="1"
                  max="30"
                  defaultValue="5"
                  className="w-full px-3 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white/90 text-slate-700 font-medium"
                />
              </div>
              <div>
                <label className="block text-sm font-semibold text-slate-700 mb-2">
                  –î–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤ (–º–∏–Ω—É—Ç)
                </label>
                <input
                  type="number"
                  min="10"
                  max="60"
                  defaultValue="15"
                  className="w-full px-3 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white/90 text-slate-700 font-medium"
                />
              </div>
              <div>
                <label className="block text-sm font-semibold text-slate-700 mb-2">
                  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π –¥–æ –¥–ª–∏–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞
                </label>
                <input
                  type="number"
                  min="2"
                  max="8"
                  defaultValue="4"
                  className="w-full px-3 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white/90 text-slate-700 font-medium"
                />
              </div>
            </div>
          </div>
        );
      
      case 'gamification':
        return (
          <div>
            <h2 className="text-xl font-semibold mb-6 text-slate-700">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏</h2>
            <div className="space-y-6">
              <div className="flex items-center justify-between">
                <div>
                  <h3 className="text-sm font-semibold text-slate-700">–°–∏—Å—Ç–µ–º–∞ –æ–ø—ã—Ç–∞</h3>
                  <p className="text-xs text-slate-500">–ü–æ–ª—É—á–∞—Ç—å –æ–ø—ã—Ç –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏</p>
                </div>
                <label className="relative inline-flex items-center cursor-pointer">
                  <input type="checkbox" className="sr-only peer" defaultChecked />
                  <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                </label>
              </div>
              <div className="flex items-center justify-between">
                <div>
                  <h3 className="text-sm font-semibold text-slate-700">–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</h3>
                  <p className="text-xs text-slate-500">–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –Ω–∞–≥—Ä–∞–¥—ã</p>
                </div>
                <label className="relative inline-flex items-center cursor-pointer">
                  <input type="checkbox" className="sr-only peer" defaultChecked />
                  <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                </label>
              </div>
              <div className="flex items-center justify-between">
                <div>
                  <h3 className="text-sm font-semibold text-slate-700">–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Å–∞–¥</h3>
                  <p className="text-xs text-slate-500">–í—ã—Ä–∞—â–∏–≤–∞—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏—è –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏</p>
                </div>
                <label className="relative inline-flex items-center cursor-pointer">
                  <input type="checkbox" className="sr-only peer" defaultChecked />
                  <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                </label>
              </div>
            </div>
          </div>
        );
      
      case 'security':
        return (
          <div>
            <h2 className="text-xl font-semibold mb-6 text-slate-700">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</h2>
            <div className="space-y-6">
              <div>
                <h3 className="text-sm font-semibold text-slate-700 mb-4">–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è</h3>
                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-slate-700 mb-2">
                      –¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å
                    </label>
                    <input
                      type="password"
                      className="w-full px-3 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white/90 text-slate-700"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-slate-700 mb-2">
                      –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
                    </label>
                    <input
                      type="password"
                      className="w-full px-3 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white/90 text-slate-700"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-slate-700 mb-2">
                      –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
                    </label>
                    <input
                      type="password"
                      className="w-full px-3 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white/90 text-slate-700"
                    />
                  </div>
                  <button className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors">
                    –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å
                  </button>
                </div>
              </div>
              <div className="border-t border-slate-200 pt-6">
                <h3 className="text-sm font-semibold text-slate-700 mb-4 text-red-600">–û–ø–∞—Å–Ω–∞—è –∑–æ–Ω–∞</h3>
                <button className="bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700 transition-colors">
                  –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç
                </button>
                <p className="text-xs text-slate-500 mt-2">–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å</p>
              </div>
            </div>
          </div>
        );
      
      default:
        return null;
    }
  };

  return (
    <div className="p-6 bg-gradient-to-br from-slate-50 to-indigo-50 min-h-screen">
      <div className="mb-6">
        <h1 className="text-3xl font-bold text-slate-800 mb-2 drop-shadow-sm">–ù–∞—Å—Ç—Ä–æ–π–∫–∏</h1>
        <p className="text-slate-600 font-medium">–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–≤–æ–π –æ–ø—ã—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</p>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <div className="lg:col-span-1">
          <div className="bg-white/90 backdrop-blur-sm rounded-lg shadow-lg border border-white/50 p-4">
            <nav className="space-y-2">
              {sections.map((section) => (
                <button
                  key={section.id}
                  onClick={() => setActiveSection(section.id)}
                  className={`w-full text-left px-4 py-2 rounded-lg font-medium transition-all duration-200 flex items-center space-x-3 ${
                    activeSection === section.id
                      ? 'bg-blue-100 text-blue-800 shadow-sm border border-blue-200'
                      : 'text-slate-700 hover:bg-slate-100 hover:text-slate-800'
                  }`}
                >
                  <span className="text-lg">{section.icon}</span>
                  <span>{section.name}</span>
                </button>
              ))}
            </nav>
          </div>
        </div>

        <div className="lg:col-span-2">
          <div className="bg-white/90 backdrop-blur-sm rounded-lg shadow-lg border border-white/50 p-6">
            {renderContent()}
          </div>
        </div>
      </div>
    </div>
  );
};


--- src/pages/TasksPage.tsx ---

import { useState } from 'react';
import { CreateTaskModal } from '@/components/CreateTaskModal';

export const TasksPage = () => {
  const [isCreateTaskModalOpen, setIsCreateTaskModalOpen] = useState(false);

  const handleCreateTask = (taskData: any) => {
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
    console.log('–°–æ–∑–¥–∞—ë—Ç—Å—è –∑–∞–¥–∞—á–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∑–∞–¥–∞—á:', taskData);
    // TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å backend/Firebase
  };

  return (
    <div className="p-6 bg-gradient-to-br from-slate-50 to-blue-50 min-h-screen">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-3xl font-bold text-slate-800 drop-shadow-sm">–ó–∞–¥–∞—á–∏</h1>
        <button
          onClick={() => setIsCreateTaskModalOpen(true)}
          className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 shadow-md transition-all duration-200 hover:shadow-lg"
        >
          + –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞
        </button>
      </div>

      <div className="bg-white rounded-lg shadow-md">
        <div className="p-6">
          <div className="flex space-x-4 mb-6">
            <button className="px-4 py-2 bg-blue-100 text-blue-800 rounded-lg">
              –í—Å–µ
            </button>
            <button className="px-4 py-2 text-gray-600 hover:bg-gray-100 rounded-lg">
              –ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é
            </button>
            <button className="px-4 py-2 text-gray-600 hover:bg-gray-100 rounded-lg">
              –í —Ä–∞–±–æ—Ç–µ
            </button>
            <button className="px-4 py-2 text-gray-600 hover:bg-gray-100 rounded-lg">
              –í—ã–ø–æ–ª–Ω–µ–Ω–æ
            </button>
          </div>

          <div className="text-center py-12">
            <p className="text-slate-500 text-lg">–ó–∞–¥–∞—á –ø–æ–∫–∞ –Ω–µ—Ç</p>
            <p className="text-slate-400 mt-2">–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å</p>
          </div>
        </div>
      </div>

      {/* Create Task Modal */}
      <CreateTaskModal
        isOpen={isCreateTaskModalOpen}
        onClose={() => setIsCreateTaskModalOpen(false)}
        onSubmit={handleCreateTask}
      />
    </div>
  );
};


--- src/pages/WorkspacePage.tsx ---

import React, { useState, useEffect } from 'react'
import { useSearchParams } from 'react-router-dom'
import { useWorkspaces, useCreateWorkspace, useUpdateWorkspace, useDeleteWorkspace } from '@/hooks/useWorkspaces'
import { useWorkspaceStore } from '@/stores/workspaceStore'
import { WorkspaceCard } from '@/components/WorkspaceCard'
import { WorkspaceModal } from '@/components/WorkspaceModal'
import { WorkspaceClientDto, CreateWorkspacePayload } from '@/services/workspaceService'
// import { toast } from 'sonner' // TODO: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

export const WorkspacesPage: React.FC = () => {
  const [searchParams, setSearchParams] = useSearchParams()
  
  const {
    workspaces,
    searchQuery,
    viewMode,
    showPersonalOnly,
    showTeamOnly,
    selectedTags,
    sortBy,
    sortOrder,
    getAllTags,
    getFilteredWorkspaces,
    setWorkspaces,
    setSearchQuery,
    setViewMode,
    setShowPersonalOnly,
    setShowTeamOnly,
    toggleTag,
    setSortBy,
    setSortOrder,
    clearFilters,
  } = useWorkspaceStore()

  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false)
  const [isEditModalOpen, setIsEditModalOpen] = useState(false)
  const [editingWorkspace, setEditingWorkspace] = useState<WorkspaceClientDto | null>(null)

  // React Query hooks
  const {
    data: workspacesData,
    isLoading: isLoadingWorkspaces,
    error: workspacesError,
  } = useWorkspaces()

  const createWorkspaceMutation = useCreateWorkspace()
  const updateWorkspaceMutation = useUpdateWorkspace()
  const deleteWorkspaceMutation = useDeleteWorkspace()

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞
  useEffect(() => {
    if (workspacesData?.workspaces) {
      setWorkspaces(workspacesData.workspaces)
    }
  }, [workspacesData, setWorkspaces])

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ create
  useEffect(() => {
    if (searchParams.get('create') === 'true') {
      setIsCreateModalOpen(true)
      // –£–¥–∞–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –∏–∑ URL
      setSearchParams(prev => {
        const newParams = new URLSearchParams(prev)
        newParams.delete('create')
        return newParams
      })
    }
  }, [searchParams, setSearchParams])

  // –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—á–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
  const filteredWorkspaces = getFilteredWorkspaces()
  const allTags = getAllTags()

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  const handleCreateWorkspace = async (payload: CreateWorkspacePayload) => {
    try {
      await createWorkspaceMutation.mutateAsync(payload)
      setIsCreateModalOpen(false)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞:', error)
    }
  }

  const handleEditWorkspace = (workspace: WorkspaceClientDto) => {
    setEditingWorkspace(workspace)
    setIsEditModalOpen(true)
  }

  const handleUpdateWorkspace = async (payload: CreateWorkspacePayload) => {
    if (!editingWorkspace) return

    try {
      await updateWorkspaceMutation.mutateAsync({
        workspaceId: editingWorkspace.id,
        ...payload,
      })
      setIsEditModalOpen(false)
      setEditingWorkspace(null)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞:', error)
    }
  }

  const handleDeleteWorkspace = async (workspaceId: string) => {
    try {
      await deleteWorkspaceMutation.mutateAsync(workspaceId)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞:', error)
    }
  }

  const handleSortChange = (newSortBy: 'name' | 'created' | 'updated') => {
    if (sortBy === newSortBy) {
      setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc')
    } else {
      setSortBy(newSortBy)
      setSortOrder('desc')
    }
  }

  if (isLoadingWorkspaces) {
    return (
      <div className="p-6 bg-gradient-to-br from-slate-50 to-blue-50 min-h-screen">
        <div className="flex items-center justify-center h-64">
          <div className="text-center">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
            <p className="text-slate-600">–ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞–±–æ—á–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞...</p>
          </div>
        </div>
      </div>
    )
  }

  if (workspacesError) {
    return (
      <div className="p-6 bg-gradient-to-br from-slate-50 to-blue-50 min-h-screen">
        <div className="flex items-center justify-center h-64">
          <div className="text-center">
            <div className="text-red-500 text-xl mb-4">‚ö†Ô∏è</div>
            <h3 className="text-lg font-semibold text-slate-800 mb-2">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
            <p className="text-slate-600 mb-4">{workspacesError.message}</p>
            <button
              onClick={() => window.location.reload()}
              className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
            >
              –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            </button>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="p-6 bg-gradient-to-br from-slate-50 to-blue-50 min-h-screen">
      {/* Header */}
      <div className="mb-8">
        <div className="flex items-center justify-between mb-4">
          <div>
            <h1 className="text-3xl font-bold text-slate-800 mb-2">–†–∞–±–æ—á–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞</h1>
            <p className="text-slate-600">
              –£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –∏ –∑–∞–¥–∞—á–∞–º–∏ –≤ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞—Ö
            </p>
          </div>
          <button
            onClick={() => setIsCreateModalOpen(true)}
            disabled={createWorkspaceMutation.isPending}
            className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 shadow-md transition-all duration-200 hover:shadow-lg disabled:opacity-50 disabled:cursor-not-allowed"
          >
            {createWorkspaceMutation.isPending ? '‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ...' : '+ –ù–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ'}
          </button>
        </div>

        {/* Stats */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
          <div className="bg-white p-4 rounded-lg shadow-sm border">
            <div className="text-2xl font-bold text-blue-600">{workspaces.length}</div>
            <div className="text-sm text-slate-600">–í—Å–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤</div>
          </div>
          <div className="bg-white p-4 rounded-lg shadow-sm border">
            <div className="text-2xl font-bold text-green-600">
              {workspaces.filter(w => w.isPersonal).length}
            </div>
            <div className="text-sm text-slate-600">–õ–∏—á–Ω—ã—Ö</div>
          </div>
          <div className="bg-white p-4 rounded-lg shadow-sm border">
            <div className="text-2xl font-bold text-purple-600">
              {workspaces.filter(w => !w.isPersonal).length}
            </div>
            <div className="text-sm text-slate-600">–ö–æ–º–∞–Ω–¥–Ω—ã—Ö</div>
          </div>
          <div className="bg-white p-4 rounded-lg shadow-sm border">
            <div className="text-2xl font-bold text-orange-600">{allTags.length}</div>
            <div className="text-sm text-slate-600">–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ–≥–æ–≤</div>
          </div>
        </div>
      </div>

      {/* Filters and Controls */}
      <div className="bg-white rounded-lg border border-slate-200 shadow-sm mb-6">
        <div className="p-4 border-b border-slate-200">
          {/* Search and View Toggle */}
          <div className="flex items-center justify-between mb-4">
            <div className="flex-1 max-w-md">
              <input
                type="text"
                placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—é..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="w-full px-3 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white text-slate-900"
              />
            </div>
            
            {/* View Mode Toggle */}
            <div className="flex items-center space-x-2 ml-4">
              <button
                onClick={() => setViewMode('grid')}
                className={`p-2 rounded ${viewMode === 'grid' ? 'bg-blue-100 text-blue-700' : 'text-slate-600 hover:bg-slate-100'}`}
                title="–°–µ—Ç–∫–∞"
              >
                ‚äû
              </button>
              <button
                onClick={() => setViewMode('list')}
                className={`p-2 rounded ${viewMode === 'list' ? 'bg-blue-100 text-blue-700' : 'text-slate-600 hover:bg-slate-100'}`}
                title="–°–ø–∏—Å–æ–∫"
              >
                ‚ò∞
              </button>
            </div>
          </div>

          {/* Filter buttons */}
          <div className="flex flex-wrap items-center gap-3 mb-4">
            <button
              onClick={() => setShowPersonalOnly(!showPersonalOnly)}
              className={`px-3 py-1 rounded-full text-sm border transition-colors ${
                showPersonalOnly
                  ? 'bg-blue-100 text-blue-700 border-blue-300'
                  : 'bg-white text-slate-600 border-slate-300 hover:bg-slate-50'
              }`}
            >
              üë§ –¢–æ–ª—å–∫–æ –ª–∏—á–Ω—ã–µ
            </button>
            
            <button
              onClick={() => setShowTeamOnly(!showTeamOnly)}
              className={`px-3 py-1 rounded-full text-sm border transition-colors ${
                showTeamOnly
                  ? 'bg-purple-100 text-purple-700 border-purple-300'
                  : 'bg-white text-slate-600 border-slate-300 hover:bg-slate-50'
              }`}
            >
              üë• –¢–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥–Ω—ã–µ
            </button>

            {/* Tag filters */}
            {allTags.slice(0, 5).map((tag) => (
              <button
                key={tag}
                onClick={() => toggleTag(tag)}
                className={`px-3 py-1 rounded-full text-sm border transition-colors ${
                  selectedTags.includes(tag)
                    ? 'bg-green-100 text-green-700 border-green-300'
                    : 'bg-white text-slate-600 border-slate-300 hover:bg-slate-50'
                }`}
              >
                #{tag}
              </button>
            ))}

            {(searchQuery || showPersonalOnly || showTeamOnly || selectedTags.length > 0) && (
              <button
                onClick={clearFilters}
                className="px-3 py-1 text-sm text-red-600 hover:bg-red-50 rounded"
              >
                ‚úï –û—á–∏—Å—Ç–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
              </button>
            )}
          </div>

          {/* Sort options */}
          <div className="flex items-center space-x-4">
            <span className="text-sm text-slate-600">–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å:</span>
            {(['name', 'created', 'updated'] as const).map((option) => (
              <button
                key={option}
                onClick={() => handleSortChange(option)}
                className={`text-sm px-2 py-1 rounded transition-colors ${
                  sortBy === option
                    ? 'bg-blue-100 text-blue-700'
                    : 'text-slate-600 hover:bg-slate-100'
                }`}
              >
                {option === 'name' && '–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é'}
                {option === 'created' && '–ü–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è'}
                {option === 'updated' && '–ü–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é'}
                {sortBy === option && (sortOrder === 'asc' ? ' ‚Üë' : ' ‚Üì')}
              </button>
            ))}
          </div>
        </div>

        {/* Results count */}
        <div className="px-4 py-2 bg-slate-50 text-sm text-slate-600">
          –ù–∞–π–¥–µ–Ω–æ: {filteredWorkspaces.length} –∏–∑ {workspaces.length} –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤
        </div>
      </div>

      {/* Workspaces Grid/List */}
      {filteredWorkspaces.length === 0 ? (
        <div className="text-center py-12">
          <div className="text-6xl mb-4">üè¢</div>
          <h3 className="text-xl font-semibold text-slate-800 mb-2">
            {workspaces.length === 0 ? '–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –ø–æ–∫–∞ –Ω–µ—Ç' : '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'}
          </h3>
          <p className="text-slate-600 mb-6">
            {workspaces.length === 0
              ? '–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—ë –ø–µ—Ä–≤–æ–µ —Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞—á'
              : '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –æ—á–∏—Å—Ç–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã'
            }
          </p>
          {workspaces.length === 0 && (
            <button
              onClick={() => setIsCreateModalOpen(true)}
              className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
            >
              + –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
            </button>
          )}
        </div>
      ) : (
        <div className={`${
          viewMode === 'grid'
            ? 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6'
            : 'space-y-4'
        }`}>
          {filteredWorkspaces.map((workspace) => (
            <WorkspaceCard
              key={workspace.id}
              workspace={workspace}
              onEdit={handleEditWorkspace}
              onDelete={handleDeleteWorkspace}
              variant={viewMode === 'list' ? 'detailed' : 'default'}
            />
          ))}
        </div>
      )}

      {/* Create Workspace Modal */}
      <WorkspaceModal
        isOpen={isCreateModalOpen}
        onClose={() => setIsCreateModalOpen(false)}
        onSubmit={handleCreateWorkspace}
        mode="create"
      />

      {/* Edit Workspace Modal */}
      <WorkspaceModal
        isOpen={isEditModalOpen}
        onClose={() => {
          setIsEditModalOpen(false)
          setEditingWorkspace(null)
        }}
        onSubmit={handleUpdateWorkspace}
        workspace={editingWorkspace}
        mode="edit"
      />
    </div>
  )
}



--- src/services/firebase.ts ---

import { app } from '@/lib/firebase'

// Initialize Firebase app
export function initializeApp() {
  return app
}

// Utility function to handle Firebase errors
export function handleFirebaseError(error: any): string {
  switch (error.code) {
    case 'auth/user-not-found':
      return '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
    case 'auth/wrong-password':
      return '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å'
    case 'auth/email-already-in-use':
      return 'Email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è'
    case 'auth/weak-password':
      return '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤'
    case 'auth/invalid-email':
      return '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email'
    case 'auth/too-many-requests':
      return '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ'
    case 'permission-denied':
      return '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞'
    case 'not-found':
      return '–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
    case 'already-exists':
      return '–î–æ–∫—É–º–µ–Ω—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
    case 'resource-exhausted':
      return '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤'
    case 'unavailable':
      return '–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
    default:
      console.error('Firebase error:', error)
      return error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
  }
}


--- src/services/taskService.ts ---

import {
  collection,
  doc,
  getDoc,
  getDocs,
  addDoc,
  updateDoc,
  deleteDoc,
  query,
  where,
  orderBy,
  limit,
  startAfter,
  serverTimestamp,
  writeBatch,
} from 'firebase/firestore'
import { db } from '@/lib/firebase'
import { Task, TaskStatus, TaskPriority, PaginatedResponse } from '@/types'
import { handleFirebaseError } from './firebase'
import { generateId } from '@/utils/helpers'

const TASKS_COLLECTION = 'tasks'

export interface TaskFilters {
  workspaceId?: string
  projectId?: string
  assigneeId?: string
  status?: TaskStatus
  priority?: TaskPriority
  tags?: string[]
  dueDate?: Date
  isArchived?: boolean
}

export interface TaskCreateData {
  title: string
  description?: string
  workspaceId: string
  projectId?: string
  assigneeId?: string
  priority: TaskPriority
  tags?: string[]
  dueDate?: Date
  estimatedDuration?: number
  parentId?: string
}

export class TaskService {
  // Create a new task
  static async createTask(
    userId: string,
    taskData: TaskCreateData
  ): Promise<string> {
    try {
      const taskRef = collection(db, TASKS_COLLECTION)
      
      const task: Omit<Task, 'id'> = {
        title: taskData.title,
        description: taskData.description,
        workspaceId: taskData.workspaceId,
        projectId: taskData.projectId,
        assigneeId: taskData.assigneeId,
        createdById: userId,
        parentId: taskData.parentId,
        status: 'todo',
        priority: taskData.priority,
        tags: taskData.tags || [],
        dueDate: taskData.dueDate,
        createdAt: new Date(),
        updatedAt: new Date(),
        estimatedDuration: taskData.estimatedDuration,
        pomodoroCount: 0,
        attachments: [],
        comments: [],
        dependencies: [],
        customFields: {},
        isArchived: false,
      }

      const docRef = await addDoc(taskRef, {
        ...task,
        createdAt: serverTimestamp(),
        updatedAt: serverTimestamp(),
      })

      return docRef.id
    } catch (error) {
      throw new Error(handleFirebaseError(error))
    }
  }

  // Get task by ID
  static async getTask(taskId: string): Promise<Task | null> {
    try {
      const taskRef = doc(db, TASKS_COLLECTION, taskId)
      const taskSnap = await getDoc(taskRef)
      
      if (taskSnap.exists()) {
        const data = taskSnap.data()
        return {
          id: taskSnap.id,
          ...data,
          createdAt: data.createdAt?.toDate() || new Date(),
          updatedAt: data.updatedAt?.toDate() || new Date(),
          dueDate: data.dueDate?.toDate(),
          completedAt: data.completedAt?.toDate(),
        } as Task
      }
      
      return null
    } catch (error) {
      throw new Error(handleFirebaseError(error))
    }
  }

  // Get tasks with filters and pagination
  static async getTasks(
    filters: TaskFilters = {},
    pageSize: number = 20,
    lastDoc?: any
  ): Promise<PaginatedResponse<Task>> {
    try {
      let q = query(collection(db, TASKS_COLLECTION))

      // Apply filters
      if (filters.workspaceId) {
        q = query(q, where('workspaceId', '==', filters.workspaceId))
      }
      if (filters.projectId) {
        q = query(q, where('projectId', '==', filters.projectId))
      }
      if (filters.assigneeId) {
        q = query(q, where('assigneeId', '==', filters.assigneeId))
      }
      if (filters.status) {
        q = query(q, where('status', '==', filters.status))
      }
      if (filters.priority) {
        q = query(q, where('priority', '==', filters.priority))
      }
      if (filters.isArchived !== undefined) {
        q = query(q, where('isArchived', '==', filters.isArchived))
      }

      // Order by creation date (newest first)
      q = query(q, orderBy('createdAt', 'desc'))

      // Pagination
      if (lastDoc) {
        q = query(q, startAfter(lastDoc))
      }
      q = query(q, limit(pageSize + 1)) // Get one extra to check if there are more

      const querySnapshot = await getDocs(q)
      const tasks: Task[] = []
      const docs = querySnapshot.docs

      docs.slice(0, pageSize).forEach((doc) => {
        const data = doc.data()
        tasks.push({
          id: doc.id,
          ...data,
          createdAt: data.createdAt?.toDate() || new Date(),
          updatedAt: data.updatedAt?.toDate() || new Date(),
          dueDate: data.dueDate?.toDate(),
          completedAt: data.completedAt?.toDate(),
        } as Task)
      })

      const hasNext = docs.length > pageSize
      const hasPrev = !!lastDoc

      return {
        items: tasks,
        total: tasks.length, // Note: Firestore doesn't provide total count efficiently
        page: 1, // We don't track page numbers with cursor pagination
        limit: pageSize,
        hasNext,
        hasPrev,
      }
    } catch (error) {
      throw new Error(handleFirebaseError(error))
    }
  }

  // Update task
  static async updateTask(taskId: string, updates: Partial<Task>): Promise<void> {
    try {
      const taskRef = doc(db, TASKS_COLLECTION, taskId)
      await updateDoc(taskRef, {
        ...updates,
        updatedAt: serverTimestamp(),
      })
    } catch (error) {
      throw new Error(handleFirebaseError(error))
    }
  }

  // Update task status
  static async updateTaskStatus(taskId: string, status: TaskStatus): Promise<void> {
    try {
      const taskRef = doc(db, TASKS_COLLECTION, taskId)
      const updates: any = {
        status,
        updatedAt: serverTimestamp(),
      }

      if (status === 'done') {
        updates.completedAt = serverTimestamp()
      }

      await updateDoc(taskRef, updates)
    } catch (error) {
      throw new Error(handleFirebaseError(error))
    }
  }

  // Delete task
  static async deleteTask(taskId: string): Promise<void> {
    try {
      const taskRef = doc(db, TASKS_COLLECTION, taskId)
      await deleteDoc(taskRef)
    } catch (error) {
      throw new Error(handleFirebaseError(error))
    }
  }

  // Archive/Unarchive task
  static async archiveTask(taskId: string, isArchived: boolean): Promise<void> {
    try {
      const taskRef = doc(db, TASKS_COLLECTION, taskId)
      await updateDoc(taskRef, {
        isArchived,
        updatedAt: serverTimestamp(),
      })
    } catch (error) {
      throw new Error(handleFirebaseError(error))
    }
  }

  // Add comment to task
  static async addComment(
    taskId: string,
    userId: string,
    content: string
  ): Promise<void> {
    try {
      const taskRef = doc(db, TASKS_COLLECTION, taskId)
      const task = await this.getTask(taskId)
      
      if (!task) throw new Error('Task not found')

      const newComment = {
        id: generateId(),
        content,
        authorId: userId,
        createdAt: new Date(),
        updatedAt: new Date(),
        isEdited: false,
        mentions: [], // TODO: Extract mentions from content
      }

      const updatedComments = [...task.comments, newComment]

      await updateDoc(taskRef, {
        comments: updatedComments,
        updatedAt: serverTimestamp(),
      })
    } catch (error) {
      throw new Error(handleFirebaseError(error))
    }
  }

  // Increment pomodoro count
  static async incrementPomodoroCount(taskId: string): Promise<void> {
    try {
      const taskRef = doc(db, TASKS_COLLECTION, taskId)
      const task = await this.getTask(taskId)
      
      if (!task) throw new Error('Task not found')

      await updateDoc(taskRef, {
        pomodoroCount: task.pomodoroCount + 1,
        updatedAt: serverTimestamp(),
      })
    } catch (error) {
      throw new Error(handleFirebaseError(error))
    }
  }

  // Bulk update tasks
  static async bulkUpdateTasks(
    updates: Array<{ id: string; data: Partial<Task> }>
  ): Promise<void> {
    try {
      const batch = writeBatch(db)

      updates.forEach(({ id, data }) => {
        const taskRef = doc(db, TASKS_COLLECTION, id)
        batch.update(taskRef, {
          ...data,
          updatedAt: serverTimestamp(),
        })
      })

      await batch.commit()
    } catch (error) {
      throw new Error(handleFirebaseError(error))
    }
  }

  // Get user's tasks statistics
  static async getTasksStats(userId: string, workspaceId?: string): Promise<{
    total: number
    completed: number
    inProgress: number
    overdue: number
  }> {
    try {
      const filters: TaskFilters = { isArchived: false }
      if (workspaceId) filters.workspaceId = workspaceId
      
      // Get user's assigned tasks
      const assignedTasks = await this.getTasks({ ...filters, assigneeId: userId }, 1000)
      
      // Get tasks created by user
      const createdQuery = query(
        collection(db, TASKS_COLLECTION),
        where('createdById', '==', userId),
        where('isArchived', '==', false)
      )
      const createdSnapshot = await getDocs(createdQuery)
      
      const allTasks = [
        ...assignedTasks.items,
        ...createdSnapshot.docs.map(doc => ({
          id: doc.id,
          ...doc.data(),
          createdAt: doc.data().createdAt?.toDate() || new Date(),
          updatedAt: doc.data().updatedAt?.toDate() || new Date(),
          dueDate: doc.data().dueDate?.toDate(),
          completedAt: doc.data().completedAt?.toDate(),
        } as Task))
      ]

      // Remove duplicates
      const uniqueTasks = allTasks.filter((task, index, self) => 
        index === self.findIndex(t => t.id === task.id)
      )

      const now = new Date()
      const stats = {
        total: uniqueTasks.length,
        completed: uniqueTasks.filter(task => task.status === 'done').length,
        inProgress: uniqueTasks.filter(task => task.status === 'in_progress').length,
        overdue: uniqueTasks.filter(task => 
          task.dueDate && task.dueDate < now && task.status !== 'done'
        ).length,
      }

      return stats
    } catch (error) {
      throw new Error(handleFirebaseError(error))
    }
  }
}


--- src/services/userService.ts ---

import {
  doc,
  getDoc,
  setDoc,
  updateDoc,
  deleteDoc,
  serverTimestamp,
} from 'firebase/firestore'
import { db } from '@/lib/firebase'
import { User, UserPreferences } from '@/types'
import { handleFirebaseError } from './firebase'

const USERS_COLLECTION = 'users'

export class UserService {
  // Create a new user document
  static async createUser(userId: string, userData: Partial<User>): Promise<void> {
    try {
      const userRef = doc(db, USERS_COLLECTION, userId)
      
      const defaultPreferences: UserPreferences = {
        theme: 'system',
        language: 'ru',
        timezone: 'Europe/Moscow',
        notifications: {
          email: true,
          push: true,
          desktop: true,
          taskReminders: true,
          pomodoroBreaks: true,
          achievements: true,
          weeklyReports: true,
        },
        pomodoro: {
          workDuration: 25,
          shortBreakDuration: 5,
          longBreakDuration: 15,
          longBreakInterval: 4,
          autoStartBreaks: false,
          autoStartPomodoros: false,
          soundEnabled: true,
          soundVolume: 50,
        },
        gamification: {
          showBadges: true,
          showLevel: true,
          showXP: true,
          showStreak: true,
          gardenEnabled: true,
          soundEffects: true,
        },
      }

      const user: User = {
        id: userId,
        email: userData.email || '',
        displayName: userData.displayName || '',
        photoURL: userData.photoURL,
        role: 'free',
        createdAt: new Date(),
        updatedAt: new Date(),
        preferences: defaultPreferences,
        achievements: [],
        level: 1,
        xp: 0,
        streakCount: 0,
        totalTasksCompleted: 0,
        totalPomodoroCompleted: 0,
        ...userData,
      }

      await setDoc(userRef, {
        ...user,
        createdAt: serverTimestamp(),
        updatedAt: serverTimestamp(),
      })
    } catch (error) {
      throw new Error(handleFirebaseError(error))
    }
  }

  // Get user by ID
  static async getUser(userId: string): Promise<User | null> {
    try {
      const userRef = doc(db, USERS_COLLECTION, userId)
      const userSnap = await getDoc(userRef)
      
      if (userSnap.exists()) {
        const data = userSnap.data()
        return {
          ...data,
          createdAt: data.createdAt?.toDate() || new Date(),
          updatedAt: data.updatedAt?.toDate() || new Date(),
        } as User
      }
      
      return null
    } catch (error) {
      throw new Error(handleFirebaseError(error))
    }
  }

  // Update user
  static async updateUser(userId: string, updates: Partial<User>): Promise<void> {
    try {
      const userRef = doc(db, USERS_COLLECTION, userId)
      await updateDoc(userRef, {
        ...updates,
        updatedAt: serverTimestamp(),
      })
    } catch (error) {
      throw new Error(handleFirebaseError(error))
    }
  }

  // Update user preferences
  static async updateUserPreferences(
    userId: string,
    preferences: Partial<UserPreferences>
  ): Promise<void> {
    try {
      const userRef = doc(db, USERS_COLLECTION, userId)
      await updateDoc(userRef, {
        preferences,
        updatedAt: serverTimestamp(),
      })
    } catch (error) {
      throw new Error(handleFirebaseError(error))
    }
  }

  // Add XP to user
  static async addXP(userId: string, xpAmount: number): Promise<void> {
    try {
      const userRef = doc(db, USERS_COLLECTION, userId)
      const userSnap = await getDoc(userRef)
      
      if (userSnap.exists()) {
        const userData = userSnap.data() as User
        const newXP = userData.xp + xpAmount
        const newLevel = this.calculateLevel(newXP)
        
        await updateDoc(userRef, {
          xp: newXP,
          level: newLevel,
          updatedAt: serverTimestamp(),
        })
      }
    } catch (error) {
      throw new Error(handleFirebaseError(error))
    }
  }

  // Update streak count
  static async updateStreak(userId: string, streakCount: number): Promise<void> {
    try {
      const userRef = doc(db, USERS_COLLECTION, userId)
      await updateDoc(userRef, {
        streakCount,
        updatedAt: serverTimestamp(),
      })
    } catch (error) {
      throw new Error(handleFirebaseError(error))
    }
  }

  // Increment task completion count
  static async incrementTaskCount(userId: string): Promise<void> {
    try {
      const userRef = doc(db, USERS_COLLECTION, userId)
      const userSnap = await getDoc(userRef)
      
      if (userSnap.exists()) {
        const userData = userSnap.data() as User
        await updateDoc(userRef, {
          totalTasksCompleted: userData.totalTasksCompleted + 1,
          updatedAt: serverTimestamp(),
        })
      }
    } catch (error) {
      throw new Error(handleFirebaseError(error))
    }
  }

  // Increment pomodoro completion count
  static async incrementPomodoroCount(userId: string): Promise<void> {
    try {
      const userRef = doc(db, USERS_COLLECTION, userId)
      const userSnap = await getDoc(userRef)
      
      if (userSnap.exists()) {
        const userData = userSnap.data() as User
        await updateDoc(userRef, {
          totalPomodoroCompleted: userData.totalPomodoroCompleted + 1,
          updatedAt: serverTimestamp(),
        })
      }
    } catch (error) {
      throw new Error(handleFirebaseError(error))
    }
  }

  // Delete user
  static async deleteUser(userId: string): Promise<void> {
    try {
      const userRef = doc(db, USERS_COLLECTION, userId)
      await deleteDoc(userRef)
    } catch (error) {
      throw new Error(handleFirebaseError(error))
    }
  }

  // Helper method to calculate level from XP
  private static calculateLevel(xp: number): number {
    const baseXP = 100
    const multiplier = 1.5
    let level = 1
    let requiredXP = 0
    
    while (requiredXP <= xp) {
      level++
      requiredXP += Math.floor(baseXP * Math.pow(multiplier, level - 2))
    }
    
    return level - 1
  }
}


--- src/services/workspaceService.ts ---

import { 
  getFunctions, 
  httpsCallable
} from 'firebase/functions'
import { getAuth } from 'firebase/auth'

// –¢–∏–ø—ã –¥–ª—è workspace API
export interface CreateWorkspacePayload {
  name: string
  description?: string | null
  isPersonal: boolean
  teamId?: string | null
  activeApproach?: string
  defaultTags?: string[]
  settings?: { [key: string]: any }
}

export interface UpdateWorkspacePayload {
  workspaceId: string
  name?: string
  description?: string | null
  activeApproach?: string
  defaultTags?: string[]
  settings?: { [key: string]: any }
}

export interface WorkspaceClientDto {
  id: string
  name: string
  description: string | null
  ownerUid: string
  isPersonal: boolean
  teamId: string | null
  createdAt: string
  updatedAt: string
  activeApproach: string
  defaultTags: string[]
  settings: { [key: string]: any }
  currentUserWorkspaceRole?: 'owner' | 'admin' | 'manager' | 'editor' | 'member' | 'viewer' | null
}

export interface CreateWorkspaceResponse {
  workspace: WorkspaceClientDto
}

export interface GetUserWorkspacesResponse {
  workspaces: WorkspaceClientDto[]
}

export interface GetWorkspaceDetailsResponse {
  workspace: WorkspaceClientDto
}

export interface UpdateWorkspaceResponse {
  success: boolean
  updatedWorkspace: WorkspaceClientDto
}

export interface DeleteWorkspaceResponse {
  success: boolean
  message: string
}

class WorkspaceService {
  private functions = getFunctions()
  
  constructor() {
    console.log('‚úÖ WorkspaceService initialized for production')
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
   */
  async createWorkspace(payload: CreateWorkspacePayload): Promise<CreateWorkspaceResponse> {
    try {
      const auth = getAuth()
      if (!auth.currentUser) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω')
      }

      const createWorkspaceFunction = httpsCallable<CreateWorkspacePayload, CreateWorkspaceResponse>(
        this.functions,
        'createWorkspace'
      )

      const result = await createWorkspaceFunction(payload)
      return result.data
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞:', error)
      throw new Error(error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ')
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getUserWorkspaces(): Promise<GetUserWorkspacesResponse> {
    try {
      const auth = getAuth()
      if (!auth.currentUser) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω')
      }

      const getUserWorkspacesFunction = httpsCallable<void, GetUserWorkspacesResponse>(
        this.functions,
        'getUserWorkspaces'
      )

      const result = await getUserWorkspacesFunction()
      return result.data
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤:', error)
      throw new Error(error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞–±–æ—á–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞')
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
   */
  async getWorkspaceDetails(workspaceId: string): Promise<GetWorkspaceDetailsResponse> {
    try {
      const auth = getAuth()
      if (!auth.currentUser) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω')
      }

      const getWorkspaceDetailsFunction = httpsCallable<
        { workspaceId: string },
        GetWorkspaceDetailsResponse
      >(this.functions, 'getWorkspaceDetails')

      const result = await getWorkspaceDetailsFunction({ workspaceId })
      return result.data
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞:', error)
      throw new Error(error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ—Ç–∞–ª–∏ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞')
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
   */
  async updateWorkspace(payload: UpdateWorkspacePayload): Promise<UpdateWorkspaceResponse> {
    try {
      const auth = getAuth()
      if (!auth.currentUser) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω')
      }

      const updateWorkspaceFunction = httpsCallable<UpdateWorkspacePayload, UpdateWorkspaceResponse>(
        this.functions,
        'updateWorkspace'
      )

      const result = await updateWorkspaceFunction(payload)
      return result.data
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞:', error)
      throw new Error(error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ')
    }
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
   */
  async deleteWorkspace(workspaceId: string): Promise<DeleteWorkspaceResponse> {
    try {
      const auth = getAuth()
      if (!auth.currentUser) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω')
      }

      const deleteWorkspaceFunction = httpsCallable<
        { workspaceId: string },
        DeleteWorkspaceResponse
      >(this.functions, 'deleteWorkspace')

      const result = await deleteWorkspaceFunction({ workspaceId })
      return result.data
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞:', error)
      throw new Error(error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ')
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
export const workspaceService = new WorkspaceService()
export default workspaceService


--- src/stores/appStore.ts ---

import { create } from 'zustand'
import { devtools, persist } from 'zustand/middleware'
import { immer } from 'zustand/middleware/immer'
import { User, Workspace, Project } from '@/types'
// import { WorkspaceClientDto } from '@/services/workspaceService' // TODO: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

interface AppState {
  // User state
  currentUser: User | null
  
  // Current workspace and project
  currentWorkspace: Workspace | null
  currentProject: Project | null
  
  // UI state
  sidebarOpen: boolean
  theme: 'light' | 'dark' | 'system'
  
  // Loading states
  isLoading: boolean
  isInitializing: boolean
  
  // Error state
  error: string | null
  
  // Actions
  setCurrentUser: (user: User | null) => void
  setCurrentWorkspace: (workspace: Workspace | null) => void
  setCurrentProject: (project: Project | null) => void
  setSidebarOpen: (open: boolean) => void
  setTheme: (theme: 'light' | 'dark' | 'system') => void
  setLoading: (loading: boolean) => void
  setInitializing: (initializing: boolean) => void
  setError: (error: string | null) => void
  clearError: () => void
  reset: () => void
}

const initialState = {
  currentUser: null,
  currentWorkspace: null,
  currentProject: null,
  sidebarOpen: true,
  theme: 'system' as const,
  isLoading: false,
  isInitializing: true,
  error: null,
}

export const useAppStore = create<AppState>()(
  devtools(
    persist(
      immer((set) => ({
        ...initialState,

        setCurrentUser: (user) =>
          set((state) => {
            state.currentUser = user
          }),

        setCurrentWorkspace: (workspace) =>
          set((state) => {
            state.currentWorkspace = workspace
          }),

        setCurrentProject: (project) =>
          set((state) => {
            state.currentProject = project
          }),

        setSidebarOpen: (open) =>
          set((state) => {
            state.sidebarOpen = open
          }),

        setTheme: (theme) =>
          set((state) => {
            state.theme = theme
          }),

        setLoading: (loading) =>
          set((state) => {
            state.isLoading = loading
          }),

        setInitializing: (initializing) =>
          set((state) => {
            state.isInitializing = initializing
          }),

        setError: (error) =>
          set((state) => {
            state.error = error
          }),

        clearError: () =>
          set((state) => {
            state.error = null
          }),

        reset: () =>
          set((state) => {
            Object.assign(state, initialState)
          }),
      })),
      {
        name: 'app-store',
        partialize: (state) => ({
          sidebarOpen: state.sidebarOpen,
          theme: state.theme,
          currentWorkspace: state.currentWorkspace,
          currentProject: state.currentProject,
        }),
      }
    ),
    {
      name: 'app-store',
    }
  )
)


--- src/stores/pomodoroStore.ts ---

import { create } from 'zustand'
import { devtools } from 'zustand/middleware'
import { immer } from 'zustand/middleware/immer'
import { PomodoroSession, PomodoroSettings } from '@/types'
import { POMODORO } from '@/constants'

type PomodoroStatus = 'idle' | 'running' | 'paused' | 'completed'
type SessionType = 'work' | 'short_break' | 'long_break'

interface PomodoroState {
  // Timer state
  timeRemaining: number
  totalTime: number
  status: PomodoroStatus
  sessionType: SessionType
  currentSession: PomodoroSession | null
  
  // Session tracking
  completedPomodoros: number
  dailyGoal: number
  
  // Settings
  settings: PomodoroSettings
  
  // Current task
  currentTaskId: string | null
  
  // Actions
  startTimer: (taskId?: string) => void
  pauseTimer: () => void
  resumeTimer: () => void
  stopTimer: () => void
  completeSession: () => void
  skipSession: () => void
  resetTimer: () => void
  setTimeRemaining: (time: number) => void
  setSettings: (settings: Partial<PomodoroSettings>) => void
  setDailyGoal: (goal: number) => void
  setCurrentTask: (taskId: string | null) => void
  tick: () => void
}

const defaultSettings: PomodoroSettings = {
  workDuration: POMODORO.DEFAULT_WORK_DURATION / 60, // Convert to minutes
  shortBreakDuration: POMODORO.DEFAULT_SHORT_BREAK / 60,
  longBreakDuration: POMODORO.DEFAULT_LONG_BREAK / 60,
  longBreakInterval: POMODORO.DEFAULT_LONG_BREAK_INTERVAL,
  autoStartBreaks: false,
  autoStartPomodoros: false,
  soundEnabled: true,
  soundVolume: 50,
}

const initialState = {
  timeRemaining: defaultSettings.workDuration * 60,
  totalTime: defaultSettings.workDuration * 60,
  status: 'idle' as PomodoroStatus,
  sessionType: 'work' as SessionType,
  currentSession: null,
  completedPomodoros: 0,
  dailyGoal: 8,
  settings: defaultSettings,
  currentTaskId: null,
}

export const usePomodoroStore = create<PomodoroState>()(
  devtools(
    immer((set) => ({
      ...initialState,

      startTimer: (taskId) =>
        set((state) => {
          const { settings, sessionType } = state
          let duration: number

          switch (sessionType) {
            case 'work':
              duration = settings.workDuration * 60
              break
            case 'short_break':
              duration = settings.shortBreakDuration * 60
              break
            case 'long_break':
              duration = settings.longBreakDuration * 60
              break
          }

          state.status = 'running'
          state.timeRemaining = duration
          state.totalTime = duration
          state.currentTaskId = taskId || null
          
          // Create new session
          state.currentSession = {
            id: Date.now().toString(),
            taskId: taskId,
            workspaceId: '', // TODO: Get from current workspace
            userId: '', // TODO: Get from current user
            type: sessionType,
            duration,
            startTime: new Date(),
            isCompleted: false,
            isPaused: false,
            pausedDuration: 0,
            tags: [],
          }
        }),

      pauseTimer: () =>
        set((state) => {
          if (state.status === 'running') {
            state.status = 'paused'
            if (state.currentSession) {
              state.currentSession.isPaused = true
            }
          }
        }),

      resumeTimer: () =>
        set((state) => {
          if (state.status === 'paused') {
            state.status = 'running'
            if (state.currentSession) {
              state.currentSession.isPaused = false
            }
          }
        }),

      stopTimer: () =>
        set((state) => {
          state.status = 'idle'
          state.timeRemaining = state.totalTime
          state.currentSession = null
          state.currentTaskId = null
        }),

      completeSession: () =>
        set((state) => {
          if (state.currentSession) {
            state.currentSession.isCompleted = true
            state.currentSession.endTime = new Date()
          }

          if (state.sessionType === 'work') {
            state.completedPomodoros += 1
            
            // Determine next session type
            const isLongBreakTime = 
              state.completedPomodoros % state.settings.longBreakInterval === 0
            
            state.sessionType = isLongBreakTime ? 'long_break' : 'short_break'
          } else {
            state.sessionType = 'work'
          }

          state.status = 'completed'
          state.timeRemaining = 0
        }),

      skipSession: () =>
        set((state) => {
          if (state.sessionType === 'work') {
            const isLongBreakTime = 
              (state.completedPomodoros + 1) % state.settings.longBreakInterval === 0
            state.sessionType = isLongBreakTime ? 'long_break' : 'short_break'
          } else {
            state.sessionType = 'work'
          }

          state.status = 'idle'
          state.currentSession = null
          state.currentTaskId = null
        }),

      resetTimer: () =>
        set((state) => {
          Object.assign(state, initialState)
        }),

      setTimeRemaining: (time) =>
        set((state) => {
          state.timeRemaining = time
        }),

      setSettings: (newSettings) =>
        set((state) => {
          state.settings = { ...state.settings, ...newSettings }
          
          // Update timer if idle and session type matches
          if (state.status === 'idle') {
            switch (state.sessionType) {
              case 'work':
                state.timeRemaining = state.settings.workDuration * 60
                state.totalTime = state.settings.workDuration * 60
                break
              case 'short_break':
                state.timeRemaining = state.settings.shortBreakDuration * 60
                state.totalTime = state.settings.shortBreakDuration * 60
                break
              case 'long_break':
                state.timeRemaining = state.settings.longBreakDuration * 60
                state.totalTime = state.settings.longBreakDuration * 60
                break
            }
          }
        }),

      setDailyGoal: (goal) =>
        set((state) => {
          state.dailyGoal = goal
        }),

      setCurrentTask: (taskId) =>
        set((state) => {
          state.currentTaskId = taskId
        }),

      tick: () =>
        set((state) => {
          if (state.status === 'running' && state.timeRemaining > 0) {
            state.timeRemaining -= 1
            
            if (state.timeRemaining === 0) {
              // Auto-complete session
              if (state.currentSession) {
                state.currentSession.isCompleted = true
                state.currentSession.endTime = new Date()
              }

              if (state.sessionType === 'work') {
                state.completedPomodoros += 1
                
                const isLongBreakTime = 
                  state.completedPomodoros % state.settings.longBreakInterval === 0
                
                state.sessionType = isLongBreakTime ? 'long_break' : 'short_break'
              } else {
                state.sessionType = 'work'
              }

              state.status = 'completed'
            }
          }
        }),
    })),
    {
      name: 'pomodoro-store',
    }
  )
)


--- src/stores/workspaceStore.ts ---

import { create } from 'zustand'
import { devtools, persist } from 'zustand/middleware'
import { immer } from 'zustand/middleware/immer'
import { WorkspaceClientDto } from '@/services/workspaceService'

interface WorkspaceState {
  // –¢–µ–∫—É—â–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ —Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
  currentWorkspace: WorkspaceClientDto | null
  
  // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  workspaces: WorkspaceClientDto[]
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
  isLoading: boolean
  isCreating: boolean
  isUpdating: boolean
  isDeleting: boolean
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–æ–∫
  error: string | null
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  viewMode: 'grid' | 'list'
  showPersonalOnly: boolean
  showTeamOnly: boolean
  
  // –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
  searchQuery: string
  selectedTags: string[]
  sortBy: 'name' | 'created' | 'updated'
  sortOrder: 'asc' | 'desc'
  
  // Actions
  setCurrentWorkspace: (workspace: WorkspaceClientDto | null) => void
  setWorkspaces: (workspaces: WorkspaceClientDto[]) => void
  addWorkspace: (workspace: WorkspaceClientDto) => void
  updateWorkspace: (workspaceId: string, updates: Partial<WorkspaceClientDto>) => void
  removeWorkspace: (workspaceId: string) => void
  
  // Loading states
  setLoading: (loading: boolean) => void
  setCreating: (creating: boolean) => void
  setUpdating: (updating: boolean) => void
  setDeleting: (deleting: boolean) => void
  
  // Error handling
  setError: (error: string | null) => void
  clearError: () => void
  
  // View settings
  setViewMode: (mode: 'grid' | 'list') => void
  setShowPersonalOnly: (show: boolean) => void
  setShowTeamOnly: (show: boolean) => void
  
  // Search and filtering
  setSearchQuery: (query: string) => void
  setSelectedTags: (tags: string[]) => void
  toggleTag: (tag: string) => void
  setSortBy: (sortBy: 'name' | 'created' | 'updated') => void
  setSortOrder: (order: 'asc' | 'desc') => void
  
  // Computed selectors
  getFilteredWorkspaces: () => WorkspaceClientDto[]
  getPersonalWorkspaces: () => WorkspaceClientDto[]
  getTeamWorkspaces: () => WorkspaceClientDto[]
  getWorkspaceById: (id: string) => WorkspaceClientDto | undefined
  getAllTags: () => string[]
  
  // Utility actions
  reset: () => void
  clearFilters: () => void
}

const initialState = {
  currentWorkspace: null,
  workspaces: [],
  isLoading: false,
  isCreating: false,
  isUpdating: false,
  isDeleting: false,
  error: null,
  viewMode: 'grid' as const,
  showPersonalOnly: false,
  showTeamOnly: false,
  searchQuery: '',
  selectedTags: [],
  sortBy: 'updated' as const,
  sortOrder: 'desc' as const,
}

export const useWorkspaceStore = create<WorkspaceState>()(
  devtools(
    persist(
      immer((set, get) => ({
        ...initialState,

        // Workspace management
        setCurrentWorkspace: (workspace) =>
          set((state) => {
            state.currentWorkspace = workspace
          }),

        setWorkspaces: (workspaces) =>
          set((state) => {
            state.workspaces = workspaces
          }),

        addWorkspace: (workspace) =>
          set((state) => {
            state.workspaces.unshift(workspace)
          }),

        updateWorkspace: (workspaceId, updates) =>
          set((state) => {
            const index = state.workspaces.findIndex(ws => ws.id === workspaceId)
            if (index !== -1) {
              Object.assign(state.workspaces[index], updates)
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –µ—Å–ª–∏ –æ–Ω–æ —Å–æ–≤–ø–∞–¥–∞–µ—Ç
            if (state.currentWorkspace?.id === workspaceId) {
              Object.assign(state.currentWorkspace, updates)
            }
          }),

        removeWorkspace: (workspaceId) =>
          set((state) => {
            state.workspaces = state.workspaces.filter(ws => ws.id !== workspaceId)
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ
            if (state.currentWorkspace?.id === workspaceId) {
              state.currentWorkspace = null
            }
          }),

        // Loading states
        setLoading: (loading) =>
          set((state) => {
            state.isLoading = loading
          }),

        setCreating: (creating) =>
          set((state) => {
            state.isCreating = creating
          }),

        setUpdating: (updating) =>
          set((state) => {
            state.isUpdating = updating
          }),

        setDeleting: (deleting) =>
          set((state) => {
            state.isDeleting = deleting
          }),

        // Error handling
        setError: (error) =>
          set((state) => {
            state.error = error
          }),

        clearError: () =>
          set((state) => {
            state.error = null
          }),

        // View settings
        setViewMode: (mode) =>
          set((state) => {
            state.viewMode = mode
          }),

        setShowPersonalOnly: (show) =>
          set((state) => {
            state.showPersonalOnly = show
            if (show) state.showTeamOnly = false
          }),

        setShowTeamOnly: (show) =>
          set((state) => {
            state.showTeamOnly = show
            if (show) state.showPersonalOnly = false
          }),

        // Search and filtering
        setSearchQuery: (query) =>
          set((state) => {
            state.searchQuery = query
          }),

        setSelectedTags: (tags) =>
          set((state) => {
            state.selectedTags = tags
          }),

        toggleTag: (tag) =>
          set((state) => {
            const index = state.selectedTags.indexOf(tag)
            if (index === -1) {
              state.selectedTags.push(tag)
            } else {
              state.selectedTags.splice(index, 1)
            }
          }),

        setSortBy: (sortBy) =>
          set((state) => {
            state.sortBy = sortBy
          }),

        setSortOrder: (order) =>
          set((state) => {
            state.sortOrder = order
          }),

        // Computed selectors
        getFilteredWorkspaces: () => {
          const state = get()
          let filtered = [...state.workspaces]

          // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É
          if (state.showPersonalOnly) {
            filtered = filtered.filter(ws => ws.isPersonal)
          } else if (state.showTeamOnly) {
            filtered = filtered.filter(ws => !ws.isPersonal)
          }

          // –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –æ–ø–∏—Å–∞–Ω–∏—é
          if (state.searchQuery) {
            const query = state.searchQuery.toLowerCase()
            filtered = filtered.filter(ws =>
              ws.name.toLowerCase().includes(query) ||
              ws.description?.toLowerCase().includes(query)
            )
          }

          // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–µ–≥–∞–º
          if (state.selectedTags.length > 0) {
            filtered = filtered.filter(ws =>
              state.selectedTags.some(tag =>
                ws.defaultTags.includes(tag)
              )
            )
          }

          // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
          filtered.sort((a, b) => {
            let aValue: string | Date
            let bValue: string | Date

            switch (state.sortBy) {
              case 'name':
                aValue = a.name
                bValue = b.name
                break
              case 'created':
                aValue = new Date(a.createdAt)
                bValue = new Date(b.createdAt)
                break
              case 'updated':
                aValue = new Date(a.updatedAt)
                bValue = new Date(b.updatedAt)
                break
              default:
                return 0
            }

            if (state.sortOrder === 'asc') {
              return aValue < bValue ? -1 : aValue > bValue ? 1 : 0
            } else {
              return aValue > bValue ? -1 : aValue < bValue ? 1 : 0
            }
          })

          return filtered
        },

        getPersonalWorkspaces: () => {
          return get().workspaces.filter(ws => ws.isPersonal)
        },

        getTeamWorkspaces: () => {
          return get().workspaces.filter(ws => !ws.isPersonal)
        },

        getWorkspaceById: (id) => {
          return get().workspaces.find(ws => ws.id === id)
        },

        getAllTags: () => {
          const allTags = get().workspaces.flatMap(ws => ws.defaultTags)
          return [...new Set(allTags)].sort()
        },

        // Utility actions
        reset: () =>
          set((state) => {
            Object.assign(state, initialState)
          }),

        clearFilters: () =>
          set((state) => {
            state.searchQuery = ''
            state.selectedTags = []
            state.showPersonalOnly = false
            state.showTeamOnly = false
          }),
      })),
      {
        name: 'workspace-store',
        partialize: (state) => ({
          currentWorkspace: state.currentWorkspace,
          viewMode: state.viewMode,
          sortBy: state.sortBy,
          sortOrder: state.sortOrder,
        }),
      }
    ),
    {
      name: 'workspace-store',
    }
  )
)


--- src/types/index.ts ---

// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
export interface User {
  id: string
  email: string
  displayName: string
  photoURL?: string
  role: 'free' | 'premium' | 'admin'
  createdAt: Date
  updatedAt: Date
  preferences: UserPreferences
  achievements: string[]
  level: number
  xp: number
  streakCount: number
  totalTasksCompleted: number
  totalPomodoroCompleted: number
}

export interface UserPreferences {
  theme: 'light' | 'dark' | 'system'
  language: string
  timezone: string
  notifications: NotificationSettings
  pomodoro: PomodoroSettings
  gamification: GamificationSettings
}

export interface NotificationSettings {
  email: boolean
  push: boolean
  desktop: boolean
  taskReminders: boolean
  pomodoroBreaks: boolean
  achievements: boolean
  weeklyReports: boolean
}

export interface PomodoroSettings {
  workDuration: number // –≤ –º–∏–Ω—É—Ç–∞—Ö
  shortBreakDuration: number
  longBreakDuration: number
  longBreakInterval: number // –ø–æ—Å–ª–µ —Å–∫–æ–ª—å–∫–∏—Ö —Ü–∏–∫–ª–æ–≤
  autoStartBreaks: boolean
  autoStartPomodoros: boolean
  soundEnabled: boolean
  soundVolume: number
}

export interface GamificationSettings {
  showBadges: boolean
  showLevel: boolean
  showXP: boolean
  showStreak: boolean
  gardenEnabled: boolean
  soundEffects: boolean
}

// –†–∞–±–æ—á–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
export interface Workspace {
  id: string
  name: string
  description?: string
  ownerId: string
  type: 'personal' | 'team'
  members: WorkspaceMember[]
  createdAt: Date
  updatedAt: Date
  settings: WorkspaceSettings
  isArchived: boolean
}

export interface WorkspaceMember {
  userId: string
  email: string
  displayName: string
  role: 'owner' | 'admin' | 'member' | 'viewer'
  joinedAt: Date
  permissions: Permission[]
}

export interface Permission {
  resource: 'tasks' | 'projects' | 'members' | 'settings'
  actions: ('create' | 'read' | 'update' | 'delete')[]
}

export interface WorkspaceSettings {
  isPublic: boolean
  allowMemberInvites: boolean
  defaultTaskView: 'list' | 'kanban' | 'calendar' | 'timeline'
  workingHours: {
    start: string // HH:mm
    end: string // HH:mm
    workDays: number[] // 0-6, 0 = –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
  }
  timezone: string
}

// –ü—Ä–æ–µ–∫—Ç—ã
export interface Project {
  id: string
  name: string
  description?: string
  color: string
  icon?: string
  workspaceId: string
  ownerId: string
  isArchived: boolean
  createdAt: Date
  updatedAt: Date
  settings: ProjectSettings
  stats: ProjectStats
}

export interface ProjectSettings {
  isPublic: boolean
  defaultAssignee?: string
  template?: TaskTemplate
  autoArchive: boolean
  autoArchiveDays: number
}

export interface ProjectStats {
  totalTasks: number
  completedTasks: number
  activeTasks: number
  overdueTasks: number
  totalTimeSpent: number // –≤ –º–∏–Ω—É—Ç–∞—Ö
}

export interface TaskTemplate {
  title: string
  description?: string
  priority: TaskPriority
  estimatedDuration?: number
  tags: string[]
  subtasks: Omit<TaskTemplate, 'subtasks'>[]
}

// –ó–∞–¥–∞—á–∏
export interface Task {
  id: string
  title: string
  description?: string
  projectId?: string
  workspaceId: string
  assigneeId?: string
  createdById: string
  parentId?: string // –¥–ª—è –ø–æ–¥–∑–∞–¥–∞—á
  status: TaskStatus
  priority: TaskPriority
  tags: string[]
  dueDate?: Date
  createdAt: Date
  updatedAt: Date
  completedAt?: Date
  estimatedDuration?: number // –≤ –º–∏–Ω—É—Ç–∞—Ö
  actualDuration?: number // –≤ –º–∏–Ω—É—Ç–∞—Ö
  pomodoroCount: number
  attachments: TaskAttachment[]
  comments: TaskComment[]
  dependencies: TaskDependency[]
  customFields: Record<string, any>
  isArchived: boolean
}

export type TaskStatus = 'todo' | 'in_progress' | 'review' | 'done' | 'cancelled'
export type TaskPriority = 'low' | 'medium' | 'high' | 'urgent'

export interface TaskAttachment {
  id: string
  name: string
  url: string
  type: string
  size: number
  uploadedAt: Date
  uploadedBy: string
}

export interface TaskComment {
  id: string
  content: string
  authorId: string
  createdAt: Date
  updatedAt: Date
  isEdited: boolean
  mentions: string[]
}

export interface TaskDependency {
  id: string
  type: 'blocks' | 'blocked_by'
  taskId: string
}

// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
export interface CustomView {
  id: string
  name: string
  description?: string
  workspaceId: string
  createdById: string
  type: 'list' | 'kanban' | 'calendar' | 'timeline' | 'analytics'
  filters: ViewFilter[]
  sorting: ViewSorting[]
  grouping?: ViewGrouping
  settings: ViewSettings
  isShared: boolean
  createdAt: Date
  updatedAt: Date
}

export interface ViewFilter {
  field: string
  operator: 'equals' | 'not_equals' | 'contains' | 'not_contains' | 'greater_than' | 'less_than' | 'in' | 'not_in' | 'is_empty' | 'is_not_empty'
  value: any
  logic?: 'and' | 'or'
}

export interface ViewSorting {
  field: string
  direction: 'asc' | 'desc'
}

export interface ViewGrouping {
  field: string
  showEmptyGroups: boolean
}

export interface ViewSettings {
  columns?: string[] // –¥–ª—è —Å–ø–∏—Å–æ—á–Ω–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
  showSubtasks: boolean
  showCompleted: boolean
  showArchived: boolean
  colorBy?: string
  density: 'compact' | 'normal' | 'comfortable'
}

// Pomodoro
export interface PomodoroSession {
  id: string
  taskId?: string
  workspaceId: string
  userId: string
  type: 'work' | 'short_break' | 'long_break'
  duration: number // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  startTime: Date
  endTime?: Date
  isCompleted: boolean
  isPaused: boolean
  pausedDuration: number // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  tags: string[]
  notes?: string
}

// –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è
export interface Achievement {
  id: string
  name: string
  description: string
  icon: string
  category: 'tasks' | 'pomodoro' | 'streak' | 'social' | 'garden'
  type: 'single' | 'progressive'
  requirements: AchievementRequirement[]
  rewards: AchievementReward[]
  isSecret: boolean
}

export interface AchievementRequirement {
  type: 'task_count' | 'pomodoro_count' | 'streak_days' | 'level_reached' | 'custom'
  value: number
  timeframe?: 'daily' | 'weekly' | 'monthly' | 'all_time'
}

export interface AchievementReward {
  type: 'xp' | 'badge' | 'garden_item' | 'custom'
  value: number | string
}

export interface UserAchievement {
  achievementId: string
  userId: string
  unlockedAt: Date
  progress: number // 0-100
}

// –°–∞–¥
export interface GardenPlant {
  id: string
  name: string
  description: string
  icon: string
  rarity: 'common' | 'rare' | 'epic' | 'legendary'
  unlockRequirements: AchievementRequirement[]
  growthStages: GrowthStage[]
}

export interface GrowthStage {
  name: string
  icon: string
  requiredXP: number
  duration: number // –≤ —á–∞—Å–∞—Ö
}

export interface UserGardenPlant {
  id: string
  userId: string
  plantId: string
  plantedAt: Date
  currentStage: number
  currentXP: number
  position: { x: number; y: number }
  isWatered: boolean
  lastWateredAt?: Date
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
export interface Notification {
  id: string
  userId: string
  type: 'task_reminder' | 'pomodoro_break' | 'achievement' | 'invitation' | 'mention' | 'system'
  title: string
  message: string
  data?: Record<string, any>
  isRead: boolean
  createdAt: Date
  scheduledFor?: Date
}

// –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
export interface AnalyticsData {
  period: 'day' | 'week' | 'month' | 'year'
  startDate: Date
  endDate: Date
  metrics: {
    tasksCompleted: number
    tasksCreated: number
    pomodoroSessions: number
    timeSpent: number // –≤ –º–∏–Ω—É—Ç–∞—Ö
    productivity: number // 0-100
    streakDays: number
    xpGained: number
  }
  charts: {
    tasksPerDay: { date: string; count: number }[]
    pomodoroPerDay: { date: string; count: number; duration: number }[]
    productivityTrend: { date: string; score: number }[]
    categoryBreakdown: { category: string; count: number; percentage: number }[]
  }
}

// API Response —Ç–∏–ø—ã
export interface ApiResponse<T = any> {
  success: boolean
  data?: T
  error?: string
  message?: string
}

export interface PaginatedResponse<T = any> {
  items: T[]
  total: number
  page: number
  limit: number
  hasNext: boolean
  hasPrev: boolean
}

// –§–æ—Ä–º—ã
export interface LoginForm {
  email: string
  password: string
  rememberMe: boolean
}

export interface RegisterForm {
  email: string
  password: string
  confirmPassword: string
  displayName: string
  acceptTerms: boolean
}

export interface TaskForm {
  title: string
  description?: string
  projectId?: string
  assigneeId?: string
  priority: TaskPriority
  tags: string[]
  dueDate?: Date
  estimatedDuration?: number
}

export interface ProjectForm {
  name: string
  description?: string
  color: string
  icon?: string
  isPublic: boolean
}

export interface WorkspaceForm {
  name: string
  description?: string
  type: 'personal' | 'team'
  isPublic: boolean
}

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
export const TASK_PRIORITIES: Record<TaskPriority, { label: string; color: string; icon: string }> = {
  low: { label: '–ù–∏–∑–∫–∏–π', color: 'text-green-600', icon: 'üîµ' },
  medium: { label: '–°—Ä–µ–¥–Ω–∏–π', color: 'text-yellow-600', icon: 'üü°' },
  high: { label: '–í—ã—Å–æ–∫–∏–π', color: 'text-orange-600', icon: 'üü†' },
  urgent: { label: '–°—Ä–æ—á–Ω—ã–π', color: 'text-red-600', icon: 'üî¥' }
}

export const TASK_STATUSES: Record<TaskStatus, { label: string; color: string; icon: string }> = {
  todo: { label: '–ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é', color: 'text-gray-600', icon: '‚ö™' },
  in_progress: { label: '–í —Ä–∞–±–æ—Ç–µ', color: 'text-blue-600', icon: 'üîµ' },
  review: { label: '–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ', color: 'text-purple-600', icon: 'üü£' },
  done: { label: '–í—ã–ø–æ–ª–Ω–µ–Ω–æ', color: 'text-green-600', icon: '‚úÖ' },
  cancelled: { label: '–û—Ç–º–µ–Ω–µ–Ω–æ', color: 'text-red-600', icon: '‚ùå' }
}


--- src/utils/dateTime.ts ---

// Utility functions for date-time manipulations

// Format a date as 'YYYY-MM-DD'
export function formatDate(date: Date): string {
  return date.toISOString().split('T')[0];
}

// Calculate difference in days between two dates
export function dateDiffInDays(a: Date, b: Date): number {
  const _MS_PER_DAY = 1000 * 60 * 60 * 24;
  // Discard time and time-zone information.
  const utc1 = Date.UTC(a.getFullYear(), a.getMonth(), a.getDate());
  const utc2 = Date.UTC(b.getFullYear(), b.getMonth(), b.getDate());
  return Math.floor((utc2 - utc1) / _MS_PER_DAY);
}

// Check if a date is today
export function isToday(date: Date): boolean {
  const today = new Date();
  return (
    date.getDate() === today.getDate() &&
    date.getMonth() === today.getMonth() &&
    date.getFullYear() === today.getFullYear()
  );
}


--- src/utils/helpers.ts ---

import { type ClassValue, clsx } from 'clsx'
import { twMerge } from 'tailwind-merge'

// Combine class names utility
export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

// Generate unique ID
export function generateId(): string {
  return Math.random().toString(36).substring(2) + Date.now().toString(36)
}

// Debounce function
export function debounce<T extends (...args: any[]) => any>(
  func: T,
  delay: number
): (...args: Parameters<T>) => void {
  let timeoutId: NodeJS.Timeout
  return (...args: Parameters<T>) => {
    clearTimeout(timeoutId)
    timeoutId = setTimeout(() => func(...args), delay)
  }
}

// Throttle function
export function throttle<T extends (...args: any[]) => any>(
  func: T,
  limit: number
): (...args: Parameters<T>) => void {
  let inThrottle: boolean
  return (...args: Parameters<T>) => {
    if (!inThrottle) {
      func(...args)
      inThrottle = true
      setTimeout(() => (inThrottle = false), limit)
    }
  }
}

// Format file size
export function formatFileSize(bytes: number): string {
  if (bytes === 0) return '0 Bytes'
  const k = 1024
  const sizes = ['Bytes', 'KB', 'MB', 'GB']
  const i = Math.floor(Math.log(bytes) / Math.log(k))
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i]
}

// Format duration in seconds to human readable format
export function formatDuration(seconds: number): string {
  const hours = Math.floor(seconds / 3600)
  const minutes = Math.floor((seconds % 3600) / 60)
  const remainingSeconds = seconds % 60

  if (hours > 0) {
    return `${hours}—á ${minutes}–º ${remainingSeconds}—Å`
  } else if (minutes > 0) {
    return `${minutes}–º ${remainingSeconds}—Å`
  } else {
    return `${remainingSeconds}—Å`
  }
}

// Calculate XP required for a specific level
export function calculateXPForLevel(level: number): number {
  const baseXP = 100
  const multiplier = 1.5
  return Math.floor(baseXP * Math.pow(multiplier, level - 1))
}

// Calculate level from total XP
export function calculateLevelFromXP(totalXP: number): number {
  let level = 1
  let requiredXP = 0
  
  while (requiredXP <= totalXP) {
    level++
    requiredXP += calculateXPForLevel(level)
  }
  
  return level - 1
}

// Get XP progress for current level
export function getXPProgress(totalXP: number): { currentLevel: number; currentLevelXP: number; nextLevelXP: number; progress: number } {
  const currentLevel = calculateLevelFromXP(totalXP)
  const currentLevelStartXP = Array.from({ length: currentLevel - 1 }, (_, i) => calculateXPForLevel(i + 1)).reduce((a, b) => a + b, 0)
  const currentLevelXP = totalXP - currentLevelStartXP
  const nextLevelXP = calculateXPForLevel(currentLevel + 1)
  const progress = Math.round((currentLevelXP / nextLevelXP) * 100)

  return {
    currentLevel,
    currentLevelXP,
    nextLevelXP,
    progress
  }
}

// Capitalize first letter
export function capitalize(str: string): string {
  return str.charAt(0).toUpperCase() + str.slice(1)
}

// Truncate text
export function truncate(text: string, length: number): string {
  if (text.length <= length) return text
  return text.substring(0, length) + '...'
}

// Format number with thousand separators
export function formatNumber(num: number): string {
  return num.toLocaleString('ru-RU')
}

// Get random element from array
export function getRandomElement<T>(array: T[]): T {
  return array[Math.floor(Math.random() * array.length)]
}

// Sleep function for async operations
export function sleep(ms: number): Promise<void> {
  return new Promise(resolve => setTimeout(resolve, ms))
}


